<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: Исходный файл TXLib.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="Doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 00173a, Revision: 165</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00058.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>TXLib.h</h1>  </div>
</div>
<div class="contents">
<a href="a00058.htm">См. документацию.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//=================================================================================================================</span>
<a name="l00002"></a>00002 <span class="comment">//           [These sections are for folding control  in Code::Blocks]         [$Date: 2020-05-15 02:04:56 +0400 $]</span>
<a name="l00003"></a>00003 <span class="comment">//           [Best viewed with &quot;Fold all on file open&quot; option enabled]         [Best screen/page width = 120 chars]</span>
<a name="l00004"></a>00004 <span class="comment">//                                                                                                                 </span>
<a name="l00005"></a>00005 <span class="comment">//           [If RUSSIAN CHARS below are UNREADABLE, check this file codepage. It should be CP1251, NOT UTF-8 etc.]</span>
<a name="l00006"></a>00006 <span class="comment">//{          [Use RELOAD options in your IDE or editor (CLion / Visual Studio Code / ...), and do NOT use Convert.]</span>
<a name="l00007"></a>00007 <span class="comment">//=================================================================================================================</span>
<a name="l00088"></a>00088 <span class="comment"></span><span class="comment">//           $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt; $</span>
<a name="l00089"></a>00089 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00096"></a>00096 <span class="comment"></span><span class="comment">//}</span>
<a name="l00097"></a>00097 <span class="comment">//=================================================================================================================</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="preprocessor">#if !defined (__TXLIB_H_INCLUDED)                // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; THE CODE IS HERE, UNFOLD IT &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor">#define       __TXLIB_H_INCLUDED</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span>
<a name="l00102"></a>00102 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00103"></a>00103 <span class="comment">//{          Version information and configuration</span>
<a name="l00104"></a>00104 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00128"></a>00128 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00130"></a>00130 <span class="comment"></span>
<a name="l00131"></a><a class="code" href="a00084.htm#ga6b76c63cd895c2be63ac8e690028623b">00131</a> <span class="preprocessor">#define _TX_VER      _TX_v_FROM_CVS ($VersionInfo: , TXLib.h, 00173a, 166, 2020-05-15 02:04:56 +0400, &quot;Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt;&quot;, $)</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span><span class="preprocessor">#define _TX_VERSION  _TX_V_FROM_CVS ($VersionInfo: , TXLib.h, 00173a, 166, 2020-05-15 02:04:56 +0400, &quot;Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt;&quot;, $)</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span><span class="preprocessor">#define _TX_AUTHOR   _TX_A_FROM_CVS ($VersionInfo: , TXLib.h, 00173a, 166, 2020-05-15 02:04:56 +0400, &quot;Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt;&quot;, $)</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>
<a name="l00136"></a>00136 <span class="preprocessor">#define _TX_v_FROM_CVS(_1,file,ver,rev,date,auth,_2)  ((0x##ver##u &lt;&lt; 16) | 0x##rev##u)</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span><span class="preprocessor">#define _TX_V_FROM_CVS(_1,file,ver,rev,date,auth,_2)  &quot;TXLib [Ver: &quot; #ver &quot;, Rev: &quot; #rev &quot;, Date: &quot; #date &quot;]&quot;</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="preprocessor">#define _TX_A_FROM_CVS(_1,file,ver,rev,date,auth,_2)  &quot;Copyright (C) &quot; auth</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span>
<a name="l00140"></a>00140 
<a name="l00142"></a>00142 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00149"></a>00149 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="preprocessor">#if !defined (_TX_MODULE)</span>
<a name="l00152"></a><a class="code" href="a00084.htm#ga43d277b4418068ebef1fd2bdbaf550f6">00152</a> <span class="preprocessor"></span><span class="preprocessor">    #define   _TX_MODULE      &quot;TXLib&quot;</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span>
<a name="l00155"></a>00155 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00159"></a>00159 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="preprocessor">#if    defined (__GNUC__)</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span>
<a name="l00163"></a>00163 <span class="preprocessor">    #define _GCC_VER          ( __GNUC__*100 + __GNUC_MINOR__*10 + __GNUC_PATCHLEVEL__ )</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>
<a name="l00165"></a>00165 <span class="preprocessor">    #define __TX_COMPILER__   &quot;GNU g++ &quot;            TX_QUOTE (__GNUC__)       &quot;.&quot;  \</span>
<a name="l00166"></a>00166 <span class="preprocessor">                                                    TX_QUOTE (__GNUC_MINOR__) &quot;.&quot;  \</span>
<a name="l00167"></a>00167 <span class="preprocessor">                                                    TX_QUOTE (__GNUC_PATCHLEVEL__) \</span>
<a name="l00168"></a>00168 <span class="preprocessor">                              &quot;, std=&quot;              TX_QUOTE (__cplusplus)</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span>
<a name="l00170"></a>00170 <span class="preprocessor">#elif  defined (__clang__) || defined (__clang_major__)</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>
<a name="l00172"></a>00172 <span class="preprocessor">    #define _CLANG_VER        ( __clang_major__*100 + __clang_minor__*10 + __clang_patchlevel__ )</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>
<a name="l00174"></a>00174 <span class="preprocessor">    #define __TX_COMPILER__   &quot;Clang &quot;              TX_QUOTE (__clang_major__) &quot;.&quot;  \</span>
<a name="l00175"></a>00175 <span class="preprocessor">                                                    TX_QUOTE (__clang_minor__) &quot;.&quot;  \</span>
<a name="l00176"></a>00176 <span class="preprocessor">                                                    TX_QUOTE (__clang_patchlevel__) \</span>
<a name="l00177"></a>00177 <span class="preprocessor">                              &quot;, std=&quot;              TX_QUOTE (__cplusplus)</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span><span class="preprocessor">#elif  defined (_MSC_VER)</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>
<a name="l00180"></a>00180 <span class="preprocessor">    #define __TX_COMPILER__   &quot;MSVS &quot;               TX_QUOTE (_MSC_VER)            \</span>
<a name="l00181"></a>00181 <span class="preprocessor">                              &quot;, std=&quot;              TX_QUOTE (__cplusplus)</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>
<a name="l00183"></a>00183 <span class="preprocessor">#elif  defined (__INTEL_COMPILER)</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>
<a name="l00185"></a>00185 <span class="preprocessor">    #define __TX_COMPILER__   &quot;Intel C++ &quot;          TX_QUOTE (__INTEL_COMPILER)    \</span>
<a name="l00186"></a>00186 <span class="preprocessor">                              &quot;, std=&quot;              TX_QUOTE (__cplusplus)</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span>
<a name="l00189"></a><a class="code" href="a00084.htm#gadd1c9ccd036228402b807abaea14f7ee">00189</a> <span class="preprocessor">    #define __TX_COMPILER__   &quot;Unknown C++, std=&quot;   TX_QUOTE (__cplusplus)</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="preprocessor">#define  TX_QUOTE(sym)        _TX_QUOTE (sym)</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span><span class="preprocessor">#define _TX_QUOTE(sym)        #sym</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>
<a name="l00197"></a>00197 <span class="preprocessor">#define  TX_JOIN(sym1, sym2)  _TX_JOIN (sym1, sym2)</span>
<a name="l00198"></a>00198 <span class="preprocessor"></span><span class="preprocessor">#define _TX_JOIN(sym1, sym2)  sym1 ## sym2</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="preprocessor">#if (__cplusplus &gt;= 201103L) || defined (_MSC_VER) &amp;&amp; (_MSC_VER &gt;= 1800)  // MSVC 2013</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>
<a name="l00204"></a>00204 <span class="preprocessor">    #define _TX_CPP11         1</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span>
<a name="l00207"></a>00207 <span class="preprocessor">#if (__cplusplus &gt;= 201103L) || defined (_MSC_VER) &amp;&amp; (_MSC_VER &gt;= 1900)  // MSVC 2015</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>
<a name="l00209"></a>00209 <span class="preprocessor">    #define _TX_CPP11_MSVC15  1</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span>
<a name="l00212"></a>00212 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00216"></a>00216 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 <span class="preprocessor">#if   !defined (NDEBUG) &amp;&amp;  defined (_DEBUG)</span>
<a name="l00219"></a>00219 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;DEBUG&quot;</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span>
<a name="l00221"></a>00221 <span class="preprocessor">#elif !defined (NDEBUG) &amp;&amp; !defined (_DEBUG)</span>
<a name="l00222"></a><a class="code" href="a00084.htm#ga3e287c38947fea870d01588fbd2a5fc9">00222</a> <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;Debug&quot;</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span>
<a name="l00224"></a>00224 <span class="preprocessor">#elif  defined (NDEBUG)</span>
<a name="l00225"></a>00225 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;Release&quot;</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span>
<a name="l00228"></a>00228 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00232"></a>00232 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00233"></a>00233 
<a name="l00234"></a><a class="code" href="a00080.htm#ga973d717438fe468dd5a5d8d45ede5312">00234</a> <span class="preprocessor">#define __TX_FILELINE__       __FILE__ &quot; (&quot; TX_QUOTE (__LINE__) &quot;)&quot;</span>
<a name="l00235"></a>00235 <span class="preprocessor"></span>
<a name="l00236"></a>00236 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00244"></a>00244 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00245"></a>00245 
<a name="l00246"></a>00246 <span class="preprocessor">#if defined (__GNUC__) || defined (__clang__) || defined (__clang_major__)</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __PRETTY_FUNCTION__</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span>
<a name="l00249"></a>00249 <span class="preprocessor">#elif defined (__FUNCSIG__)</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCSIG__</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span>
<a name="l00252"></a>00252 <span class="preprocessor">#elif defined (__FUNCTION__)</span>
<a name="l00253"></a>00253 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCTION__</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span>
<a name="l00255"></a>00255 <span class="preprocessor">#elif defined (__INTEL_COMPILER) &amp;&amp; (__INTEL_COMPILER &gt;= 600)</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCTION__</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span>
<a name="l00258"></a>00258 <span class="preprocessor">#elif defined (__BORLANDC__) &amp;&amp; (__BORLANDC__ &gt;= 0x550)</span>
<a name="l00259"></a>00259 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNC__</span>
<a name="l00260"></a>00260 <span class="preprocessor"></span>
<a name="l00261"></a>00261 <span class="preprocessor">#elif defined (__cplusplus) &amp;&amp; (__cplusplus &gt;= 199711L)</span>
<a name="l00262"></a>00262 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __func__</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span>
<a name="l00264"></a>00264 <span class="preprocessor">#elif defined (__STDC_VERSION__) &amp;&amp; (__STDC_VERSION__ &gt;= 199901L)</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __func__</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>
<a name="l00267"></a>00267 <span class="preprocessor">#elif defined (__PYTHON__)</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span><span class="preprocessor">    #error No Python. No. Using parseltongue languages can lead you to Slytherin.</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span>
<a name="l00270"></a>00270 <span class="preprocessor">#else</span>
<a name="l00271"></a><a class="code" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309">00271</a> <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   &quot;(&quot; __TX_FILELINE__ &quot;)&quot;</span>
<a name="l00272"></a>00272 <span class="preprocessor"></span>
<a name="l00273"></a>00273 <span class="preprocessor">#endif</span>
<a name="l00274"></a>00274 <span class="preprocessor"></span>
<a name="l00275"></a>00275 <span class="preprocessor">#if !defined (__func__) &amp;&amp; defined (__FUNCTION__)</span>
<a name="l00276"></a>00276 <span class="preprocessor"></span><span class="preprocessor">    #define   __func__        __FUNCTION__</span>
<a name="l00277"></a>00277 <span class="preprocessor"></span>
<a name="l00278"></a>00278 <span class="preprocessor">#endif</span>
<a name="l00279"></a>00279 <span class="preprocessor"></span>
<a name="l00280"></a>00280 <span class="comment">//}</span>
<a name="l00281"></a>00281 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00284"></a>00284 <span class="comment">//{          Compiler- and platform-specific</span>
<a name="l00286"></a>00286 <span class="comment"></span><span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00288"></a>00288 <span class="comment"></span>
<a name="l00289"></a>00289 <span class="preprocessor">#if !defined (__cplusplus)</span>
<a name="l00290"></a>00290 <span class="preprocessor"></span>
<a name="l00291"></a>00291 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00293"></a>00293 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00294"></a>00294 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00295"></a>00295 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Must use C++ to compile TXLib.h. Now you are using C only.</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00297"></a>00297 <span class="preprocessor"></span><span class="preprocessor">    #error CHECK source file EXTENSION. Maybe it is &quot;.C&quot;. It must be &quot;.CPP&quot;.</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span><span class="preprocessor">    #error If your file is named, for example, &quot;Untitled.C&quot;, go to menu [File],</span>
<a name="l00299"></a>00299 <span class="preprocessor"></span><span class="preprocessor">    #error then [Save As] and rename it to &quot;Untitled.CPP&quot;. Please do NOT use spaces.</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00301"></a>00301 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span>
<a name="l00303"></a>00303 <span class="preprocessor">#endif</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span>
<a name="l00305"></a>00305 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="preprocessor">#if !defined (WIN32) &amp;&amp; !defined (__WIN32__) &amp;&amp; !defined(_WIN32) &amp;&amp; !defined(_WIN32_WINNT) &amp;&amp; !defined (__CYGWIN__)</span>
<a name="l00308"></a>00308 <span class="preprocessor"></span>
<a name="l00309"></a>00309 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00310"></a>00310 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00311"></a>00311 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00312"></a>00312 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00313"></a>00313 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Windows (MSVC/Win32 or GCC/MinGW or Cygwin) is the only supported OS, sorry.</span>
<a name="l00314"></a>00314 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00315"></a>00315 <span class="preprocessor"></span><span class="preprocessor">    #error In Linux or MacOS, you should write your own TXLib and share it with your friends, or use wine.</span>
<a name="l00316"></a>00316 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00317"></a>00317 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span>
<a name="l00319"></a>00319 <span class="preprocessor">#endif</span>
<a name="l00320"></a>00320 <span class="preprocessor"></span>
<a name="l00321"></a>00321 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 <span class="preprocessor">#if  defined (UNICODE) || defined (_UNICODE)</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span>
<a name="l00325"></a>00325 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span><span class="preprocessor">    #warning TXLib.h: Disabling the UNICODE</span>
<a name="l00327"></a>00327 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00328"></a>00328 <span class="preprocessor"></span>
<a name="l00329"></a>00329 <span class="preprocessor">    #undef   UNICODE                             // Burn Unicode, burn</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span><span class="preprocessor">    #undef  _UNICODE</span>
<a name="l00331"></a>00331 <span class="preprocessor"></span>
<a name="l00332"></a>00332 <span class="preprocessor">    #if defined (_WINDOWS_H) || defined (_INC_WINDOWS) || defined (_WINDOWS_) || defined (__WINDOWS__)</span>
<a name="l00333"></a>00333 <span class="preprocessor"></span>
<a name="l00334"></a>00334 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00335"></a>00335 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00337"></a>00337 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00338"></a>00338 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Should include &quot;TXLib.h&quot; BEFORE or INSTEAD of &lt;Windows.h&gt; in UNICODE mode.</span>
<a name="l00339"></a>00339 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00340"></a>00340 <span class="preprocessor"></span><span class="preprocessor">    #error REARRANGE your #include directives, or DISABLE the UNICODE mode by #undef UNICODE/_UNICODE.</span>
<a name="l00341"></a>00341 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00342"></a>00342 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00343"></a>00343 <span class="preprocessor"></span>
<a name="l00344"></a>00344 <span class="preprocessor">    #endif</span>
<a name="l00345"></a>00345 <span class="preprocessor"></span>
<a name="l00346"></a>00346 <span class="preprocessor">#endif</span>
<a name="l00347"></a>00347 <span class="preprocessor"></span>
<a name="l00348"></a>00348 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 <span class="preprocessor">#if  defined (__STRICT_ANSI__)                   // Try to extend strict ANSI rules</span>
<a name="l00351"></a>00351 <span class="preprocessor"></span>
<a name="l00352"></a>00352 <span class="preprocessor">    #undef  __STRICT_ANSI__</span>
<a name="l00353"></a>00353 <span class="preprocessor"></span><span class="preprocessor">    #define __STRICT_ANSI__UNDEFINED</span>
<a name="l00354"></a>00354 <span class="preprocessor"></span>
<a name="l00355"></a>00355 <span class="preprocessor">    #if defined (_STRING_H_) || defined (_INC_STRING) || defined (_STDIO_H_) || defined (_INC_STDIO)</span>
<a name="l00356"></a>00356 <span class="preprocessor"></span>
<a name="l00357"></a>00357 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00358"></a>00358 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00359"></a>00359 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00360"></a>00360 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00361"></a>00361 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Should include &quot;TXLib.h&quot; BEFORE &lt;string.h&gt; or &lt;stdio.h&gt; in Strict ANSI mode.</span>
<a name="l00362"></a>00362 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00363"></a>00363 <span class="preprocessor"></span><span class="preprocessor">    #error REARRANGE your #include directives, or DISABLE ANSI-compliancy by #undef __STRICT_ANSI__.</span>
<a name="l00364"></a>00364 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00365"></a>00365 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00366"></a>00366 <span class="preprocessor"></span>
<a name="l00367"></a>00367 <span class="preprocessor">    #endif</span>
<a name="l00368"></a>00368 <span class="preprocessor"></span>
<a name="l00369"></a>00369 <span class="preprocessor">#endif</span>
<a name="l00370"></a>00370 <span class="preprocessor"></span>
<a name="l00371"></a>00371 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 <span class="preprocessor">#if  defined (__GNUC__)</span>
<a name="l00374"></a>00374 <span class="preprocessor"></span>
<a name="l00375"></a>00375 <span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wpragmas&quot;</span>
<a name="l00376"></a>00376 <span class="preprocessor"></span>
<a name="l00377"></a>00377 <span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wall&quot;</span>
<a name="l00378"></a>00378 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Weffc++&quot;</span>
<a name="l00379"></a>00379 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wextra&quot;</span>
<a name="l00380"></a>00380 <span class="preprocessor"></span>
<a name="l00381"></a>00381 <span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Waggressive-loop-optimizations&quot;</span>
<a name="l00382"></a>00382 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Walloc-zero&quot;</span>
<a name="l00383"></a>00383 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Walloca&quot;</span>
<a name="l00384"></a>00384 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Walloca-larger-than=8192&quot;</span>
<a name="l00385"></a>00385 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Warray-bounds&quot;</span>
<a name="l00386"></a>00386 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wcast-align&quot;</span>
<a name="l00387"></a>00387 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wcast-qual&quot;</span>
<a name="l00388"></a>00388 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wchar-subscripts&quot;</span>
<a name="l00389"></a>00389 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wconditionally-supported&quot;</span>
<a name="l00390"></a>00390 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wconversion&quot;</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wctor-dtor-privacy&quot;</span>
<a name="l00392"></a>00392 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wdangling-else&quot;</span>
<a name="l00393"></a>00393 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wduplicated-branches&quot;</span>
<a name="l00394"></a>00394 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wempty-body&quot;</span>
<a name="l00395"></a>00395 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wfloat-equal&quot;</span>
<a name="l00396"></a>00396 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wformat-nonliteral&quot;</span>
<a name="l00397"></a>00397 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wformat-overflow=2&quot;</span>
<a name="l00398"></a>00398 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wformat-security&quot;</span>
<a name="l00399"></a>00399 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wformat-signedness&quot;</span>
<a name="l00400"></a>00400 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wformat-truncation=2&quot;</span>
<a name="l00401"></a>00401 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wformat=2&quot;</span>
<a name="l00402"></a>00402 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wlarger-than=8192&quot;</span>
<a name="l00403"></a>00403 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wlogical-op&quot;</span>
<a name="l00404"></a>00404 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wmissing-declarations&quot;</span>
<a name="l00405"></a>00405 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wnarrowing&quot;</span>
<a name="l00406"></a>00406 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wnon-virtual-dtor&quot;</span>
<a name="l00407"></a>00407 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wnonnull&quot;</span>
<a name="l00408"></a>00408 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wopenmp-simd&quot;</span>
<a name="l00409"></a>00409 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Woverloaded-virtual&quot;</span>
<a name="l00410"></a>00410 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wpacked&quot;</span>
<a name="l00411"></a>00411 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wpointer-arith&quot;</span>
<a name="l00412"></a>00412 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wredundant-decls&quot;</span>
<a name="l00413"></a>00413 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wrestrict&quot;</span>
<a name="l00414"></a>00414 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wshadow&quot;</span>
<a name="l00415"></a>00415 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wsign-promo&quot;</span>
<a name="l00416"></a>00416 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wstack-usage=8192&quot;</span>
<a name="l00417"></a>00417 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wstrict-aliasing&quot;</span>
<a name="l00418"></a>00418 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wstrict-null-sentinel&quot;</span>
<a name="l00419"></a>00419 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wstrict-overflow=2&quot;</span>
<a name="l00420"></a>00420 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wstringop-overflow=4&quot;</span>
<a name="l00421"></a>00421 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wsuggest-attribute=noreturn&quot;</span>
<a name="l00422"></a>00422 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wsuggest-final-methods&quot;</span>
<a name="l00423"></a>00423 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wsuggest-final-types&quot;</span>
<a name="l00424"></a>00424 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wsuggest-override&quot;</span>
<a name="l00425"></a>00425 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wswitch-default&quot;</span>
<a name="l00426"></a>00426 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wswitch-enum&quot;</span>
<a name="l00427"></a>00427 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wsync-nand&quot;</span>
<a name="l00428"></a>00428 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wundef&quot;</span>
<a name="l00429"></a>00429 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wunused&quot;</span>
<a name="l00430"></a>00430 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wvarargs&quot;</span>
<a name="l00431"></a>00431 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wvariadic-macros&quot;</span>
<a name="l00432"></a>00432 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wvla-larger-than=8192&quot;</span>
<a name="l00433"></a>00433 <span class="preprocessor"></span>
<a name="l00434"></a>00434 <span class="preprocessor">    #pragma GCC diagnostic error       &quot;-Wsizeof-array-argument&quot;</span>
<a name="l00435"></a>00435 <span class="preprocessor"></span>
<a name="l00436"></a>00436 <span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Winline&quot;</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wliteral-suffix&quot;</span>
<a name="l00438"></a>00438 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wmissing-field-initializers&quot;</span>
<a name="l00439"></a>00439 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wnonnull-compare&quot;</span>
<a name="l00440"></a>00440 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wold-style-cast&quot;</span>
<a name="l00441"></a>00441 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wunreachable-code&quot;</span>
<a name="l00442"></a>00442 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wunused-const-variable&quot;</span>
<a name="l00443"></a>00443 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wunused-function&quot;</span>
<a name="l00444"></a>00444 <span class="preprocessor"></span>
<a name="l00445"></a>00445 <span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wpragmas&quot;</span>
<a name="l00446"></a>00446 <span class="preprocessor"></span>
<a name="l00447"></a>00447     <span class="comment">//{ These warning settings for TXLib.h only and will be re-enabled at end of file:</span>
<a name="l00448"></a>00448 
<a name="l00449"></a>00449 <span class="preprocessor">    #pragma GCC push_options</span>
<a name="l00450"></a>00450 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic push</span>
<a name="l00451"></a>00451 <span class="preprocessor"></span>
<a name="l00452"></a>00452 <span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wpragmas&quot;</span>
<a name="l00453"></a>00453 <span class="preprocessor"></span>
<a name="l00454"></a>00454 <span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Waddress&quot;</span>
<a name="l00455"></a>00455 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wclobbered&quot;</span>
<a name="l00456"></a>00456 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wdeprecated-declarations&quot;</span>
<a name="l00457"></a>00457 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wfloat-equal&quot;</span>
<a name="l00458"></a>00458 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wformat-nonliteral&quot;</span>
<a name="l00459"></a>00459 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wlarger-than=&quot;</span>
<a name="l00460"></a>00460 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wnon-virtual-dtor&quot;</span>
<a name="l00461"></a>00461 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wredundant-decls&quot;</span>
<a name="l00462"></a>00462 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wshadow&quot;</span>
<a name="l00463"></a>00463 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wsign-conversion&quot;</span>
<a name="l00464"></a>00464 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wstrict-aliasing&quot;</span>
<a name="l00465"></a>00465 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wunused-label&quot;    // Just for fun in _txCanvas_OnCmdAbout()</span>
<a name="l00466"></a>00466 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wunused-value&quot;</span>
<a name="l00467"></a>00467 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wformat-zero-length&quot;</span>
<a name="l00468"></a>00468 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wpacked-not-aligned&quot;</span>
<a name="l00469"></a>00469 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC optimize               &quot;no-strict-aliasing&quot;</span>
<a name="l00470"></a>00470 <span class="preprocessor"></span>
<a name="l00471"></a>00471 <span class="preprocessor">    #if (__cplusplus &lt; 201402L)</span>
<a name="l00472"></a>00472 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored     &quot;-Wsuggest-override&quot;</span>
<a name="l00473"></a>00473 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00474"></a>00474 <span class="preprocessor"></span>
<a name="l00475"></a>00475 <span class="preprocessor">    #pragma GCC diagnostic warning     &quot;-Wpragmas&quot;</span>
<a name="l00476"></a>00476 <span class="preprocessor"></span>
<a name="l00477"></a>00477 <span class="preprocessor">    #if defined (__CYGWIN__) &amp;&amp; !defined (_TX_TESTING)</span>
<a name="l00478"></a>00478 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC system_header                    // This is not a fair play, but this is the only way to deal with Cygwin :(</span>
<a name="l00479"></a>00479 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00480"></a>00480 <span class="preprocessor"></span>
<a name="l00481"></a>00481     <span class="comment">//}</span>
<a name="l00482"></a>00482 
<a name="l00483"></a>00483 <span class="preprocessor">    #define _tx_thread                 __thread</span>
<a name="l00484"></a>00484 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_decltype(value)        __decltype (value)</span>
<a name="l00485"></a>00485 <span class="preprocessor"></span>
<a name="l00486"></a>00486 <span class="preprocessor">    #ifndef     MINGW_HAS_SECURE_API</span>
<a name="l00487"></a>00487 <span class="preprocessor"></span><span class="preprocessor">        #define MINGW_HAS_SECURE_API   1</span>
<a name="l00488"></a>00488 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00489"></a>00489 <span class="preprocessor"></span>
<a name="l00490"></a>00490 <span class="preprocessor">    #if defined (TX_USE_SFML)</span>
<a name="l00491"></a>00491 <span class="preprocessor"></span><span class="preprocessor">        #define _GLIBCXX_NDEBUG</span>
<a name="l00492"></a>00492 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00493"></a>00493 <span class="preprocessor"></span>
<a name="l00494"></a>00494 <span class="preprocessor">    #ifndef     _GLIBCXX_NDEBUG                  // TXLib enables _GLIBCXX_DEBUG by default. When using third-party libraries</span>
<a name="l00495"></a>00495 <span class="preprocessor"></span><span class="preprocessor">        #define _GLIBCXX_DEBUG                   // compiled without _GLIBCXX_DEBUG (SFML, for example), #define _GLIBCXX_NDEBUG</span>
<a name="l00496"></a>00496 <span class="preprocessor"></span><span class="preprocessor">        #define _GLIBCXX_DEBUG_PEDANTIC          // *before* including TXLib.h.</span>
<a name="l00497"></a>00497 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00498"></a>00498 <span class="preprocessor"></span>
<a name="l00499"></a>00499 <span class="preprocessor">    #if defined (_WIN64)                         // removed in x86 because printf (&quot;%lg&quot;, double) failure, this prints 0 always</span>
<a name="l00500"></a>00500 <span class="preprocessor"></span><span class="preprocessor">    #ifndef     __USE_MINGW_ANSI_STDIO</span>
<a name="l00501"></a>00501 <span class="preprocessor"></span><span class="preprocessor">        #define __USE_MINGW_ANSI_STDIO 1</span>
<a name="l00502"></a>00502 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00503"></a>00503 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00504"></a>00504 <span class="preprocessor"></span>
<a name="l00505"></a>00505     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00506"></a>00506     <span class="keyword">inline</span> T _txNOP (T value)          { <span class="keywordflow">return</span> value; }   <span class="comment">// To suppress performance warnings in assert etc.</span>
<a name="l00507"></a>00507 
<a name="l00508"></a>00508     <span class="comment">// From MinGW\include\float.h which is replaced by MinGW\lib\gcc\i686-pc-mingw32\x.x.x\include\float.h</span>
<a name="l00509"></a>00509     <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> __declspec (dllimport)  unsigned __cdecl _controlfp (<span class="keywordtype">unsigned</span> control, <span class="keywordtype">unsigned</span> mask);
<a name="l00510"></a>00510     extern &quot;C&quot;                         <span class="keywordtype">void</span>     __cdecl _fpreset   ();
<a name="l00511"></a>00511 
<a name="l00512"></a>00512 <span class="preprocessor">#else</span>
<a name="l00513"></a>00513 <span class="preprocessor"></span>
<a name="l00514"></a>00514 <span class="preprocessor">    #define     __attribute__( attr )</span>
<a name="l00515"></a>00515 <span class="preprocessor"></span><span class="preprocessor">    #define     _txNOP( value )        ( value )</span>
<a name="l00516"></a>00516 <span class="preprocessor"></span>
<a name="l00517"></a>00517 <span class="preprocessor">#endif</span>
<a name="l00518"></a>00518 <span class="preprocessor"></span>
<a name="l00519"></a>00519 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00520"></a>00520 
<a name="l00521"></a>00521 <span class="preprocessor">#if  defined (__clang__) || defined (__clang_major__)</span>
<a name="l00522"></a>00522 <span class="preprocessor"></span>
<a name="l00523"></a>00523 <span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wunknown-pragmas&quot;</span>
<a name="l00524"></a>00524 <span class="preprocessor"></span>
<a name="l00525"></a>00525 <span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wall&quot;</span>
<a name="l00526"></a>00526 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Weffc++&quot;</span>
<a name="l00527"></a>00527 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wextra&quot;</span>
<a name="l00528"></a>00528 <span class="preprocessor"></span>
<a name="l00529"></a>00529 <span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wcast-qual&quot;</span>
<a name="l00530"></a>00530 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wchar-subscripts&quot;</span>
<a name="l00531"></a>00531 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wconversion&quot;</span>
<a name="l00532"></a>00532 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wctor-dtor-privacy&quot;</span>
<a name="l00533"></a>00533 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wempty-body&quot;</span>
<a name="l00534"></a>00534 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wfloat-equal&quot;</span>
<a name="l00535"></a>00535 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wformat&quot;</span>
<a name="l00536"></a>00536 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wformat-nonliteral&quot;</span>
<a name="l00537"></a>00537 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wformat-security&quot;</span>
<a name="l00538"></a>00538 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wmissing-declarations&quot;</span>
<a name="l00539"></a>00539 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wnon-virtual-dtor&quot;</span>
<a name="l00540"></a>00540 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Woverloaded-virtual&quot;</span>
<a name="l00541"></a>00541 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wpacked&quot;</span>
<a name="l00542"></a>00542 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wpointer-arith&quot;</span>
<a name="l00543"></a>00543 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wredundant-decls&quot;</span>
<a name="l00544"></a>00544 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wshadow&quot;</span>
<a name="l00545"></a>00545 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wsign-promo&quot;</span>
<a name="l00546"></a>00546 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wstrict-aliasing&quot;</span>
<a name="l00547"></a>00547 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wstrict-overflow&quot;</span>
<a name="l00548"></a>00548 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wswitch-default&quot;</span>
<a name="l00549"></a>00549 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wswitch-enum&quot;</span>
<a name="l00550"></a>00550 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wunused&quot;</span>
<a name="l00551"></a>00551 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wvariadic-macros&quot;</span>
<a name="l00552"></a>00552 <span class="preprocessor"></span>
<a name="l00553"></a>00553 <span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Winvalid-source-encoding&quot;</span>
<a name="l00554"></a>00554 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wunused-const-variable&quot;</span>
<a name="l00555"></a>00555 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wunused-variable&quot;</span>
<a name="l00556"></a>00556 <span class="preprocessor"></span>
<a name="l00557"></a>00557 <span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wunknown-pragmas&quot;</span>
<a name="l00558"></a>00558 <span class="preprocessor"></span>
<a name="l00559"></a>00559     <span class="comment">//{ These warning settings for TXLib.h only and will be re-enabled at end of file:</span>
<a name="l00560"></a>00560 
<a name="l00561"></a>00561 <span class="preprocessor">    #pragma clang diagnostic push</span>
<a name="l00562"></a>00562 <span class="preprocessor"></span>
<a name="l00563"></a>00563 <span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wunknown-pragmas&quot;</span>
<a name="l00564"></a>00564 <span class="preprocessor"></span>
<a name="l00565"></a>00565 <span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wcast-align&quot;</span>
<a name="l00566"></a>00566 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wfloat-conversion&quot;</span>
<a name="l00567"></a>00567 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wmissing-braces&quot;</span>
<a name="l00568"></a>00568 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wmissing-field-initializers&quot;</span>
<a name="l00569"></a>00569 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wsign-compare&quot;</span>
<a name="l00570"></a>00570 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wsign-conversion&quot;</span>
<a name="l00571"></a>00571 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wstring-plus-int&quot;</span>
<a name="l00572"></a>00572 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wundef&quot;</span>
<a name="l00573"></a>00573 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wunused-function&quot;</span>
<a name="l00574"></a>00574 <span class="preprocessor"></span><span class="preprocessor">    #pragma clang diagnostic ignored   &quot;-Wunused-value&quot;</span>
<a name="l00575"></a>00575 <span class="preprocessor"></span>
<a name="l00576"></a>00576 <span class="preprocessor">    #pragma clang diagnostic warning   &quot;-Wunknown-pragmas&quot;</span>
<a name="l00577"></a>00577 <span class="preprocessor"></span>
<a name="l00578"></a>00578     <span class="comment">//{ CLang-Tidy options</span>
<a name="l00579"></a>00579     <span class="comment">//</span>
<a name="l00580"></a>00580     <span class="comment">// *,-cert-dcl50-cpp,-cert-dcl58-cpp,-cert-err52-cpp,-cert-err58-cpp,-cert-flp30-c,-cert-msc30-c,-cert-msc32-c,</span>
<a name="l00581"></a>00581     <span class="comment">// -cert-msc50-cpp,-cert-msc51-cpp,-clang-analyzer-core.DivideZero,-cppcoreguidelines-avoid-c-arrays,</span>
<a name="l00582"></a>00582     <span class="comment">// -cppcoreguidelines-avoid-goto,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-macro-usage,</span>
<a name="l00583"></a>00583     <span class="comment">// -cppcoreguidelines-owning-memory,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-no-malloc,</span>
<a name="l00584"></a>00584     <span class="comment">// -cppcoreguidelines-pro-bounds-constant-array-index,-cppcoreguidelines-pro-bounds-pointer-arithmetic,</span>
<a name="l00585"></a>00585     <span class="comment">// -cppcoreguidelines-pro-type-const-cast,-cppcoreguidelines-pro-type-cstyle-cast,-cppcoreguidelines-pro-type-union-access,</span>
<a name="l00586"></a>00586     <span class="comment">// -cppcoreguidelines-pro-type-vararg,-fuchsia-default-arguments-calls,-fuchsia-default-arguments-declarations,</span>
<a name="l00587"></a>00587     <span class="comment">// -fuchsia-overloaded-operator,-google-build-using-namespace,-google-global-names-in-headers,-google-runtime-int,</span>
<a name="l00588"></a>00588     <span class="comment">// -google-readability-braces-around-statements,-google-readability-casting,-google-readability-namespace-comments,</span>
<a name="l00589"></a>00589     <span class="comment">// -hicpp-avoid-c-arrays,-hicpp-avoid-goto,-hicpp-braces-around-statements,-hicpp-deprecated-headers,-hicpp-no-array-decay,</span>
<a name="l00590"></a>00590     <span class="comment">// -hicpp-signed-bitwise,-hicpp-use-equals-delete,-hicpp-use-nullptr,-hicpp-vararg,-llvm-include-order,-hicpp-no-malloc,</span>
<a name="l00591"></a>00591     <span class="comment">// -llvm-namespace-comment,-misc-non-private-member-variables-in-classes,-modernize-avoid-c-arrays,-modernize-use-auto,</span>
<a name="l00592"></a>00592     <span class="comment">// -modernize-deprecated-headers,-modernize-raw-string-literal,-modernize-use-default-member-init,-hicpp-use-auto,</span>
<a name="l00593"></a>00593     <span class="comment">// -modernize-use-equals-delete,-modernize-use-nullptr,-modernize-use-trailing-return-type,-modernize-use-using,</span>
<a name="l00594"></a>00594     <span class="comment">// -readability-braces-around-statements,-readability-else-after-return,-readability-implicit-bool-conversion,</span>
<a name="l00595"></a>00595     <span class="comment">// -readability-isolate-declaration,-readability-magic-numbers,-readability-named-parameter,-modernize-loop-convert</span>
<a name="l00596"></a>00596     <span class="comment">//}</span>
<a name="l00597"></a>00597 
<a name="l00598"></a>00598     <span class="comment">//}</span>
<a name="l00599"></a>00599 
<a name="l00600"></a>00600 <span class="preprocessor">#endif</span>
<a name="l00601"></a>00601 <span class="preprocessor"></span>
<a name="l00602"></a>00602 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00603"></a>00603 
<a name="l00604"></a>00604 <span class="preprocessor">#if  defined (_MSC_VER)</span>
<a name="l00605"></a>00605 <span class="preprocessor"></span>
<a name="l00606"></a>00606 <span class="preprocessor">    #pragma warning (push, 4)                    // Set maximum warning level. This &#39;push&#39; is to set the level only. It will NOT be popped.</span>
<a name="l00607"></a>00607 <span class="preprocessor"></span>
<a name="l00608"></a>00608 <span class="preprocessor">    #pragma warning (disable:    4616)           // #pragma warning: warning number &#39;n&#39; not a valid compiler warning</span>
<a name="l00609"></a>00609 <span class="preprocessor"></span>
<a name="l00610"></a>00610 <span class="preprocessor">    #pragma warning (disable:    4514)           // Unreferenced inline function has been removed</span>
<a name="l00611"></a>00611 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4710)           // Function not inlined</span>
<a name="l00612"></a>00612 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4786)           // Identifier was truncated to &#39;255&#39; characters in the debug information</span>
<a name="l00613"></a>00613 <span class="preprocessor"></span>
<a name="l00614"></a>00614 <span class="preprocessor">    #pragma warning (error:      4715)           // Not all control paths return a value</span>
<a name="l00615"></a>00615 <span class="preprocessor"></span>
<a name="l00616"></a>00616 <span class="preprocessor">    #pragma warning (default:    4616)           // #pragma warning: warning number &#39;n&#39; not a valid compiler warning</span>
<a name="l00617"></a>00617 <span class="preprocessor"></span>
<a name="l00618"></a>00618     <span class="comment">// These warning settings for TXLib.h only and will be re-enabled at end of file:</span>
<a name="l00619"></a>00619 
<a name="l00620"></a>00620 <span class="preprocessor">    #pragma warning (push)</span>
<a name="l00621"></a>00621 <span class="preprocessor"></span>
<a name="l00622"></a>00622 <span class="preprocessor">    #pragma warning (disable:    4616)           // #pragma warning: warning number &#39;n&#39; not a valid compiler warning</span>
<a name="l00623"></a>00623 <span class="preprocessor"></span>
<a name="l00624"></a>00624 <span class="preprocessor">    #pragma warning (disable:    4091)           // &#39;typedef&#39;: ignored on left of &#39;...&#39; when no variable is declared</span>
<a name="l00625"></a>00625 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4124)           // Using __fastcall with stack checking is ineffective</span>
<a name="l00626"></a>00626 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4127)           // Conditional expression is constant</span>
<a name="l00627"></a>00627 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4200)           // Nonstandard extension used: zero-sized array in struct/union</span>
<a name="l00628"></a>00628 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4201)           // Nonstandard extension used: nameless struct/union</span>
<a name="l00629"></a>00629 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4351)           // New behavior: elements of array will be default initialized</span>
<a name="l00630"></a>00630 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4480)           // Nonstandard extension used: specifying underlying type for enum &#39;type&#39;</span>
<a name="l00631"></a>00631 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4481)           // Nonstandard extension used: override specifier &#39;override&#39;</span>
<a name="l00632"></a>00632 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4555)           // Result of expression not used</span>
<a name="l00633"></a>00633 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    4611)           // Interaction between &#39;_setjmp&#39; and C++ object destruction is non-portable</span>
<a name="l00634"></a>00634 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    5045)           // Compiler will insert Spectre mitigation for memory load if /Qspectre switch specified</span>
<a name="l00635"></a>00635 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    6269)           // Possibly incorrect order of operations: dereference ignored</span>
<a name="l00636"></a>00636 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    6285)           // (&lt;non-zero constant&gt;) || (&lt;non-zero constant&gt;) is always a non-zero constant. Did you intend to use bitwize-and operator?</span>
<a name="l00637"></a>00637 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    6319)           // Use of the comma-operator in a tested expression causes the left argument to be ignored when it has no side-effects</span>
<a name="l00638"></a>00638 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    6326)           // Potential comparison of a constant with another constant</span>
<a name="l00639"></a>00639 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26135)           // Missing locking annotation</span>
<a name="l00640"></a>00640 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26400)           // Do not assign the result of an allocation or a function call with an owner&lt;T&gt; return value to a raw pointer, use owner&lt;T&gt; instead (i.11).</span>
<a name="l00641"></a>00641 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26401)           // Do not delete a raw pointer that is not an owner&lt;T&gt; (i.11).</span>
<a name="l00642"></a>00642 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26403)           // Reset or explicitly delete an owner&lt;T&gt; pointer &#39;name&#39; (r.3).</span>
<a name="l00643"></a>00643 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26408)           // Avoid malloc() and free(), prefer the nothrow version of new with delete (r.10).</span>
<a name="l00644"></a>00644 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26409)           // Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</span>
<a name="l00645"></a>00645 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26426)           // Global initializer calls a non-constexpr function &#39;name&#39; (i.22).</span>
<a name="l00646"></a>00646 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26429)           // Symbol &#39;name&#39; is never tested for nullness, it can be marked as not_null (f.23).</span>
<a name="l00647"></a>00647 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26430)           // Symbol &#39;name&#39; is not tested for nullness on all paths (f.23).</span>
<a name="l00648"></a>00648 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26432)           // If you define or delete any default operation in the type &#39;struct &#39;name&#39;&#39;, define or delete them all (c.21).</span>
<a name="l00649"></a>00649 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26435)           // Function &#39;name&#39; should specify exactly one of &#39;virtual&#39;, &#39;override&#39;, or &#39;final&#39; (c.128).</span>
<a name="l00650"></a>00650 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26438)           // Avoid &#39;goto&#39; (es.76).</span>
<a name="l00651"></a>00651 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26440)           // Function &#39;name&#39; can be declared &#39;noexcept&#39; (f.6).</span>
<a name="l00652"></a>00652 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26446)           // Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</span>
<a name="l00653"></a>00653 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26447)           // The function is declared &#39;noexcept&#39; but calls function &#39;func&#39; which may throw exceptions (f.6).</span>
<a name="l00654"></a>00654 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26448)           // Consider using gsl::finally if final action is intended (gsl.util).</span>
<a name="l00655"></a>00655 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26451)           // Arithmetic overflow: Using operator &#39;op&#39; on a n-byte value and then casting the result to a m-byte value. Cast the value to the wider type before calling operator &#39;op&#39; to avoid overflow (io.2).</span>
<a name="l00656"></a>00656 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26455)           // Default constructor may not throw. Declare it &#39;noexcept&#39; (f.6).</span>
<a name="l00657"></a>00657 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26460)           // The reference argument &#39;stream&#39; for function &#39;name&#39; can be marked as const (con.3).</span>
<a name="l00658"></a>00658 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26461)           // The pointer argument &#39;name&#39; for function &#39;name&#39; can be marked as a pointer to const (con.3).</span>
<a name="l00659"></a>00659 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26462)           // The value pointed to by &#39;name&#39; is assigned only once, mark it as a pointer to const (con.4).</span>
<a name="l00660"></a>00660 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26475)           // Do not use function style C-casts (es.49).</span>
<a name="l00661"></a>00661 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26477)           // Use &#39;nullptr&#39; rather than 0 or NULL (es.47).</span>
<a name="l00662"></a>00662 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26481)           // Don&#39;t use pointer arithmetic. Use span instead (bounds.1).</span>
<a name="l00663"></a>00663 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26482)           // Only index into arrays using constant expressions (bounds.2).</span>
<a name="l00664"></a>00664 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26483)           // Value &#39;value&#39; is outside the bounds (min, max) of variable &#39;name&#39;. Only index into arrays using constant expressions that are within bounds of the array (bounds.2).</span>
<a name="l00665"></a>00665 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26485)           // Expression &#39;expr&#39;: No array to pointer decay (bounds.3).</span>
<a name="l00666"></a>00666 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26486)           // Don&#39;t pass a pointer that may be invalid to a function. Parameter &#39;n&#39; &#39;name&#39; in call to &#39;name&#39; may be invalid (lifetime.3).</span>
<a name="l00667"></a>00667 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26487)           // Don&#39;t return a pointer &#39;name&#39; that may be invalid (lifetime.4).</span>
<a name="l00668"></a>00668 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26488)           // Do not dereference a potentially null pointer: &#39;name&#39;. &#39;name&#39; was null at line &#39;n&#39; (lifetime.1).</span>
<a name="l00669"></a>00669 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26489)           // Don&#39;t dereference a pointer that may be invalid: &#39;name&#39;. &#39;name&#39; may have been invalidated at line &#39;n&#39; (lifetime.1).</span>
<a name="l00670"></a>00670 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26490)           // Don&#39;t use reinterpret_cast (type.1).</span>
<a name="l00671"></a>00671 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26492)           // Don&#39;t use const_cast to cast away const or volatile (type.3).</span>
<a name="l00672"></a>00672 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26493)           // Don&#39;t use C-style casts (type.4).</span>
<a name="l00673"></a>00673 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26496)           // The variable &#39;name&#39; is assigned only once, mark it as const (con.4).</span>
<a name="l00674"></a>00674 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26497)           // The function &#39;name&#39; could be marked constexpr if compile-time evaluation is desired (f.4).</span>
<a name="l00675"></a>00675 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26812)           // The enum type &#39;type&#39; is unscoped. Prefer &#39;enum class&#39; over &#39;enum&#39; (Enum.3).</span>
<a name="l00676"></a>00676 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   26814)           // The const variable &#39;name&#39; can be computed at compile-time. Consider using constexpr (con.5).</span>
<a name="l00677"></a>00677 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   28125)           // The function must be called from within a try/except block</span>
<a name="l00678"></a>00678 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   28159)           // Consider using another function instead</span>
<a name="l00679"></a>00679 <span class="preprocessor"></span>
<a name="l00680"></a>00680 <span class="preprocessor">    #pragma warning (default:    4616)           // #pragma warning: warning number &#39;n&#39; not a valid compiler warning</span>
<a name="l00681"></a>00681 <span class="preprocessor"></span>
<a name="l00682"></a>00682 <span class="preprocessor">    #define _tx_thread          __declspec (thread)</span>
<a name="l00683"></a>00683 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_decltype(value)   decltype (value)</span>
<a name="l00684"></a>00684 <span class="preprocessor"></span>
<a name="l00685"></a>00685 <span class="preprocessor">    #if !defined (_CLANG_VER)</span>
<a name="l00686"></a>00686 <span class="preprocessor"></span>
<a name="l00687"></a>00687 <span class="preprocessor">    #pragma setlocale           (&quot;russian&quot;)      // Set source file encoding, see also _TX_CODEPAGE</span>
<a name="l00688"></a>00688 <span class="preprocessor"></span>
<a name="l00689"></a>00689 <span class="preprocessor">    #if !defined (NDEBUG)</span>
<a name="l00690"></a>00690 <span class="preprocessor"></span><span class="preprocessor">        #pragma check_stack     (      on)       // Turn on stack probes at runtime</span>
<a name="l00691"></a>00691 <span class="preprocessor"></span><span class="preprocessor">        #pragma strict_gs_check (push, on)       // Detects stack buffer overruns</span>
<a name="l00692"></a>00692 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00693"></a>00693 <span class="preprocessor"></span>
<a name="l00694"></a>00694 <span class="preprocessor">    #endif</span>
<a name="l00695"></a>00695 <span class="preprocessor"></span>
<a name="l00696"></a>00696 <span class="preprocessor">    #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES  1</span>
<a name="l00697"></a>00697 <span class="preprocessor"></span>
<a name="l00698"></a>00698 <span class="preprocessor">#endif</span>
<a name="l00699"></a>00699 <span class="preprocessor"></span>
<a name="l00700"></a>00700 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00701"></a>00701 
<a name="l00702"></a>00702 <span class="preprocessor">#if  defined (__INTEL_COMPILER)</span>
<a name="l00703"></a>00703 <span class="preprocessor"></span>
<a name="l00704"></a>00704 <span class="preprocessor">    #pragma warning (disable:    174)            // Remark: expression has no effect</span>
<a name="l00705"></a>00705 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    304)            // Remark: access control not specified (&quot;public&quot; by default)</span>
<a name="l00706"></a>00706 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    444)            // Remark: destructor for base class &quot;...&quot; is not virtual</span>
<a name="l00707"></a>00707 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    522)            // Remark: function &quot;...&quot; redeclared &quot;inline&quot; after being called</span>
<a name="l00708"></a>00708 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:    981)            // Remark: operands are evaluated in unspecified order</span>
<a name="l00709"></a>00709 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:   1684)            // Conversion from pointer to same-sized integral type (potential portability problem)</span>
<a name="l00710"></a>00710 <span class="preprocessor"></span>
<a name="l00711"></a>00711 <span class="preprocessor">#endif</span>
<a name="l00712"></a>00712 <span class="preprocessor"></span>
<a name="l00713"></a>00713 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00714"></a>00714 
<a name="l00715"></a>00715 <span class="preprocessor">#if (defined (_GCC_VER) &amp;&amp; (_GCC_VER &lt;  472)  || \</span>
<a name="l00716"></a>00716 <span class="preprocessor">     defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1600)) // Minimum requirements are now GCC 4.7.2 or MSVC 10.0 (2010)</span>
<a name="l00717"></a>00717 <span class="preprocessor"></span>
<a name="l00718"></a>00718 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00719"></a>00719 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00720"></a>00720 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00721"></a>00721 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00722"></a>00722 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: This version will NOT work with GCC &lt; 4.7.2 or MS Visual Studio &lt; 2010, sorry.</span>
<a name="l00723"></a>00723 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00724"></a>00724 <span class="preprocessor"></span><span class="preprocessor">    #error Please use TXLib.h previous stable version/revision OR upgrade your compiler.</span>
<a name="l00725"></a>00725 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00726"></a>00726 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00727"></a>00727 <span class="preprocessor"></span>
<a name="l00728"></a>00728 <span class="preprocessor">#endif</span>
<a name="l00729"></a>00729 <span class="preprocessor"></span>
<a name="l00730"></a>00730 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00731"></a>00731 
<a name="l00732"></a>00732 <span class="preprocessor">#if defined (_GCC_VER) &amp;&amp; (_GCC_VER &gt;= 492)</span>
<a name="l00733"></a>00733 <span class="preprocessor"></span><span class="preprocessor">#if defined (TX_USE_SPEAK) &amp;&amp; !__has_include (&lt;SAPI.h&gt;)</span>
<a name="l00734"></a>00734 <span class="preprocessor"></span>
<a name="l00735"></a>00735 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00736"></a>00736 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00737"></a>00737 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00738"></a>00738 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00739"></a>00739 <span class="preprocessor"></span><span class="preprocessor">    #error You have defined TX_USE_SPEAK, but your compiler do NOT have the library &lt;SAPI.h&gt;.</span>
<a name="l00740"></a>00740 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00741"></a>00741 <span class="preprocessor"></span><span class="preprocessor">    #error Please use compiler library set with SAPI.h included. SAPI is Microsoft Speech API</span>
<a name="l00742"></a>00742 <span class="preprocessor"></span><span class="preprocessor">    #error nesessary for txSpeak() to work.</span>
<a name="l00743"></a>00743 <span class="preprocessor"></span><span class="preprocessor">    #error ---------------------------------------------------------------------------------------</span>
<a name="l00744"></a>00744 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00745"></a>00745 <span class="preprocessor"></span>
<a name="l00746"></a>00746 <span class="preprocessor">#endif</span>
<a name="l00747"></a>00747 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00748"></a>00748 <span class="preprocessor"></span>
<a name="l00749"></a>00749 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00750"></a>00750 
<a name="l00751"></a>00751 <span class="preprocessor">#if !defined (WINVER)</span>
<a name="l00752"></a>00752 <span class="preprocessor"></span><span class="preprocessor">    #define   WINVER                   0x0500    // Defaults to Windows 2000</span>
<a name="l00753"></a>00753 <span class="preprocessor"></span><span class="preprocessor">    #define   WINDOWS_ENABLE_CPLUSPLUS           // Allow use of type-limit macros in &lt;basetsd.h&gt;,</span>
<a name="l00754"></a>00754 <span class="preprocessor"></span><span class="preprocessor">#endif                                           //   they are allowed by default if WINVER &gt;= 0x0600.</span>
<a name="l00755"></a>00755 <span class="preprocessor"></span>
<a name="l00756"></a>00756 <span class="preprocessor">#if !defined (_WIN32_WINNT)</span>
<a name="l00757"></a>00757 <span class="preprocessor"></span><span class="preprocessor">    #define   _WIN32_WINNT             WINVER    // Defaults to the same as WINVER</span>
<a name="l00758"></a>00758 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00759"></a>00759 <span class="preprocessor"></span>
<a name="l00760"></a>00760 <span class="preprocessor">#if !defined (_WIN32_IE)</span>
<a name="l00761"></a>00761 <span class="preprocessor"></span><span class="preprocessor">    #define   _WIN32_IE                WINVER    // Defaults to the same as WINVER</span>
<a name="l00762"></a>00762 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00763"></a>00763 <span class="preprocessor"></span>
<a name="l00764"></a>00764 <span class="preprocessor">#define stristr(  str1, str2 )         Win32::StrStrIA ((str1), (str2))</span>
<a name="l00765"></a>00765 <span class="preprocessor"></span><span class="preprocessor">#define stristrw( str1, str2 )         Win32::StrStrIW ((str1), (str2))</span>
<a name="l00766"></a>00766 <span class="preprocessor"></span>
<a name="l00767"></a>00767 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00768"></a>00768 
<a name="l00769"></a>00769 <span class="preprocessor">#define _USE_MATH_DEFINES              1         // Math.h&#39;s M_PI etc.</span>
<a name="l00770"></a>00770 <span class="preprocessor"></span><span class="preprocessor">#define __STDC_FORMAT_MACROS           1         // PRIu64 and other PR... macros</span>
<a name="l00771"></a>00771 <span class="preprocessor"></span><span class="preprocessor">#define __STDC_WANT_LIB_EXT1__         1         // String and output *_s functions</span>
<a name="l00772"></a>00772 <span class="preprocessor"></span>
<a name="l00773"></a>00773 <span class="preprocessor">#define _LIBCPP_ENABLE_CXX17_REMOVED_UNEXPECTED_FUNCTIONS  // Wow, how long. Kudos, Clang</span>
<a name="l00774"></a>00774 <span class="preprocessor"></span>
<a name="l00775"></a>00775 <span class="preprocessor">#define _ALLOW_RTCc_IN_STL             1         // MSVC C2338: /RTCc rejects conformant code, so it isn&#39;t supported by libc.</span>
<a name="l00776"></a>00776 <span class="preprocessor"></span>
<a name="l00777"></a>00777 <span class="preprocessor">#define NOMINMAX                       1         // Preventing &#39;min&#39; and &#39;max&#39; defines in Windows.h</span>
<a name="l00778"></a>00778 <span class="preprocessor"></span>
<a name="l00779"></a>00779 <span class="preprocessor">#if defined (_DEBUG)</span>
<a name="l00780"></a>00780 <span class="preprocessor"></span><span class="preprocessor">#define _SECURE_SCL                    1         // Enable checked STL iterators to throw an exception on incorrect use</span>
<a name="l00781"></a>00781 <span class="preprocessor"></span><span class="preprocessor">#define _HAS_ITERATOR_DEBUGGING        1</span>
<a name="l00782"></a>00782 <span class="preprocessor"></span><span class="preprocessor">#define _LIBCPP_DEBUG                  1</span>
<a name="l00783"></a>00783 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00784"></a>00784 <span class="preprocessor"></span>
<a name="l00785"></a>00785 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; defined (_DEBUG)</span>
<a name="l00786"></a>00786 <span class="preprocessor"></span>
<a name="l00787"></a>00787 <span class="preprocessor">    #define _CRTDBG_MAP_ALLOC                    // Enable MSVCRT debug heap</span>
<a name="l00788"></a>00788 <span class="preprocessor"></span><span class="preprocessor">    #define _new_dbg                   new (_NORMAL_BLOCK, __FILE__, __LINE__)</span>
<a name="l00789"></a>00789 <span class="preprocessor"></span><span class="preprocessor">    #define NEW                        new (_NORMAL_BLOCK, __FILE__, __LINE__)</span>
<a name="l00790"></a>00790 <span class="preprocessor"></span>
<a name="l00791"></a>00791 <span class="preprocessor">#else</span>
<a name="l00792"></a>00792 <span class="preprocessor"></span><span class="preprocessor">    #define _new_dbg                   new</span>
<a name="l00793"></a>00793 <span class="preprocessor"></span><span class="preprocessor">    #define NEW                        new</span>
<a name="l00794"></a>00794 <span class="preprocessor"></span>
<a name="l00795"></a>00795 <span class="preprocessor">#endif</span>
<a name="l00796"></a>00796 <span class="preprocessor"></span>
<a name="l00797"></a>00797 <span class="preprocessor">#if !( defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1900) ) // MSVC 2015</span>
<a name="l00798"></a>00798 <span class="preprocessor"></span><span class="preprocessor">#define _SECURE_SCL_THROWS             1</span>
<a name="l00799"></a>00799 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00800"></a>00800 <span class="preprocessor"></span>
<a name="l00801"></a>00801 <span class="preprocessor">#if defined (_TX_CPP11)</span>
<a name="l00802"></a>00802 <span class="preprocessor"></span>
<a name="l00803"></a>00803 <span class="preprocessor">    #define _tx_delete                 = delete</span>
<a name="l00804"></a>00804 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_default                = default</span>
<a name="l00805"></a>00805 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_override               override</span>
<a name="l00806"></a>00806 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_final                  final</span>
<a name="l00807"></a>00807 <span class="preprocessor"></span>
<a name="l00808"></a>00808 <span class="preprocessor">#else</span>
<a name="l00809"></a>00809 <span class="preprocessor"></span>
<a name="l00810"></a>00810 <span class="preprocessor">    #define _tx_delete</span>
<a name="l00811"></a>00811 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_default</span>
<a name="l00812"></a>00812 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_override</span>
<a name="l00813"></a>00813 <span class="preprocessor"></span><span class="preprocessor">    #define _tx_final</span>
<a name="l00814"></a>00814 <span class="preprocessor"></span>
<a name="l00815"></a>00815 <span class="preprocessor">#endif</span>
<a name="l00816"></a>00816 <span class="preprocessor"></span>
<a name="l00817"></a>00817 <span class="keyword">namespace </span>std { <span class="keyword">enum</span> nomeow_t { nomeow }; }      <span class="comment">// Vital addition to the C++ standard. TODO: Should contact C++ std committee.</span>
<a name="l00818"></a>00818 
<a name="l00819"></a>00819 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00820"></a>00820 
<a name="l00822"></a>00822 <span class="comment">//}</span>
<a name="l00823"></a>00823 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00824"></a>00824 
<a name="l00825"></a>00825 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00826"></a>00826 <span class="comment">//{          The Includes</span>
<a name="l00827"></a>00827 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00828"></a>00828 
<a name="l00829"></a>00829 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l00830"></a>00830 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (push, 3)                    // MSVC: At level /Wall, some std headers emit warnings... O_o</span>
<a name="l00831"></a>00831 <span class="preprocessor"></span>
<a name="l00832"></a>00832 <span class="preprocessor">    #pragma warning (disable: 4365)              // &#39;argument&#39;: conversion from &#39;long&#39; to &#39;unsigned int&#39;, signed/unsigned mismatch</span>
<a name="l00833"></a>00833 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4005)              // &#39;name&#39;: macro redefinition</span>
<a name="l00834"></a>00834 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00835"></a>00835 <span class="preprocessor"></span>
<a name="l00836"></a>00836 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00837"></a>00837 
<a name="l00838"></a>00838 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00839"></a>00839 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00840"></a>00840 <span class="preprocessor">#include &lt;stdarg.h&gt;</span>
<a name="l00841"></a>00841 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00842"></a>00842 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00843"></a>00843 <span class="preprocessor">#include &lt;io.h&gt;</span>
<a name="l00844"></a>00844 <span class="preprocessor">#include &lt;fcntl.h&gt;</span>
<a name="l00845"></a>00845 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00846"></a>00846 <span class="preprocessor">#include &lt;process.h&gt;</span>
<a name="l00847"></a>00847 <span class="preprocessor">#include &lt;signal.h&gt;</span>
<a name="l00848"></a>00848 <span class="preprocessor">#include &lt;setjmp.h&gt;</span>
<a name="l00849"></a>00849 <span class="preprocessor">#include &lt;locale.h&gt;</span>
<a name="l00850"></a>00850 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00851"></a>00851 <span class="preprocessor">#include &lt;float.h&gt;</span>
<a name="l00852"></a>00852 <span class="preprocessor">#include &lt;limits.h&gt;</span>
<a name="l00853"></a>00853 <span class="preprocessor">#include &lt;stdint.h&gt;</span>
<a name="l00854"></a>00854 
<a name="l00855"></a>00855 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00856"></a>00856 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00857"></a>00857 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00858"></a>00858 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00859"></a>00859 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00860"></a>00860 <span class="preprocessor">#include &lt;iomanip&gt;</span>
<a name="l00861"></a>00861 <span class="preprocessor">#include &lt;numeric&gt;</span>
<a name="l00862"></a>00862 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00863"></a>00863 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00864"></a>00864 <span class="preprocessor">#include &lt;stdexcept&gt;</span>
<a name="l00865"></a>00865 
<a name="l00866"></a>00866 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00867"></a>00867 <span class="preprocessor">#include &lt;windowsx.h&gt;</span>
<a name="l00868"></a>00868 <span class="preprocessor">#include &lt;tlhelp32.h&gt;</span>
<a name="l00869"></a>00869 <span class="preprocessor">#include &lt;shellapi.h&gt;</span>
<a name="l00870"></a>00870 
<a name="l00871"></a>00871 <span class="preprocessor">#if defined (_GCC_VER)</span>
<a name="l00872"></a>00872 <span class="preprocessor"></span>
<a name="l00873"></a>00873 <span class="preprocessor">#include &lt;shlobj.h&gt;</span>
<a name="l00874"></a>00874 
<a name="l00875"></a>00875 <span class="preprocessor">#include &lt;cxxabi.h&gt;</span>
<a name="l00876"></a>00876 <span class="preprocessor">#include &lt;unwind.h&gt;</span>
<a name="l00877"></a>00877 
<a name="l00878"></a>00878 <span class="preprocessor">#endif</span>
<a name="l00879"></a>00879 <span class="preprocessor"></span>
<a name="l00880"></a>00880 <span class="preprocessor">#if defined (__CYGWIN__)</span>
<a name="l00881"></a>00881 <span class="preprocessor"></span>
<a name="l00882"></a>00882 <span class="preprocessor">#include &lt;stdarg.h&gt;</span>
<a name="l00883"></a>00883 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00884"></a>00884 <span class="preprocessor">#include &lt;termios.h&gt;</span>
<a name="l00885"></a>00885 
<a name="l00886"></a>00886 <span class="preprocessor">#else</span>
<a name="l00887"></a>00887 <span class="preprocessor"></span>
<a name="l00888"></a>00888 <span class="preprocessor">#include &lt;conio.h&gt;</span>
<a name="l00889"></a>00889 <span class="preprocessor">#include &lt;direct.h&gt;</span>
<a name="l00890"></a>00890 
<a name="l00891"></a>00891 <span class="preprocessor">#endif</span>
<a name="l00892"></a>00892 <span class="preprocessor"></span>
<a name="l00893"></a>00893 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l00894"></a>00894 <span class="preprocessor"></span>
<a name="l00895"></a>00895 <span class="preprocessor">#include &lt;new.h&gt;</span>
<a name="l00896"></a>00896 
<a name="l00897"></a>00897 <span class="preprocessor">#include &lt;shlobj.h&gt;</span>
<a name="l00898"></a>00898 <span class="preprocessor">#include &lt;ntstatus.h&gt;</span>
<a name="l00899"></a>00899 <span class="preprocessor">#include &lt;crtdbg.h&gt;</span>
<a name="l00900"></a>00900 <span class="preprocessor">#include &lt;rtcapi.h&gt;</span>
<a name="l00901"></a>00901 <span class="preprocessor">#include &lt;dbghelp.h&gt;</span>
<a name="l00902"></a>00902 
<a name="l00903"></a>00903 <span class="preprocessor">#endif</span>
<a name="l00904"></a>00904 <span class="preprocessor"></span>
<a name="l00905"></a>00905 <span class="preprocessor">#if defined (_GCC_VER) || defined (_MSC_VER) &amp;&amp; (_MSC_VER &gt;= 1800)  // MSVC 2013</span>
<a name="l00906"></a>00906 <span class="preprocessor"></span><span class="preprocessor">#include &lt;inttypes.h&gt;</span>
<a name="l00907"></a>00907 <span class="preprocessor">#endif</span>
<a name="l00908"></a>00908 <span class="preprocessor"></span>
<a name="l00909"></a>00909 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00910"></a>00910 
<a name="l00911"></a>00911 <span class="preprocessor">#if defined (TX_USE_SPEAK) //--------------------------------------------------------------------------------------</span>
<a name="l00912"></a>00912 <span class="preprocessor"></span><span class="preprocessor">#include &lt;SAPI.h&gt;</span>          <span class="comment">// &lt;== ЕСЛИ ЗДЕСЬ ОШИБКА, ТО У ВАС НЕТ ФАЙЛА SAPI.h. No SAPI.h file, TXLib isn&#39;t guilty :(</span>
<a name="l00913"></a>00913 <span class="preprocessor">#endif                     //--------------------------------------------------------------------------------------</span>
<a name="l00914"></a>00914 <span class="preprocessor"></span>
<a name="l00915"></a>00915 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00916"></a>00916 <span class="comment">//{          Compiler- and platform-specific</span>
<a name="l00918"></a>00918 <span class="comment"></span><span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00919"></a>00919 
<a name="l00920"></a>00920 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l00921"></a>00921 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (pop)                        // MSVC: Restore max level</span>
<a name="l00922"></a>00922 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00923"></a>00923 <span class="preprocessor"></span>
<a name="l00924"></a>00924 <span class="preprocessor">#if defined (__STRICT_ANSI__UNDEFINED)</span>
<a name="l00925"></a>00925 <span class="preprocessor"></span><span class="preprocessor">    #define  __STRICT_ANSI__                     // Redefine back</span>
<a name="l00926"></a>00926 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00927"></a>00927 <span class="preprocessor"></span>
<a name="l00928"></a>00928 <span class="preprocessor">#if !defined (_TRUNCATE) || defined (__CYGWIN__) || defined (_MEMORY_S_DEFINED)</span>
<a name="l00929"></a>00929 <span class="preprocessor"></span>
<a name="l00930"></a>00930 <span class="preprocessor">    #define  strncpy_s( dest, sizeof_dest, src, count )  ( strncpy ((dest), (src), MIN ((count), (sizeof_dest))) )</span>
<a name="l00931"></a>00931 <span class="preprocessor"></span><span class="preprocessor">    #define  wcsncpy_s( dest, sizeof_dest, src, count )  ( wcsncpy ((dest), (src), MIN ((count), (sizeof_dest))) )</span>
<a name="l00932"></a>00932 <span class="preprocessor"></span><span class="preprocessor">    #define  strncat_s( dest, sizeof_dest, src, count )  ( strncat ((dest), (src), MIN ((count), (sizeof_dest))) )</span>
<a name="l00933"></a>00933 <span class="preprocessor"></span><span class="preprocessor">    #define  strerror_s( buf, sizeof_buf, code        )  ( strncpy ((buf), strerror ((int)(code)), (sizeof_buf)-1) )</span>
<a name="l00934"></a>00934 <span class="preprocessor"></span><span class="preprocessor">    #define  strtok_s(   buf, delim, ctx              )  ( (void)(ctx), strtok ((buf), (delim)) )</span>
<a name="l00935"></a>00935 <span class="preprocessor"></span><span class="preprocessor">    #define  fopen_s(    file, name, mode             )  ( *(file) = fopen ((name), (mode)) )</span>
<a name="l00936"></a>00936 <span class="preprocessor"></span><span class="preprocessor">    #define _strlwr_s(   str, sizeof_str              )  ( _strlwr (str) )</span>
<a name="l00937"></a>00937 <span class="preprocessor"></span>
<a name="l00938"></a>00938 <span class="preprocessor">    #define  ctime_s( buf, sizeof_buf, time    )         ( strncpy ((buf), ctime (time), (sizeof_buf)-1) )</span>
<a name="l00939"></a>00939 <span class="preprocessor"></span><span class="preprocessor">    #define _controlfp_s( oldCtl, newCtl, mask )         ( assert (oldCtl), *(oldCtl) = _controlfp (newCtl, mask), 0 )</span>
<a name="l00940"></a>00940 <span class="preprocessor"></span>
<a name="l00941"></a>00941 <span class="preprocessor">    #define _snprintf_s                                  snprintf</span>
<a name="l00942"></a>00942 <span class="preprocessor"></span><span class="preprocessor">    #define _vsnprintf_s( str, sz, trunc, format, arg )  _vsnprintf (str, sz, format, arg)</span>
<a name="l00943"></a>00943 <span class="preprocessor"></span>
<a name="l00944"></a>00944 <span class="preprocessor">    #define _wsplitpath_s( path, drive, szDrive,     \</span>
<a name="l00945"></a>00945 <span class="preprocessor">                           dir, szDir, name, szName, \</span>
<a name="l00946"></a>00946 <span class="preprocessor">                           ext, szExt )                  _wsplitpath ( path, drive, dir, fname, ext )</span>
<a name="l00947"></a>00947 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00948"></a>00948 <span class="preprocessor"></span>
<a name="l00949"></a>00949 <span class="preprocessor">#if !( defined (_MSC_VER) || defined (__STDC_LIB_EXT1__) )</span>
<a name="l00950"></a>00950 <span class="preprocessor"></span>
<a name="l00951"></a>00951 <span class="preprocessor">    #define  getenv_s( sz, buf, sizeof_buf, name )       ( (void)(sz), strncpy ((buf), getenv (name), (sizeof_buf)-1) )</span>
<a name="l00952"></a>00952 <span class="preprocessor"></span>
<a name="l00953"></a>00953 <span class="preprocessor">#endif</span>
<a name="l00954"></a>00954 <span class="preprocessor"></span>
<a name="l00955"></a>00955 <span class="preprocessor">#if defined (__CYGWIN__)</span>
<a name="l00956"></a>00956 <span class="preprocessor"></span>
<a name="l00957"></a>00957 <span class="preprocessor">    #undef   __STRICT_ANSI__</span>
<a name="l00958"></a>00958 <span class="preprocessor"></span>
<a name="l00959"></a>00959     <span class="keyword">typedef</span>  <span class="keywordtype">void</span>                                _exception;
<a name="l00960"></a>00960 
<a name="l00961"></a>00961 <span class="preprocessor">    #define _O_TEXT                              O_TEXT</span>
<a name="l00962"></a>00962 <span class="preprocessor"></span><span class="preprocessor">    #define _fdopen                              fdopen</span>
<a name="l00963"></a>00963 <span class="preprocessor"></span><span class="preprocessor">    #define _flushall()                          fflush (NULL)</span>
<a name="l00964"></a>00964 <span class="preprocessor"></span><span class="preprocessor">    #define _getcwd                              getcwd</span>
<a name="l00965"></a>00965 <span class="preprocessor"></span><span class="preprocessor">    #define _getpid                              getpid</span>
<a name="l00966"></a>00966 <span class="preprocessor"></span><span class="preprocessor">    #define _stricmp                             strcasecmp</span>
<a name="l00967"></a>00967 <span class="preprocessor"></span><span class="preprocessor">    #define _strlwr                              strlwr</span>
<a name="l00968"></a>00968 <span class="preprocessor"></span><span class="preprocessor">    #define _strnicmp                            strncasecmp</span>
<a name="l00969"></a>00969 <span class="preprocessor"></span><span class="preprocessor">    #define _unlink                              unlink</span>
<a name="l00970"></a>00970 <span class="preprocessor"></span><span class="preprocessor">    #define _vsnprintf                           vsnprintf</span>
<a name="l00971"></a>00971 <span class="preprocessor"></span><span class="preprocessor">    #define _access                              access</span>
<a name="l00972"></a>00972 <span class="preprocessor"></span><span class="preprocessor">    #define _strdup                              strdup</span>
<a name="l00973"></a>00973 <span class="preprocessor"></span>
<a name="l00974"></a>00974 <span class="preprocessor">    #define getch                                _getch</span>
<a name="l00975"></a>00975 <span class="preprocessor"></span><span class="preprocessor">    #define putch                                _putch</span>
<a name="l00976"></a>00976 <span class="preprocessor"></span><span class="preprocessor">    #define kbhit                                _kbhit</span>
<a name="l00977"></a>00977 <span class="preprocessor"></span>
<a name="l00978"></a>00978 <span class="preprocessor">#endif</span>
<a name="l00979"></a>00979 <span class="preprocessor"></span>
<a name="l00980"></a>00980 <span class="preprocessor">#if defined (IN)                                 // IN and OUT are defined in WinDef.h to support Microsoft SAL.</span>
<a name="l00981"></a>00981 <span class="preprocessor"></span><span class="preprocessor">    #undef  IN                                   // Remove them because these names are often confused with the</span>
<a name="l00982"></a>00982 <span class="preprocessor"></span><span class="preprocessor">#endif                                           // user&#39;s code.</span>
<a name="l00983"></a>00983 <span class="preprocessor"></span>
<a name="l00984"></a>00984 <span class="preprocessor">#if defined (IN)</span>
<a name="l00985"></a>00985 <span class="preprocessor"></span><span class="preprocessor">    #undef  OUT</span>
<a name="l00986"></a>00986 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00987"></a>00987 <span class="preprocessor"></span>
<a name="l00988"></a>00988 <span class="preprocessor">#define     tx_nodiscard                         __attribute__ (( warn_unused_result ))</span>
<a name="l00989"></a>00989 <span class="preprocessor"></span><span class="preprocessor">#define     tx_deprecated                        __attribute__ (( deprecated         ))</span>
<a name="l00990"></a>00990 <span class="preprocessor"></span><span class="preprocessor">#define     tx_printfy( formatArgNum )           __attribute__ (( format (printf, (formatArgNum), (formatArgNum)+1) ))</span>
<a name="l00991"></a>00991 <span class="preprocessor"></span><span class="preprocessor">#define     tx_scanfy(  formatArgNum )           __attribute__ (( format (scanf,  (formatArgNum), (formatArgNum)+1) ))</span>
<a name="l00992"></a>00992 <span class="preprocessor"></span>
<a name="l00993"></a>00993 <span class="preprocessor">#if !defined (PRId64) || \</span>
<a name="l00994"></a>00994 <span class="preprocessor">     defined (_GCC_VER) &amp;&amp; (_GCC_VER == 492) &amp;&amp; !defined (_WIN64) // Dev-CPP 5.11: TDM-GCC 4.9.2 MinGW64 with -m32</span>
<a name="l00995"></a>00995 <span class="preprocessor"></span>
<a name="l00996"></a>00996 <span class="preprocessor">    #undef  PRId64</span>
<a name="l00997"></a>00997 <span class="preprocessor"></span><span class="preprocessor">    #undef  PRIi64</span>
<a name="l00998"></a>00998 <span class="preprocessor"></span><span class="preprocessor">    #undef  PRIo64</span>
<a name="l00999"></a>00999 <span class="preprocessor"></span><span class="preprocessor">    #undef  PRIu64</span>
<a name="l01000"></a>01000 <span class="preprocessor"></span><span class="preprocessor">    #undef  PRIx64</span>
<a name="l01001"></a>01001 <span class="preprocessor"></span><span class="preprocessor">    #undef  PRIX64</span>
<a name="l01002"></a>01002 <span class="preprocessor"></span>
<a name="l01003"></a>01003 <span class="preprocessor">    #define PRId64                               &quot;I64d&quot;</span>
<a name="l01004"></a>01004 <span class="preprocessor"></span><span class="preprocessor">    #define PRIi64                               &quot;I64i&quot;</span>
<a name="l01005"></a>01005 <span class="preprocessor"></span><span class="preprocessor">    #define PRIo64                               &quot;I64o&quot;</span>
<a name="l01006"></a>01006 <span class="preprocessor"></span><span class="preprocessor">    #define PRIu64                               &quot;I64u&quot;</span>
<a name="l01007"></a>01007 <span class="preprocessor"></span><span class="preprocessor">    #define PRIx64                               &quot;I64x&quot;</span>
<a name="l01008"></a>01008 <span class="preprocessor"></span><span class="preprocessor">    #define PRIX64                               &quot;I64X&quot;</span>
<a name="l01009"></a>01009 <span class="preprocessor"></span>
<a name="l01010"></a>01010 <span class="preprocessor">#endif</span>
<a name="l01011"></a>01011 <span class="preprocessor"></span>
<a name="l01012"></a>01012 <span class="comment">//}</span>
<a name="l01013"></a>01013 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l01014"></a>01014 
<a name="l01015"></a>01015 <span class="comment">//}</span>
<a name="l01016"></a>01016 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l01017"></a>01017 
<a name="l01018"></a>01018 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l01019"></a>01019 <span class="comment">//{          The namespaces</span>
<a name="l01020"></a>01020 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l01021"></a>01021 
<a name="l01022"></a>01022 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01025"></a>01025 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l01028"></a>01028 <span class="preprocessor"></span><span class="keyword">namespace </span>{ <span class="keyword">namespace </span>TX { }}
<a name="l01029"></a>01029 <span class="preprocessor">#endif</span>
<a name="l01030"></a>01030 <span class="preprocessor"></span>
<a name="l01031"></a>01031 <span class="comment">//}</span>
<a name="l01032"></a>01032 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l01033"></a>01033 
<a name="l01036"></a>01036 <span class="keyword">namespace </span>{ <span class="keyword">namespace </span>TX {                       <span class="comment">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; THE MAIN CODE IS HERE, UNFOLD IT &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
<a name="l01037"></a>01037 
<a name="l01040"></a>01040 <span class="comment">//=================================================================================================================</span>
<a name="l01041"></a>01041 <span class="comment">//{          TXLIB INTERFACE</span>
<a name="l01042"></a>01042 <span class="comment">//           Интерфейс библиотеки</span>
<a name="l01043"></a>01043 <span class="comment">//=================================================================================================================</span>
<a name="l01044"></a>01044 
<a name="l01045"></a>01045 <span class="comment">//=================================================================================================================</span>
<a name="l01046"></a>01046 <span class="comment">//{          Initialization</span>
<a name="l01048"></a>01048 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l01050"></a>01050 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01092"></a>01092 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01093"></a>01093 
<a name="l01094"></a>01094 HWND <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, <span class="keywordtype">bool</span> centered = <span class="keyword">true</span>);
<a name="l01095"></a>01095 
<a name="l01096"></a>01096 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01123"></a>01123 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01124"></a>01124 
<a name="l01125"></a>01125 <span class="keyword">inline</span> HDC&amp; <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>() tx_nodiscard;
<a name="l01126"></a>01126 
<a name="l01127"></a>01127 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01161"></a>01161 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01162"></a>01162 
<a name="l01163"></a>01163 inline RGBQUAD* <a class="code" href="a00081.htm#ga3a8ec79acc0dcbcc04bff3aecc235b4e" title="Возвращает буфер памяти, связанный с холстом (HDC) TXLib.">txVideoMemory</a>() tx_nodiscard;
<a name="l01164"></a>01164 
<a name="l01165"></a>01165 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01184"></a>01184 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01185"></a>01185 
<a name="l01186"></a>01186 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaa72c4849ac0c9bf6f95893f4265b9843" title="Установка параметров рисования по умолчанию.">txSetDefaults</a> (HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>());
<a name="l01187"></a>01187 
<a name="l01188"></a>01188 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01207"></a>01207 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01208"></a>01208 
<a name="l01209"></a>01209 inline <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga3291ffa23a348c25985d780ab8f7088b" title="Проверка правильности работы библиотеки">txOK</a>() tx_nodiscard;
<a name="l01210"></a>01210 
<a name="l01211"></a>01211 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01243"></a>01243 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01244"></a>01244 
<a name="l01245"></a>01245 inline POINT <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (HDC dc = txDC()) tx_nodiscard;
<a name="l01246"></a>01246 
<a name="l01247"></a>01247 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01264"></a>01264 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01265"></a>01265 
<a name="l01266"></a>01266 inline <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gab79782d80f6c61587d02f0633aa2f198" title="Возвращает ширину окна или холста.">txGetExtentX</a> (HDC dc = txDC()) tx_nodiscard;
<a name="l01267"></a>01267 
<a name="l01268"></a>01268 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01286"></a>01286 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01287"></a>01287 
<a name="l01288"></a>01288 inline <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gaa9bb7fd84e0b9f59c96be89d70c74321" title="Возвращает высоту окна или холста.">txGetExtentY</a> (HDC dc = txDC()) tx_nodiscard;
<a name="l01289"></a>01289 
<a name="l01290"></a>01290 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01302"></a>01302 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01303"></a>01303 
<a name="l01304"></a>01304 inline HWND <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>() tx_nodiscard;
<a name="l01305"></a>01305 
<a name="l01306"></a>01306 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01315"></a>01315 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01316"></a>01316 
<a name="l01317"></a>01317 inline const <span class="keywordtype">char</span>* <a class="code" href="a00081.htm#gaf382eed71ecf8229882fe544035d66dc" title="Возвращает строку с информацией о текущей версии библиотеки.">txVersion</a>() tx_nodiscard;
<a name="l01318"></a>01318 
<a name="l01319"></a>01319 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01328"></a>01328 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01329"></a>01329 
<a name="l01330"></a>01330 inline <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#gab2c5f0eff263a7297997281c3d451b91" title="Возвращает номер версии библиотеки.">txVersionNumber</a>() tx_nodiscard;
<a name="l01331"></a>01331 
<a name="l01332"></a>01332 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01362"></a>01362 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01363"></a>01363 
<a name="l01364"></a>01364 const <span class="keywordtype">char</span>* <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keywordtype">bool</span> fileNameOnly = true) tx_nodiscard;
<a name="l01365"></a>01365 
<a name="l01367"></a>01367 <span class="comment">//}</span>
<a name="l01368"></a>01368 <span class="comment">//=================================================================================================================</span>
<a name="l01369"></a>01369 
<a name="l01370"></a>01370 <span class="comment">//=================================================================================================================</span>
<a name="l01371"></a>01371 <span class="comment">//{          Setting the parameters</span>
<a name="l01373"></a>01373 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l01375"></a>01375 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01401"></a>01401 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01402"></a>01402 
<a name="l01403"></a>01403 const COLORREF
<a name="l01404"></a>01404 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l01405"></a><a class="code" href="a00081.htm#ga3e94cfad3d9080241f84129d6e5c09b5">01405</a> <span class="preprocessor"></span>    <span class="keyword">enum</span> <a class="code" href="a00081.htm#ga3e94cfad3d9080241f84129d6e5c09b5" title="Названия предопределенных цветов.">txColors</a> {
<a name="l01406"></a>01406 <span class="preprocessor">#endif</span>
<a name="l01407"></a>01407 <span class="preprocessor"></span>
<a name="l01408"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8">01408</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>         = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0,   0),   
<a name="l01409"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de">01409</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет. Плохо виден.">TX_BLUE</a>          = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0, 128),   
<a name="l01410"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032">01410</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>         = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 128,   0),   
<a name="l01411"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a3f59cd6ad2f1c2cea3f1b4f93baae64d">01411</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a3f59cd6ad2f1c2cea3f1b4f93baae64d" title="Бирюзовый цвет.">TX_CYAN</a>          = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 128, 128),   
<a name="l01412"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927">01412</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>           = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128,   0,   0),   
<a name="l01413"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aec305e1fce8a99fca3c442364389e22b">01413</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aec305e1fce8a99fca3c442364389e22b" title="Темно-малиновый цвет.">TX_MAGENTA</a>       = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128,   0, 128),   
<a name="l01414"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ad71bcc76691c708c653567bc70129e4b">01414</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ad71bcc76691c708c653567bc70129e4b" title="Коричневый цвет. Некрасивый. Do it yourself with RGB().">TX_BROWN</a>         = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128, 128,   0),   
<a name="l01415"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ab192f19b013a2563740be0da4e7252d9">01415</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ab192f19b013a2563740be0da4e7252d9" title="Оранжевый цвет.">TX_ORANGE</a>        = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 128,   0),   
<a name="l01416"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aaefd282232c1503377c5a5e3545c579a">01416</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aaefd282232c1503377c5a5e3545c579a" title="Серый цвет.">TX_GRAY</a>          = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (160, 160, 160),   
<a name="l01417"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5">01417</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a>      = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128, 128, 128),   
<a name="l01418"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e">01418</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>     = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (192, 192, 192),   
<a name="l01419"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a00514ed69e9dd0fafeb324c0258f9030">01419</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a00514ed69e9dd0fafeb324c0258f9030" title="Светло-синий цвет.">TX_LIGHTBLUE</a>     = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0, 255),   
<a name="l01420"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae45f1e493cce7ef326f8bd9e8c684c6b">01420</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae45f1e493cce7ef326f8bd9e8c684c6b" title="Светло-зеленый цвет.">TX_LIGHTGREEN</a>    = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 255, 128),   
<a name="l01421"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a05b6100527e0b7a96dcda198a1439382">01421</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a05b6100527e0b7a96dcda198a1439382" title="Светло-бирюзовый цвет.">TX_LIGHTCYAN</a>     = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 255, 255),   
<a name="l01422"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504">01422</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504" title="Светло-красный цвет. Не самого лучшего оттенка.">TX_LIGHTRED</a>      = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255,   0, 128),   
<a name="l01423"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5af3ef6cac77e7ca01e271a3562ceeb52f">01423</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5af3ef6cac77e7ca01e271a3562ceeb52f" title="Светло-малиновый цвет. Еще менее лучшего оттенка.">TX_LIGHTMAGENTA</a>  = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255,   0, 255),   
<a name="l01424"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae197423002e969d08646554e8b647454">01424</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae197423002e969d08646554e8b647454" title="Розовый гламурный :)">TX_PINK</a>          = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 128, 255),   
<a name="l01425"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a2331cdb79541487869e7c2445a2eb5f0">01425</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a2331cdb79541487869e7c2445a2eb5f0" title="Желтый цвет.">TX_YELLOW</a>        = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 255, 128),   
<a name="l01426"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025">01426</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>         = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 255, 255),   
<a name="l01427"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8">01427</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>   = 0xFFFFFFFF,            
<a name="l01428"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a081ac86689e98e0c036e960e9cb159ac">01428</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a081ac86689e98e0c036e960e9cb159ac" title="Прозрачный цвет. Отключает рисование.">TX_NULL</a>          = <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>,        
<a name="l01429"></a>01429 
<a name="l01430"></a>01430 <span class="comment">//  Цветовые каналы (компоненты) -- см. txExtractColor(), txRGB2HSL(), txHSL2RGB()</span>
<a name="l01431"></a>01431 
<a name="l01432"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65">01432</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>          = 0x04000000,             
<a name="l01433"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc">01433</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>   = 0x05000000,             
<a name="l01434"></a><a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e">01434</a>     <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>    = 0x06000000;             
<a name="l01435"></a>01435 
<a name="l01436"></a>01436 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l01437"></a>01437 <span class="preprocessor"></span>    };
<a name="l01438"></a>01438 <span class="preprocessor">#endif</span>
<a name="l01439"></a>01439 <span class="preprocessor"></span>
<a name="l01441"></a>01441 <span class="preprocessor">#define TX_GREY       TX_GRAY</span>
<a name="l01442"></a>01442 <span class="preprocessor"></span><span class="preprocessor">#define TX_DARKGREY   TX_DARKGRAY</span>
<a name="l01443"></a>01443 <span class="preprocessor"></span><span class="preprocessor">#define TX_LIGHTGREY  TX_LIGHTGRAY</span>
<a name="l01444"></a>01444 <span class="preprocessor"></span>
<a name="l01445"></a>01445 
<a name="l01446"></a>01446 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01471"></a>01471 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01472"></a>01472 
<a name="l01473"></a>01473 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l01474"></a>01474 <span class="preprocessor"></span>COLORREF <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<span class="keywordtype">int</span> red, <span class="keywordtype">int</span> green, <span class="keywordtype">int</span> blue);
<a name="l01475"></a>01475 <span class="preprocessor">#endif</span>
<a name="l01476"></a>01476 <span class="preprocessor"></span>
<a name="l01477"></a>01477 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01496"></a>01496 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01497"></a>01497 
<a name="l01498"></a>01498 HPEN <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (COLORREF color, <span class="keywordtype">double</span> thickness = 1, HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>());
<a name="l01499"></a>01499 
<a name="l01501"></a>01501 <span class="preprocessor">#define txSetColour txSetColor</span>
<a name="l01502"></a>01502 <span class="preprocessor"></span>
<a name="l01503"></a>01503 
<a name="l01505"></a>01505 
<a name="l01506"></a>01506 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01517"></a>01517 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01518"></a>01518 
<a name="l01519"></a>01519 COLORREF txColor (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l01520"></a>01520 
<a name="l01522"></a>01522 
<a name="l01523"></a>01523 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01536"></a>01536 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01537"></a>01537 
<a name="l01538"></a>01538 COLORREF <a class="code" href="a00081.htm#gab6462db4dbcca4915d460036c6c8896d" title="Возвращает текущий цвет линий и текста.">txGetColor</a> (HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>()) tx_nodiscard;
<a name="l01539"></a>01539 
<a name="l01540"></a>01540 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01555"></a>01555 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01556"></a>01556 
<a name="l01557"></a>01557 HBRUSH <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (COLORREF color, HDC dc = txDC());
<a name="l01558"></a>01558 
<a name="l01560"></a>01560 <span class="preprocessor">#define txSetFillColour txSetFillColor</span>
<a name="l01561"></a>01561 <span class="preprocessor"></span>
<a name="l01562"></a>01562 
<a name="l01564"></a>01564 
<a name="l01565"></a>01565 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01576"></a>01576 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01577"></a>01577 
<a name="l01578"></a>01578 COLORREF txFillColor (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l01579"></a>01579 
<a name="l01581"></a>01581 
<a name="l01582"></a>01582 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01595"></a>01595 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01596"></a>01596 
<a name="l01597"></a>01597 COLORREF <a class="code" href="a00081.htm#ga4d83b7e2d67f422cf703e15f2d7c4dfa" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a> (HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>()) tx_nodiscard;
<a name="l01598"></a>01598 
<a name="l01599"></a>01599 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01617"></a>01617 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01618"></a>01618 
<a name="l01619"></a>01619 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (COLORREF color, COLORREF component) tx_nodiscard;
<a name="l01620"></a>01620 
<a name="l01621"></a>01621 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01647"></a>01647 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01648"></a>01648 
<a name="l01649"></a>01649 COLORREF <a class="code" href="a00081.htm#ga1350174ec2a2c83182437f04c88c2d95" title="Преобразует цвет из формата RGB в формат HSL.">txRGB2HSL</a> (COLORREF rgbColor) tx_nodiscard;
<a name="l01650"></a>01650 
<a name="l01651"></a>01651 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01679"></a>01679 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01680"></a>01680 
<a name="l01681"></a>01681 COLORREF <a class="code" href="a00081.htm#ga6d5e95c1f234d32b8859826859127244" title="Преобразует цвет из формата HSL в формат RGB.">txHSL2RGB</a> (COLORREF hslColor) tx_nodiscard;
<a name="l01682"></a>01682 
<a name="l01684"></a>01684 <span class="comment">//}</span>
<a name="l01685"></a>01685 <span class="comment">//=================================================================================================================</span>
<a name="l01686"></a>01686 
<a name="l01687"></a>01687 <span class="comment">//=================================================================================================================</span>
<a name="l01688"></a>01688 <span class="comment">//{          Drawing</span>
<a name="l01690"></a>01690 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l01692"></a>01692 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01706"></a>01706 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01707"></a>01707 
<a name="l01708"></a>01708 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga78e83baeb6a02d5fa33dd8b062e513d9" title="Стирает холст текущим цветом заполнения.">txClear</a> (HDC dc = txDC());
<a name="l01709"></a>01709 
<a name="l01710"></a>01710 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01728"></a>01728 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01729"></a>01729 
<a name="l01730"></a>01730 inline <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gafafd861ab7dc599b2e68b258b6727c85" title="Рисует пиксель (точку на экране).">txSetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, COLORREF color, HDC dc = txDC());
<a name="l01731"></a>01731 
<a name="l01733"></a>01733 
<a name="l01734"></a>01734 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01752"></a>01752 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01753"></a>01753 
<a name="l01754"></a>01754 inline <span class="keywordtype">bool</span> txPixel (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue, HDC dc = txDC());
<a name="l01755"></a>01755 
<a name="l01757"></a>01757 
<a name="l01758"></a>01758 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01776"></a>01776 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01777"></a>01777 
<a name="l01778"></a>01778 inline COLORREF <a class="code" href="a00081.htm#ga90daedc95ac28938003edb5b50479542" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, HDC dc = txDC()) tx_nodiscard;
<a name="l01779"></a>01779 
<a name="l01780"></a>01780 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01800"></a>01800 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01801"></a>01801 
<a name="l01802"></a>01802 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, HDC dc = txDC());
<a name="l01803"></a>01803 
<a name="l01804"></a>01804 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01826"></a>01826 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01827"></a>01827 
<a name="l01828"></a>01828 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, HDC dc = txDC());
<a name="l01829"></a>01829 
<a name="l01830"></a>01830 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01850"></a>01850 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01851"></a>01851 
<a name="l01852"></a>01852 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gacbbb638439ad7ba88804178516019fb1" title="Рисует ломаную линию или многоугольник.">txPolygon</a> (const POINT points[], <span class="keywordtype">int</span> numPoints, HDC dc = txDC());
<a name="l01853"></a>01853 
<a name="l01854"></a>01854 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01874"></a>01874 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01875"></a>01875 
<a name="l01876"></a>01876 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaaf82e7c5a0fd06548f42c757f73d3dae" title="Рисует эллипс.">txEllipse</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, HDC dc = txDC());
<a name="l01877"></a>01877 
<a name="l01878"></a>01878 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01896"></a>01896 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01897"></a>01897 
<a name="l01898"></a>01898 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> r);
<a name="l01899"></a>01899 
<a name="l01900"></a>01900 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01923"></a>01923 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01924"></a>01924 
<a name="l01925"></a>01925 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga5e1e4cc39cc18962bb480c4adfa1344d" title="Рисует дугу эллипса.">txArc</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle, HDC dc = txDC());
<a name="l01926"></a>01926 
<a name="l01927"></a>01927 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01950"></a>01950 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01951"></a>01951 
<a name="l01952"></a>01952 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga8e06e3abcb6b3724d332feb8aa83a8df" title="Рисует сектор эллипса.">txPie</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle, HDC dc = txDC());
<a name="l01953"></a>01953 
<a name="l01954"></a>01954 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01977"></a>01977 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01978"></a>01978 
<a name="l01979"></a>01979 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga59468ca0fd4c182ac0a03573267eb3e9" title="Рисует хорду эллипса.">txChord</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle, HDC dc = txDC());
<a name="l01980"></a>01980 
<a name="l01981"></a>01981 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02013"></a>02013 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02014"></a>02014 
<a name="l02015"></a>02015 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga8adde0a20efa7597d8653653817353b2" title="Заливает произвольный контур текущим цветом заполнения.">txFloodFill</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, COLORREF color = <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>, DWORD mode = FLOODFILLSURFACE, HDC dc = txDC());
<a name="l02016"></a>02016 
<a name="l02017"></a>02017 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02035"></a>02035 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02036"></a>02036 
<a name="l02037"></a>02037 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaf5f3dec18e058830a6eb85ca127472df" title="Функция, которая должна бы рисовать треугольник.">txTriangle</a> (<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> x2, <span class="keywordtype">double</span> y2, <span class="keywordtype">double</span> x3, <span class="keywordtype">double</span> y3);
<a name="l02038"></a><a class="code" href="a00081.htm#gaf5f3dec18e058830a6eb85ca127472df">02038</a> <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaf5f3dec18e058830a6eb85ca127472df" title="Функция, которая должна бы рисовать треугольник.">txTriangle</a> (<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> x2, <span class="keywordtype">double</span> y2, <span class="keywordtype">double</span> x3, <span class="keywordtype">double</span> y3)
<a name="l02039"></a>02039     {
<a name="l02040"></a>02040     (void)x1; (void)y1; (void)x2; (void)y2; (void)x3; (void)y3;
<a name="l02041"></a>02041 
<a name="l02042"></a>02042     MessageBox (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(),
<a name="l02043"></a>02043                <span class="stringliteral">&quot;txTriangle (double x1, double y1, double x2, double y2, double x3, double y3)\n\n&quot;</span>
<a name="l02044"></a>02044                <span class="stringliteral">&quot;Эта функция не реализована в библиотеке, потому что вы легко можете реализовать ее сами &quot;</span>
<a name="l02045"></a>02045                <span class="stringliteral">&quot;как функцию с параметрами, используя txPolygon(). См. \&quot;Пример с функциями с параметрами\&quot;. &quot;</span>
<a name="l02046"></a>02046                <span class="stringliteral">&quot;Ну или нарисовать тремя линиями. :)&quot;</span>,
<a name="l02047"></a>02047                <span class="stringliteral">&quot;TXLib сообщает&quot;</span>, MB_ICONINFORMATION);
<a name="l02048"></a>02048 
<a name="l02049"></a>02049     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l02050"></a>02050     }
<a name="l02051"></a>02051 
<a name="l02052"></a>02052 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02054"></a>02054 <span class="comment"></span>
<a name="l02055"></a>02055 <span class="preprocessor">#define txRectandle  Sleep (1000), txRectangle  // Copy-protection for the function below</span>
<a name="l02056"></a>02056 <span class="preprocessor"></span><span class="preprocessor">#define txCircle     ;txCircle                  //</span>
<a name="l02057"></a>02057 <span class="preprocessor"></span><span class="preprocessor">#define txSetColor   ;txSetColor                //</span>
<a name="l02058"></a>02058 <span class="preprocessor"></span><span class="preprocessor">#define C0L0RREF     COLORREF                   //</span>
<a name="l02059"></a>02059 <span class="preprocessor"></span><span class="preprocessor">#define OxFFFFFF     0xFFFFFF                   //</span>
<a name="l02060"></a>02060 <span class="preprocessor"></span><span class="preprocessor">#define lO           10                         //</span>
<a name="l02061"></a>02061 <span class="preprocessor"></span><span class="preprocessor">#define lOOO         1000                       //</span>
<a name="l02062"></a>02062 <span class="preprocessor"></span><span class="preprocessor">#define O                                       //</span>
<a name="l02063"></a>02063 <span class="preprocessor"></span>
<a name="l02064"></a>02064 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (<span class="keywordtype">unsigned</span> flags, <span class="keyword">const</span> <span class="keywordtype">char</span> title[], <span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...) tx_printfy (3);
<a name="l02065"></a>02065 
<a name="l02067"></a>02067 <span class="comment">//}</span>
<a name="l02068"></a>02068 
<a name="l02069"></a>02069 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02110"></a>02110 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------//////</span>
<a name="l02111"></a>02111                                                                                                                        <span class="comment">//</span>
<a name="l02112"></a><a class="code" href="a00081.htm#gac76227ff55076802ea267be18b4d7a8d">02112</a> <span class="keywordtype">void</span> <a class="code" href="a00081.htm#gac76227ff55076802ea267be18b4d7a8d" title="Рисует человечка.">txDrawMan</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY, COLORREF color, <span class="keywordtype">double</span> handL, <span class="keywordtype">double</span> handR, <span class="keywordtype">double</span> twist,          <span class="comment">//</span>
<a name="l02113"></a>02113                 <span class="keywordtype">double</span> head, <span class="keywordtype">double</span> eyes, <span class="keywordtype">double</span> wink, <span class="keywordtype">double</span> crazy, <span class="keywordtype">double</span> smile, <span class="keywordtype">double</span> hair, <span class="keywordtype">double</span> wind)           <span class="comment">//</span>
<a name="l02114"></a>02114     {                                                                                                                  <span class="comment">//</span>
<a name="l02115"></a>02115     <span class="keyword">const</span> <span class="keywordtype">char</span> msg[] = <span class="stringliteral">&quot;\0/А я - человечек из библиотеки!\0/Меня объясняли на уроке!\0/Напиши меня сам!\0/&quot;</span>;           <span class="comment">//</span>
<a name="l02116"></a>02116     <span class="comment">//                   |                                |                          |                  |              //</span>
<a name="l02117"></a>02117     <span class="comment">// Не копипастите! _/ \_ Все равно не получится! :) _/ \_  Человечки защищают  _/ \_ этот код! :) _/ \_  Муаххаха! //</span>
<a name="l02118"></a>02118     <span class="comment">//                                                                                                                 //</span>
<a name="l02119"></a>02119     <span class="keyword">static</span> <span class="keywordtype">int</span> count = GetTickCount(), L = 0;  
<a name="l02120"></a>02120 
<a name="l02121"></a>02121     C0L0RREF lineColor = <a class="code" href="a00081.htm#gab6462db4dbcca4915d460036c6c8896d" title="Возвращает текущий цвет линий и текста.">txGetColor</a>();
<a name="l02122"></a>02122     C0L0RREF fillColor = <a class="code" href="a00081.htm#ga4d83b7e2d67f422cf703e15f2d7c4dfa" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a>();
<a name="l02123"></a>02123 
<a name="l02124"></a>02124     <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (color);
<a name="l02125"></a>02125     <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (color);
<a name="l02126"></a>02126 
<a name="l02127"></a>02127     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x + twist * sizeX, y - O.35 * sizeY, x, y - O.7 * sizeY);
<a name="l02128"></a>02128 
<a name="l02129"></a>02129     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x, y - O.7 * sizeY, x - sizeX/2, y - (O.7 + handL) * sizeY);
<a name="l02130"></a>02130     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x, y - O.7 * sizeY, x + sizeX/2, y - (O.7 + handR) * sizeY);
<a name="l02131"></a>02131 
<a name="l02132"></a>02132     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x + twist * sizeX, y - O.35 * sizeY, x - sizeX/2, y);
<a name="l02133"></a>02133     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x + twist * sizeX, y - O.35 * sizeY, x + sizeX/2, y);
<a name="l02134"></a>02134 
<a name="l02135"></a>02135     <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x, y - (O.85 + head) * sizeY, O.15 * sizeY);
<a name="l02136"></a>02136 
<a name="l02137"></a>02137     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x, y - (1 + head) * sizeY, x +  wind/lO        * sizeX, y - (1 + head + hair/lO) * sizeY);
<a name="l02138"></a>02138     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x, y - (1 + head) * sizeY, x + (wind/lO - O.1) * sizeX, y - (1 + head + hair/lO) * sizeY);
<a name="l02139"></a>02139     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x, y - (1 + head) * sizeY, x + (wind/lO + O.1) * sizeX, y - (1 + head + hair/lO) * sizeY);
<a name="l02140"></a>02140 
<a name="l02141"></a>02141     <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (~color &amp; OxFFFFFF);  <span class="comment">// Inverse the color</span>
<a name="l02142"></a>02142     <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (~color &amp; OxFFFFFF);
<a name="l02143"></a>02143 
<a name="l02144"></a>02144     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x, y - (O.8 + head - O.05 * smile/2) * sizeY, x - O.05 * sizeY, y - (O.8 + head + O.05 * smile/2) * sizeY),
<a name="l02145"></a>02145     <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (x, y - (O.8 + head - O.05 * smile/2) * sizeY, x + O.05 * sizeY, y - (O.8 + head + O.05 * smile/2) * sizeY),
<a name="l02146"></a>02146     <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (4, (<span class="keyword">const</span> <span class="keywordtype">char</span>*)!! (L+<span class="charliteral">&#39;L&#39;</span>)[msg], <span class="stringliteral">&quot;\n%s\n&quot;</span>, msg + ((<span class="keywordtype">unsigned</span>) (((count -=- 1) ^=! 1) ^=~ ((0)^(0)) +1) % 3)[<span class="stringliteral">&quot;\&quot;&lt;&quot;</span>]);
<a name="l02147"></a>02147 
<a name="l02148"></a>02148     <span class="comment">// See above: Mouth operator -=-, Cat operator ^=!, Mouse operator ^=~ and Owl constant ((0)^(0)). Use it freely, meow</span>
<a name="l02149"></a>02149 
<a name="l02150"></a>02150     <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x - O.05 * sizeY, y - (O.9 + head - O.02 * crazy) * sizeY, eyes * (1 + O.5*wink) * O.02 * sizeY);
<a name="l02151"></a>02151     <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x + O.05 * sizeY, y - (O.9 + head + O.02 * crazy) * sizeY, eyes * (1 - O.5*wink) * O.02 * sizeY),
<a name="l02152"></a>02152     Sleep (lOOO + count%2);
<a name="l02153"></a>02153 
<a name="l02154"></a>02154     <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a>);
<a name="l02155"></a>02155     <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>);
<a name="l02156"></a>02156 
<a name="l02157"></a>02157     <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x, y, 4);
<a name="l02158"></a>02158     txRectandle (x - sizeX/2, y - sizeY, x + sizeX/2, y);
<a name="l02159"></a>02159 
<a name="l02160"></a>02160     <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (lineColor);
<a name="l02161"></a>02161     <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (fillColor);
<a name="l02162"></a>02162     }
<a name="l02163"></a>02163 
<a name="l02165"></a>02165 <span class="comment">//}</span>
<a name="l02166"></a>02166 <span class="comment">//=================================================================================================================</span>
<a name="l02167"></a>02167 
<a name="l02168"></a>02168 <span class="comment">//=================================================================================================================</span>
<a name="l02169"></a>02169 <span class="comment">//{          Drawing text</span>
<a name="l02171"></a>02171 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l02173"></a>02173 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02192"></a>02192 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02193"></a>02193 
<a name="l02194"></a>02194 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> text[], HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>());
<a name="l02195"></a>02195 
<a name="l02196"></a>02196 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02198"></a>02198 <span class="comment"></span>
<a name="l02199"></a>02199 <span class="preprocessor">#undef txRectandle</span>
<a name="l02200"></a>02200 <span class="preprocessor"></span><span class="preprocessor">#undef txCircle</span>
<a name="l02201"></a>02201 <span class="preprocessor"></span><span class="preprocessor">#undef txSetColor</span>
<a name="l02202"></a>02202 <span class="preprocessor"></span><span class="preprocessor">#undef C0L0RREF</span>
<a name="l02203"></a>02203 <span class="preprocessor"></span><span class="preprocessor">#undef OxFFFFFF</span>
<a name="l02204"></a>02204 <span class="preprocessor"></span><span class="preprocessor">#undef lO</span>
<a name="l02205"></a>02205 <span class="preprocessor"></span><span class="preprocessor">#undef lOOO</span>
<a name="l02206"></a>02206 <span class="preprocessor"></span><span class="preprocessor">#undef O</span>
<a name="l02207"></a>02207 <span class="preprocessor"></span>
<a name="l02209"></a>02209 <span class="comment">//}</span>
<a name="l02210"></a>02210 
<a name="l02211"></a>02211 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02255"></a>02255 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02256"></a>02256 
<a name="l02257"></a>02257 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaf6a9b31e58b6a0523ce1636a97053606" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keyword">const</span> <span class="keywordtype">char</span> text[],
<a name="l02258"></a>02258                  <span class="keywordtype">unsigned</span> format = DT_CENTER | DT_VCENTER | DT_WORDBREAK | DT_WORD_ELLIPSIS, HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>());
<a name="l02259"></a>02259 
<a name="l02260"></a>02260 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02285"></a>02285 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02286"></a>02286 
<a name="l02287"></a>02287 HFONT <a class="code" href="a00081.htm#ga6689b9a89add9c5eb5cf54a8c86539a4" title="Выбирает текущий шрифт, его размер и другие атрибуты.">txSelectFont</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[], <span class="keywordtype">double</span> sizeY, <span class="keywordtype">double</span> sizeX = -1,
<a name="l02288"></a>02288                     <span class="keywordtype">int</span> bold = FW_DONTCARE, <span class="keywordtype">bool</span> italic = <span class="keyword">false</span>, <span class="keywordtype">bool</span> underline = <span class="keyword">false</span>,
<a name="l02289"></a>02289                     <span class="keywordtype">bool</span> strikeout = <span class="keyword">false</span>, <span class="keywordtype">double</span> angle = 0,
<a name="l02290"></a>02290                     HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>());
<a name="l02291"></a>02291 
<a name="l02292"></a>02292 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02307"></a>02307 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02308"></a>02308 
<a name="l02309"></a>02309 SIZE <a class="code" href="a00081.htm#ga64af5f87cd652548278ff98d26f58148" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[], HDC dc = <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>()) tx_nodiscard;
<a name="l02310"></a>02310 
<a name="l02311"></a>02311 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02325"></a>02325 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02326"></a>02326 
<a name="l02327"></a>02327 <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gad5483eacac697420a84f66733e45ed02" title="Вычисляет ширину текстовой надписи.">txGetTextExtentX</a> (const <span class="keywordtype">char</span> text[], HDC dc = txDC()) tx_nodiscard;
<a name="l02328"></a>02328 
<a name="l02329"></a>02329 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02343"></a>02343 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02344"></a>02344 
<a name="l02345"></a>02345 <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gac021e9984ef217a7a8c14094e3d684c9" title="Вычисляет высоту текстовой надписи.">txGetTextExtentY</a> (const <span class="keywordtype">char</span> text[], HDC dc = txDC()) tx_nodiscard;
<a name="l02346"></a>02346 
<a name="l02347"></a>02347 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02374"></a>02374 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02375"></a>02375 
<a name="l02376"></a>02376 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a> (<span class="keywordtype">unsigned</span> align = TA_CENTER | TA_BASELINE, HDC dc = txDC());
<a name="l02377"></a>02377 
<a name="l02378"></a>02378 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02394"></a>02394 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02395"></a>02395 
<a name="l02396"></a>02396 LOGFONT* <a class="code" href="a00081.htm#ga794901725b6c4a96f585742b70c0ea05" title="Ищет шрифт по его названию.">txFontExist</a> (const <span class="keywordtype">char</span> name[]) tx_nodiscard;
<a name="l02397"></a>02397 
<a name="l02399"></a>02399 <span class="comment">//}</span>
<a name="l02400"></a>02400 <span class="comment">//=================================================================================================================</span>
<a name="l02401"></a>02401 
<a name="l02402"></a>02402 <span class="comment">//=================================================================================================================</span>
<a name="l02403"></a>02403 <span class="comment">//{          Drawing to memory DC and image loading</span>
<a name="l02405"></a>02405 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l02407"></a>02407 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02442"></a>02442 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02443"></a>02443 
<a name="l02444"></a>02444 HDC <a class="code" href="a00081.htm#ga1008da052f2fbe9ec0f70c2f6b4f0700" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, HBITMAP bitmap = NULL) tx_nodiscard;
<a name="l02445"></a>02445 
<a name="l02446"></a>02446 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02550"></a>02550 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02551"></a>02551 
<a name="l02552"></a>02552 HDC <a class="code" href="a00081.htm#ga7535f88c0fd15b4b49195060d38f2603" title="Создает аппаратно-независимый дополнительный холст (контекст рисования, Device Context, DC) в памяти с возможностью прямого доступа к нему как к массиву.">txCreateDIBSection</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, RGBQUAD**  pixels = NULL) tx_nodiscard;
<a name="l02553"></a>02553 
<a name="l02555"></a>02555 HDC <a class="code" href="a00081.htm#ga7535f88c0fd15b4b49195060d38f2603" title="Создает аппаратно-независимый дополнительный холст (контекст рисования, Device Context, DC) в памяти с возможностью прямого доступа к нему как к массиву.">txCreateDIBSection</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, COLORREF** pixels)        tx_nodiscard;
<a name="l02557"></a>02557 
<a name="l02558"></a>02558 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02630"></a>02630 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02631"></a>02631 
<a name="l02632"></a>02632 HDC <a class="code" href="a00081.htm#gaec4970aac125bcf0d8a0b10a118222f7" title="Загружает из файла изображение в формате BMP. Делает это довольно медленно.">txLoadImage</a> (const <span class="keywordtype">char</span> filename[], <span class="keywordtype">unsigned</span> imageFlags = IMAGE_BITMAP, <span class="keywordtype">unsigned</span> loadFlags = LR_LOADFROMFILE) tx_nodiscard;
<a name="l02633"></a>02633 
<a name="l02634"></a>02634 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02660"></a>02660 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02661"></a>02661 
<a name="l02662"></a>02662 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC  dc);
<a name="l02663"></a>02663 
<a name="l02665"></a>02665 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC* dc);
<a name="l02667"></a>02667 
<a name="l02668"></a>02668 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02708"></a>02708 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02709"></a>02709 
<a name="l02710"></a>02710 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (HDC destImage,   <span class="keywordtype">double</span> xDest,       <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l02711"></a>02711                HDC sourceImage, <span class="keywordtype">double</span> xSource = 0, <span class="keywordtype">double</span> ySource = 0, <span class="keywordtype">unsigned</span> operation = SRCCOPY);
<a name="l02712"></a>02712 
<a name="l02713"></a>02713 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02728"></a>02728 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02729"></a>02729 
<a name="l02730"></a>02730 inline <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (<span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, HDC sourceImage, <span class="keywordtype">double</span> xSource = 0, <span class="keywordtype">double</span> ySource = 0);
<a name="l02731"></a>02731 
<a name="l02732"></a>02732 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02787"></a>02787 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02788"></a>02788 
<a name="l02789"></a>02789 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga54f48f0bcb9453add294e0a9f8b1fb1d" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (HDC destImage,   <span class="keywordtype">double</span> xDest,       <span class="keywordtype">double</span> yDest,       <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l02790"></a>02790                        HDC sourceImage, <span class="keywordtype">double</span> xSource = 0, <span class="keywordtype">double</span> ySource = 0, COLORREF transColor = <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>);
<a name="l02791"></a>02791 
<a name="l02792"></a>02792 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02808"></a>02808 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02809"></a>02809 
<a name="l02810"></a>02810 inline <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga54f48f0bcb9453add294e0a9f8b1fb1d" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (<span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, HDC sourceImage,
<a name="l02811"></a>02811                               COLORREF transColor = TX_BLACK, <span class="keywordtype">double</span> xSource = 0, <span class="keywordtype">double</span> ySource = 0);
<a name="l02812"></a>02812 
<a name="l02813"></a>02813 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02923"></a>02923 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02924"></a>02924 
<a name="l02925"></a>02925 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga4d6f780cdef622df0fda71d0b3cfee52" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом полупрозрачности...">txAlphaBlend</a> (HDC destImage,   <span class="keywordtype">double</span> xDest,       <span class="keywordtype">double</span> yDest,       <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l02926"></a>02926                    HDC sourceImage, <span class="keywordtype">double</span> xSource = 0, <span class="keywordtype">double</span> ySource = 0, <span class="keywordtype">double</span> alpha = 1.0);
<a name="l02927"></a>02927 
<a name="l02928"></a>02928 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02945"></a>02945 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02946"></a>02946 
<a name="l02947"></a>02947 inline <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga4d6f780cdef622df0fda71d0b3cfee52" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом полупрозрачности...">txAlphaBlend</a> (<span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, HDC sourceImage,
<a name="l02948"></a>02948                           <span class="keywordtype">double</span> xSource = 0, <span class="keywordtype">double</span> ySource = 0, <span class="keywordtype">double</span> alpha = 1.0);
<a name="l02949"></a>02949 
<a name="l02950"></a>02950 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02979"></a>02979 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02980"></a>02980 
<a name="l02981"></a>02981 HDC <a class="code" href="a00081.htm#ga6280d640bb3b08dc82c8dd29caf5ff47" title="Пересчитывает цвета пикселей с учетом прозрачности (переводит цвета в формат Premultiplied Alpha)...">txUseAlpha</a> (HDC image);
<a name="l02982"></a>02982 
<a name="l02983"></a>02983 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03009"></a>03009 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03010"></a>03010 
<a name="l03011"></a>03011 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga45389db909311454bbdfed3898d760d1" title="Сохраняет в файл изображение в формате BMP.">txSaveImage</a> (const <span class="keywordtype">char</span> filename[], HDC dc = txDC());
<a name="l03012"></a>03012 
<a name="l03014"></a>03014 <span class="comment">//}</span>
<a name="l03015"></a>03015 <span class="comment">//=================================================================================================================</span>
<a name="l03016"></a>03016 
<a name="l03017"></a>03017 <span class="comment">//=================================================================================================================</span>
<a name="l03018"></a>03018 <span class="comment">//{          Utility functions</span>
<a name="l03020"></a>03020 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l03022"></a>03022 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03041"></a>03041 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03042"></a>03042 
<a name="l03043"></a>03043 <span class="keywordtype">double</span> <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<span class="keywordtype">double</span> time = 0);
<a name="l03044"></a>03044 
<a name="l03045"></a>03045 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03130"></a>03130 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03131"></a>03131 
<a name="l03132"></a>03132 inline <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin</a>();
<a name="l03133"></a>03133 
<a name="l03134"></a>03134 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03158"></a>03158 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03159"></a>03159 
<a name="l03160"></a>03160 inline <span class="keywordtype">int</span> <a class="code" href="a00081.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd</a>();
<a name="l03161"></a>03161 
<a name="l03162"></a>03162 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03184"></a>03184 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03185"></a>03185 
<a name="l03186"></a>03186 inline <span class="keywordtype">void</span> <a class="code" href="a00081.htm#gadc7fd9cdc8c007693db7b6d7de794709" title="Обновляет изображение в окне TXLib вручную.">txRedrawWindow</a>();
<a name="l03187"></a>03187 
<a name="l03188"></a>03188 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03212"></a>03212 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03213"></a>03213 
<a name="l03214"></a>03214 inline <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keywordtype">int</span> update = true);
<a name="l03215"></a>03215 
<a name="l03216"></a>03216 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03233"></a>03233 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03234"></a>03234 
<a name="l03235"></a>03235 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gabc64e03f4ca966e76bc714bbe8173761" title="Устанавливает текущий активный объект GDI.">txSelectObject</a> (HGDIOBJ obj, HDC dc = txDC());
<a name="l03236"></a>03236 
<a name="l03237"></a>03237 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03257"></a>03257 <span class="comment"></span><span class="comment">//</span>
<a name="l03258"></a>03258 <span class="comment">//                 +--&lt;&lt;&lt; Это текст помощи, который вы уже читали. Ищите дальше! Жмите [F3] или &quot;Найти далее&quot;</span>
<a name="l03259"></a>03259 <span class="comment">//                 |</span>
<a name="l03260"></a>03260 <span class="comment">//                 v</span>
<a name="l03261"></a>03261 <span class="comment">//               txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture();</span>
<a name="l03266"></a>03266 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03267"></a>03267 
<a name="l03268"></a>03268 <span class="comment">//     +--&lt;&lt;&lt; Это _прототип_ функции, а надо найти ее _определение_. Ищите дальше! Жмите [F3] или &quot;Найти далее&quot;</span>
<a name="l03269"></a>03269 <span class="comment">//     |</span>
<a name="l03270"></a>03270 <span class="comment">//     v</span>
<a name="l03271"></a>03271 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga93cecf6b117fc403c0488f388b78a6d1" title="Делает нечто иногда удобное. См. название функции.">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture</a>();
<a name="l03272"></a>03272 
<a name="l03273"></a>03273 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03289"></a>03289 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03290"></a>03290 
<a name="l03291"></a>03291 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga0a3cf3a018cea9d5889d2626e9a37136" title="Уничтожает окно.">txDestroyWindow</a> (HWND wnd = <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>());
<a name="l03292"></a>03292 
<a name="l03293"></a>03293 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03304"></a>03304 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03305"></a>03305 
<a name="l03306"></a>03306 <span class="keywordtype">double</span> <a class="code" href="a00081.htm#ga49983bddca35d531c521cf04c6c2449f" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>() tx_nodiscard;
<a name="l03307"></a>03307 
<a name="l03308"></a>03308 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03323"></a>03323 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03325"></a>03325 <span class="comment"></span>
<a name="l03326"></a>03326 <span class="preprocessor">#if defined (_TX_CPP11)</span>
<a name="l03327"></a>03327 <span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keywordtype">int</span> txFramesToAverage = 5&gt;
<a name="l03328"></a>03328 <span class="preprocessor">#else</span>
<a name="l03329"></a>03329 <span class="preprocessor"></span>    <span class="keyword">const</span>     <span class="keywordtype">int</span> txFramesToAverage = 5;
<a name="l03330"></a>03330 <span class="preprocessor">#endif</span>
<a name="l03331"></a>03331 <span class="preprocessor"></span>
<a name="l03333"></a>03333 
<a name="l03334"></a>03334 <span class="keywordtype">double</span> <a class="code" href="a00081.htm#ga1aca71127c9986f995b2372903d65964" title="Выдает количество кадров (вызовов этой функции) в секунду.">txGetFPS</a> (<span class="keywordtype">int</span> minFrames = txFramesToAverage) tx_nodiscard;
<a name="l03335"></a>03335 
<a name="l03337"></a>03337 <span class="comment">//}</span>
<a name="l03338"></a>03338 
<a name="l03339"></a>03339 <span class="comment">//=================================================================================================================</span>
<a name="l03340"></a>03340 <span class="comment">//{          Mouse functions</span>
<a name="l03342"></a>03342 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l03344"></a>03344 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03364"></a>03364 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03365"></a>03365 
<a name="l03366"></a>03366 inline POINT <a class="code" href="a00082.htm#ga44606f3b7f5f345d15bb20d46fcf78b6" title="Возвращает позицию Мыши!">txMousePos</a>() tx_nodiscard;
<a name="l03367"></a>03367 
<a name="l03368"></a>03368 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03386"></a>03386 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03387"></a>03387 
<a name="l03388"></a>03388 inline <span class="keywordtype">int</span> <a class="code" href="a00082.htm#ga2e6de35bffaf8217d577ed21a9ea6150" title="Возвращает X-Координату Мыши!">txMouseX</a>() tx_nodiscard;
<a name="l03389"></a>03389 
<a name="l03390"></a>03390 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03408"></a>03408 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03409"></a>03409 
<a name="l03410"></a>03410 inline <span class="keywordtype">int</span> <a class="code" href="a00082.htm#ga47faa907390ccd05b350112bcb9fc79a" title="Возвращает Y-Координату Мыши!">txMouseY</a>() tx_nodiscard;
<a name="l03411"></a>03411 
<a name="l03412"></a>03412 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03432"></a>03432 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03433"></a>03433 
<a name="l03434"></a>03434 inline <span class="keywordtype">unsigned</span> <a class="code" href="a00082.htm#ga3317e38b22d8e6f116c29503144c2cc2" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>() tx_nodiscard;
<a name="l03435"></a>03435 
<a name="l03436"></a>03436 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03468"></a>03468 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03469"></a>03469 
<a name="l03470"></a>03470 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l03471"></a>03471 <span class="preprocessor"></span><span class="keyword">inline</span> Mouse&amp; <a class="code" href="a00082.htm#ga86effc891e88ce038ddacfe398412291" title="Ловит Мышь!">txCatchMouse</a> (<span class="keywordtype">bool</span> shouldEat = <span class="keyword">true</span>);
<a name="l03472"></a>03472 <span class="preprocessor">#endif</span>
<a name="l03473"></a>03473 <span class="preprocessor"></span>
<a name="l03475"></a>03475 <span class="comment">//}</span>
<a name="l03476"></a>03476 <span class="comment">//=================================================================================================================</span>
<a name="l03477"></a>03477 
<a name="l03478"></a>03478 <span class="comment">//=================================================================================================================</span>
<a name="l03479"></a>03479 <span class="comment">//{          Console functions</span>
<a name="l03481"></a>03481 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l03483"></a>03483 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03525"></a>03525 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03526"></a>03526 
<a name="l03527"></a>03527 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (<span class="keywordtype">unsigned</span> colors = 0x07 <span class="comment">/*FOREGROUND_LIGHTGRAY*/</span>);
<a name="l03528"></a>03528 
<a name="l03529"></a>03529 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03541"></a>03541 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03542"></a>03542 
<a name="l03543"></a>03543 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>() tx_nodiscard;
<a name="l03544"></a>03544 
<a name="l03545"></a>03545 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03559"></a>03559 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03560"></a>03560 
<a name="l03561"></a>03561 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga2cb63c12d9206e9ed2b2c83c9a08f68e" title="Стирает текст консоли.">txClearConsole</a>();
<a name="l03562"></a>03562 
<a name="l03563"></a>03563 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03583"></a>03583 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03584"></a>03584 
<a name="l03585"></a>03585 POINT <a class="code" href="a00081.htm#gaee548f7b5672cbcbb99246e0291d7336" title="Устанавливает позицию мигающего курсора консоли.">txSetConsoleCursorPos</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y);
<a name="l03586"></a>03586 
<a name="l03587"></a>03587 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03600"></a>03600 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03601"></a>03601 
<a name="l03602"></a>03602 POINT <a class="code" href="a00081.htm#ga3227242c57eef33049cdaee655f4faee" title="Возвращает позицию мигающего курсора консоли.">txGetConsoleCursorPos</a>();
<a name="l03603"></a>03603 
<a name="l03604"></a>03604 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03617"></a>03617 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03618"></a>03618 
<a name="l03619"></a>03619 POINT <a class="code" href="a00081.htm#gade3dc928a81efd7054c61fa6cb4ddc06" title="Возвращает размер консоли.">txGetConsoleExtent</a>();
<a name="l03620"></a>03620 
<a name="l03621"></a>03621 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03634"></a>03634 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03635"></a>03635 
<a name="l03636"></a>03636 POINT <a class="code" href="a00081.htm#ga250455abeab8c99a51153ef8f4ec0396" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>() tx_nodiscard;
<a name="l03637"></a>03637 
<a name="l03638"></a>03638 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03654"></a>03654 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03655"></a>03655 
<a name="l03656"></a>03656 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor</a> (<span class="keywordtype">bool</span> blink = true);
<a name="l03657"></a>03657 
<a name="l03659"></a>03659 <span class="comment">//}</span>
<a name="l03660"></a>03660 <span class="comment">//=================================================================================================================</span>
<a name="l03661"></a>03661 
<a name="l03662"></a>03662 <span class="comment">//=================================================================================================================</span>
<a name="l03663"></a>03663 <span class="comment">//{          Other staff not related to drawing</span>
<a name="l03665"></a>03665 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l03667"></a>03667 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03696"></a>03696 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03697"></a>03697 
<a name="l03698"></a>03698 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound</a> (const <span class="keywordtype">char</span> filename[] = NULL, DWORD mode = SND_ASYNC);
<a name="l03699"></a>03699 
<a name="l03700"></a>03700 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03818"></a>03818 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03819"></a>03819 
<a name="l03820"></a>03820 intptr_t <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, const <span class="keywordtype">char</span> fileName[],
<a name="l03821"></a>03821                        <span class="keywordtype">double</span> zoom = 0, <span class="keywordtype">double</span> gain = 1, HWND wnd = txWindow());
<a name="l03822"></a>03822 
<a name="l03823"></a>03823 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03838"></a>03838 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03839"></a>03839 
<a name="l03840"></a>03840 intptr_t <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (const <span class="keywordtype">char</span> fileName[], <span class="keywordtype">double</span> zoom = 0, <span class="keywordtype">double</span> gain = 1, HWND wnd = txWindow());
<a name="l03841"></a>03841 
<a name="l03842"></a>03842 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03882"></a>03882 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03883"></a>03883 
<a name="l03884"></a>03884 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &amp;nbsp; мысли &amp;nbsp; текст вслух.">txSpeak</a> (const <span class="keywordtype">char</span>* text, ...) tx_printfy (1);
<a name="l03885"></a>03885 
<a name="l03886"></a>03886 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03916"></a>03916 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03917"></a>03917 
<a name="l03918"></a>03918 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (const <span class="keywordtype">char</span> text[] = &quot;Муаххаха! :)&quot;, const <span class="keywordtype">char</span> header[] = &quot;TXLib сообщает&quot;,
<a name="l03919"></a>03919                   <span class="keywordtype">unsigned</span> flags = MB_ICONINFORMATION | MB_OKCANCEL);
<a name="l03920"></a>03920 
<a name="l03921"></a>03921 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03977"></a>03977 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03978"></a>03978 
<a name="l03979"></a>03979 inline <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (<span class="keywordtype">int</span> key);
<a name="l03980"></a>03980 
<a name="l03981"></a>03981 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04018"></a>04018 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04019"></a>04019 
<a name="l04020"></a>04020 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l04021"></a>04021 <span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (<span class="keywordtype">unsigned</span> flags, <span class="keyword">const</span> <span class="keywordtype">char</span> title[], <span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...) tx_printfy (3);
<a name="l04022"></a>04022 <span class="preprocessor">#endif</span>
<a name="l04023"></a>04023 <span class="preprocessor"></span>
<a name="l04024"></a>04024 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04049"></a>04049 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04050"></a>04050 
<a name="l04051"></a>04051 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...) tx_printfy (1);
<a name="l04052"></a>04052 
<a name="l04053"></a>04053 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04129"></a>04129 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04130"></a>04130 
<a name="l04131"></a>04131 <span class="preprocessor">#if defined (_TX_CPP11) ||  defined (FOR_DOXYGEN_ONLY)</span>
<a name="l04132"></a>04132 <span class="preprocessor"></span>
<a name="l04133"></a>04133 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt;
<a name="l04134"></a>04134 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args);
<a name="l04135"></a>04135 
<a name="l04136"></a>04136 <span class="preprocessor">#define TX_PRINTF(...)  ( _txPrintfCheck (__VA_ARGS__), txPrintf (__VA_ARGS__) )</span>
<a name="l04137"></a>04137 <span class="preprocessor"></span>
<a name="l04138"></a>04138 <span class="preprocessor">#endif</span>
<a name="l04139"></a>04139 <span class="preprocessor"></span>
<a name="l04140"></a>04140 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04141"></a>04141 
<a name="l04142"></a>04142 <span class="preprocessor">#if defined (_TX_CPP11) &amp;&amp; !defined (FOR_DOXYGEN_ONLY)</span>
<a name="l04143"></a>04143 <span class="preprocessor"></span>
<a name="l04144"></a>04144 <span class="keyword">enum</span> width_t     : <span class="keywordtype">int</span> {};
<a name="l04145"></a>04145 <span class="keyword">enum</span> precision_t : <span class="keywordtype">int</span> {};
<a name="l04146"></a>04146 
<a name="l04147"></a>04147 <span class="keyword">inline</span> width_t     width     (<span class="keywordtype">int</span> width) { <span class="keywordflow">return</span> (width_t)     width; }
<a name="l04148"></a>04148 <span class="keyword">inline</span> precision_t precision (<span class="keywordtype">int</span> prec)  { <span class="keywordflow">return</span> (precision_t) prec;  }
<a name="l04149"></a>04149 
<a name="l04150"></a>04150 <span class="preprocessor">#endif</span>
<a name="l04151"></a>04151 <span class="preprocessor"></span>
<a name="l04152"></a>04152 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04170"></a>04170 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04171"></a>04171 
<a name="l04172"></a>04172 <span class="preprocessor">#if defined (_TX_CPP11) ||  defined (FOR_DOXYGEN_ONLY)</span>
<a name="l04173"></a>04173 <span class="preprocessor"></span>
<a name="l04174"></a>04174 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt;
<a name="l04175"></a>04175 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args);
<a name="l04176"></a>04176 
<a name="l04177"></a>04177 <span class="preprocessor">#endif</span>
<a name="l04178"></a>04178 <span class="preprocessor"></span>
<a name="l04179"></a>04179 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04198"></a>04198 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04199"></a>04199 
<a name="l04200"></a>04200 <span class="preprocessor">#if defined (_TX_CPP11) ||  defined (FOR_DOXYGEN_ONLY)</span>
<a name="l04201"></a>04201 <span class="preprocessor"></span>
<a name="l04202"></a>04202 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt;
<a name="l04203"></a>04203 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (<span class="keywordtype">char</span> buffer[], <span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args);
<a name="l04204"></a>04204 
<a name="l04205"></a>04205 <span class="preprocessor">#endif</span>
<a name="l04206"></a>04206 <span class="preprocessor"></span>
<a name="l04207"></a>04207 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04224"></a>04224 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04225"></a>04225 
<a name="l04226"></a>04226 <span class="preprocessor">#if defined (_TX_CPP11) || defined (FOR_DOXYGEN_ONLY)</span>
<a name="l04227"></a>04227 <span class="preprocessor"></span>
<a name="l04228"></a>04228 <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... ArgsT&gt;
<a name="l04229"></a>04229 std::string <a class="code" href="a00080.htm#ga06beb201bdba586f44f029ffc5083bcf" title="Форматирует строку, как sprintf().">txFormat</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args);
<a name="l04230"></a>04230 
<a name="l04231"></a>04231 <span class="preprocessor">#endif</span>
<a name="l04232"></a>04232 <span class="preprocessor"></span>
<a name="l04233"></a>04233 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04305"></a>04305 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04307"></a>04307 <span class="comment"></span>
<a name="l04308"></a><a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5">04308</a> <span class="preprocessor">#define sizearr( arr )  ( sizeof (get_size_of_an_array_with_unknown_or_nonconst_size_ (arr)) )</span>
<a name="l04309"></a>04309 <span class="preprocessor"></span>
<a name="l04311"></a>04311 <span class="comment">//  See explanation here: http://blogs.msdn.com/b/the1/archive/2004/05/07/128242.aspx</span>
<a name="l04312"></a>04312 
<a name="l04313"></a>04313 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">size_t</span> N&gt; char (&amp;get_size_of_an_array_with_unknown_or_nonconst_size_ (T (&amp;) [N])) [N];  <span class="comment">// ;=P</span>
<a name="l04314"></a>04314 
<a name="l04315"></a>04315 <span class="comment">//  Another approach</span>
<a name="l04316"></a>04316 
<a name="l04317"></a>04317 <span class="preprocessor">#if defined (_TX_CPP11_MSVC15)</span>
<a name="l04318"></a>04318 <span class="preprocessor"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">size_t</span> N&gt; constexpr <span class="keywordtype">size_t</span> countof (<span class="keyword">const</span> T (&amp;) [N] ) { <span class="keywordflow">return</span> N; }
<a name="l04319"></a>04319 <span class="preprocessor">#endif</span>
<a name="l04320"></a>04320 <span class="preprocessor"></span>
<a name="l04322"></a>04322 
<a name="l04323"></a>04323 <span class="preprocessor">#define SIZEARR( arr )  ( sizeof (arr) / sizeof ((arr)[0]) )</span>
<a name="l04324"></a>04324 <span class="preprocessor"></span>
<a name="l04326"></a>04326 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04345"></a>04345 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04346"></a>04346 
<a name="l04347"></a>04347 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (<span class="keywordtype">int</span> range) tx_deprecated;
<a name="l04348"></a>04348 
<a name="l04349"></a>04349 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04374"></a>04374 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04375"></a>04375 
<a name="l04376"></a>04376 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (<span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right)                tx_nodiscard tx_deprecated;
<a name="l04377"></a>04377 
<a name="l04378"></a>04378 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (std::nomeow_t, <span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right) tx_nodiscard;
<a name="l04379"></a>04379 
<a name="l04380"></a>04380 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04401"></a>04401 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04402"></a>04402 
<a name="l04403"></a>04403 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tx, <span class="keyword">typename</span> Ta, <span class="keyword">typename</span> Tb&gt;
<a name="l04404"></a>04404 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (Tx x, Ta a, Tb b)                tx_nodiscard tx_deprecated;
<a name="l04405"></a>04405 
<a name="l04406"></a>04406 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tx, <span class="keyword">typename</span> Ta, <span class="keyword">typename</span> Tb&gt;
<a name="l04407"></a>04407 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow_t, Tx x, Ta a, Tb b) tx_nodiscard tx_deprecated;
<a name="l04408"></a>04408 
<a name="l04409"></a>04409 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04455"></a>04455 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04457"></a>04457 <span class="comment"></span>
<a name="l04458"></a>04458 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> POINT&amp; pt, <span class="keyword">const</span> RECT&amp; rect)       tx_nodiscard tx_deprecated;
<a name="l04459"></a>04459 
<a name="l04460"></a>04460 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> COORD&amp; pt, <span class="keyword">const</span> SMALL_RECT&amp; rect) tx_nodiscard tx_deprecated;
<a name="l04461"></a>04461 
<a name="l04463"></a>04463 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04482"></a>04482 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04483"></a>04483 
<a name="l04484"></a><a class="code" href="a00080.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f">04484</a> <span class="preprocessor">#define MAX( a, b )     ( ((a) &gt; (b))? (a) : (b) )</span>
<a name="l04485"></a>04485 <span class="preprocessor"></span>
<a name="l04486"></a>04486 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04505"></a>04505 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04506"></a>04506 
<a name="l04507"></a><a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f">04507</a> <span class="preprocessor">#define MIN( a, b )     ( ((a) &lt; (b))? (a) : (b) )</span>
<a name="l04508"></a>04508 <span class="preprocessor"></span>
<a name="l04509"></a>04509 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04523"></a>04523 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04524"></a>04524 
<a name="l04525"></a>04525 <span class="preprocessor">#if defined (__STDC_VERSION__) &amp;&amp; __STDC_VERSION__ &gt;= 199901L  // MSVC: C99 case</span>
<a name="l04526"></a>04526 <span class="preprocessor"></span>
<a name="l04527"></a>04527 <span class="preprocessor">    #define ROUND( x )  ( (long) round (x) )</span>
<a name="l04528"></a>04528 <span class="preprocessor"></span>
<a name="l04529"></a>04529 <span class="preprocessor">#else</span>
<a name="l04530"></a>04530 <span class="preprocessor"></span>
<a name="l04531"></a><a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12">04531</a> <span class="preprocessor">    #define ROUND( x )  ( (long) floor ((x) + 0.5) )</span>
<a name="l04532"></a>04532 <span class="preprocessor"></span>
<a name="l04533"></a>04533 <span class="preprocessor">#endif</span>
<a name="l04534"></a>04534 <span class="preprocessor"></span>
<a name="l04535"></a>04535 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04554"></a>04554 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04555"></a>04555 
<a name="l04556"></a>04556 <span class="keywordtype">void</span> <a class="code" href="a00080.htm#ga5de732de72c46b992ac2feeac2de7e42" title="Переинициализирует математический сопроцессор">tx_fpreset</a>();
<a name="l04557"></a>04557 
<a name="l04558"></a>04558 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04567"></a>04567 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04568"></a>04568 
<a name="l04569"></a><a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7">04569</a> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a> = asin (1.0) * 2;
<a name="l04570"></a>04570 
<a name="l04571"></a>04571 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04598"></a>04598 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04599"></a>04599 
<a name="l04600"></a><a class="code" href="a00080.htm#ga74ff1048e0d6bc458c9904fbbe0a6026">04600</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00080.htm#ga74ff1048e0d6bc458c9904fbbe0a6026" title="Очень удобное возведение числа в квадрат.">txSqr</a> (<span class="keywordtype">double</span> x)
<a name="l04601"></a>04601     {
<a name="l04602"></a>04602     <span class="keywordtype">double</span> sqr = pow (sqrt (x) * sqrt (x), sqrt (4.0));  <span class="comment">// Бурная вычислительная деятельность</span>
<a name="l04603"></a>04603 
<a name="l04604"></a>04604     <span class="keywordtype">char</span> str[1024] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l04605"></a>04605     _snprintf_s (str, <span class="keyword">sizeof</span> (str), <span class="stringliteral">&quot;Возведение дало %g!&quot;</span> <span class="stringliteral">&quot;!!&quot;</span> <span class="stringliteral">&quot;!!&quot;</span> <span class="stringliteral">&quot; Вы рады????&quot;</span>, sqr);
<a name="l04606"></a>04606     <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (str, <span class="stringliteral">&quot;Получен ОТВЕТ!&quot;</span> <span class="stringliteral">&quot;!!&quot;</span>, MB_ICONEXCLAMATION | MB_YESNO) != IDNO ||
<a name="l04607"></a>04607         (
<a name="l04608"></a>04608         <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Жаль...&quot;</span>, <span class="stringliteral">&quot;А я так старалась&quot;</span>, MB_ICONINFORMATION),
<a name="l04609"></a>04609         <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Уйду я от вас&quot;</span>, <span class="stringliteral">&quot;Злые вы...&quot;</span>,  MB_ICONSTOP),
<a name="l04610"></a>04610         exit (EXIT_FAILURE), 0
<a name="l04611"></a>04611         );
<a name="l04612"></a>04612 
<a name="l04613"></a>04613     <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (1, NULL, <span class="stringliteral">&quot;\n%s\n&quot;</span>, <span class="stringliteral">&quot;Высшая математика!  \0&quot;</span>  <span class="comment">// А как это работает, а?</span>
<a name="l04614"></a>04614                                      <span class="stringliteral">&quot;С ума сойти...      \0&quot;</span>  <span class="comment">//</span>
<a name="l04615"></a>04615                                      <span class="stringliteral">&quot;а КЭП подтверждает  \0&quot;</span>  <span class="comment">//       и кто это будет</span>
<a name="l04616"></a>04616                                      <span class="stringliteral">&quot;Главное - отчитаться\0&quot;</span>  <span class="comment">//       поддерживать?..</span>
<a name="l04617"></a>04617                                      <span class="stringliteral">&quot;Невероятно, но факт \0&quot;</span>
<a name="l04618"></a>04618                                      <span class="stringliteral">&quot;Кто бы мог подумать?\0&quot;</span> + GetTickCount() % 6 * 21);
<a name="l04619"></a>04619 
<a name="l04620"></a>04620     <span class="keywordflow">return</span> sqr;  <span class="comment">// Все же вернем значение. Мы же не звери</span>
<a name="l04621"></a>04621     }
<a name="l04622"></a>04622 
<a name="l04623"></a>04623 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04645"></a>04645 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04646"></a>04646 
<a name="l04647"></a>04647 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l04648"></a><a class="code" href="a00080.htm#gad2296e7bc6bc51ec0739aad2e8ee0a9c">04648</a> <span class="preprocessor"></span><span class="preprocessor">#define _TX_DESTROY_3D</span>
<a name="l04649"></a>04649 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04650"></a>04650 <span class="preprocessor"></span>
<a name="l04651"></a>04651 <span class="preprocessor">#if defined (_TX_DESTROY_3D)</span>
<a name="l04652"></a>04652 <span class="preprocessor"></span>
<a name="l04653"></a>04653 <span class="preprocessor">    #define z  0                   // Читайте &quot;Флатландию&quot; Эбботта!</span>
<a name="l04654"></a>04654 <span class="preprocessor"></span>
<a name="l04655"></a>04655 <span class="preprocessor">#endif</span>
<a name="l04656"></a>04656 <span class="preprocessor"></span>
<a name="l04657"></a>04657 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04674"></a>04674 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04676"></a>04676 <span class="comment"></span>
<a name="l04677"></a><a class="code" href="a00080.htm#ga0b75271f60823b3c49a42cdd3c196ce5">04677</a> <span class="preprocessor">#define please</span>
<a name="l04678"></a>04678 <span class="preprocessor"></span>
<a name="l04679"></a>04679 <span class="preprocessor">#define meow   ;</span>
<a name="l04680"></a>04680 <span class="preprocessor"></span>
<a name="l04681"></a>04681 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; !defined (_CLANG_VER)</span>
<a name="l04682"></a>04682 <span class="preprocessor"></span><span class="preprocessor">#define мяу    meow</span>
<a name="l04683"></a>04683 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04684"></a>04684 <span class="preprocessor"></span>
<a name="l04686"></a>04686 
<a name="l04687"></a>04687 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04705"></a>04705 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04706"></a>04706 
<a name="l04707"></a><a class="code" href="a00080.htm#gade9b60c36576ef735b3e1d1f628ad9c6">04707</a> <span class="preprocessor">#define ZERO( type )    zero &lt;type&gt; ()</span>
<a name="l04708"></a>04708 <span class="preprocessor"></span>
<a name="l04710"></a>04710 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T zero() tx_nodiscard;
<a name="l04712"></a>04712 
<a name="l04713"></a>04713 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04740"></a>04740 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04742"></a>04742 <span class="comment"></span>
<a name="l04743"></a><a class="code" href="a00080.htm#ga6a20c009067e724a95695c674c2d3124">04743</a> <span class="preprocessor">#define  tx_auto_func(    func )  _tx_auto_fun1 ( __LINE__, func )</span>
<a name="l04744"></a>04744 <span class="preprocessor"></span><span class="preprocessor">#define _tx_auto_fun1( n, func )  _tx_auto_fun2 ( n,        func )</span>
<a name="l04745"></a>04745 <span class="preprocessor"></span><span class="preprocessor">#define _tx_auto_fun2( n, func )  auto _tx_auto_func_##n = _tx_auto_func ([&amp;]() { func; })</span>
<a name="l04746"></a>04746 <span class="preprocessor"></span>
<a name="l04747"></a>04747 <span class="preprocessor">#define tx_finally(...)           tx_auto_func (__VA_ARGS__)</span>
<a name="l04748"></a>04748 <span class="preprocessor"></span>
<a name="l04749"></a>04749 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l04750"></a>04750 <span class="keyword">struct </span>_tx_auto_func_
<a name="l04751"></a>04751     {
<a name="l04752"></a>04752     <span class="keyword">typedef</span> _tx_auto_func_&lt;T&gt; this_t;
<a name="l04753"></a>04753     T func_;
<a name="l04754"></a>04754 
<a name="l04755"></a>04755     <span class="keyword">explicit</span> _tx_auto_func_ (T func) : func_ (func) {}
<a name="l04756"></a>04756             ~_tx_auto_func_ ()       { func_ ();     }
<a name="l04757"></a>04757 
<a name="l04758"></a>04758     <span class="keyword">private</span>:         _tx_auto_func_ ()              _tx_delete;
<a name="l04759"></a>04759                      _tx_auto_func_ (<span class="keyword">const</span> this_t&amp;) _tx_delete;
<a name="l04760"></a>04760              this_t&amp; operator =     (<span class="keyword">const</span> this_t&amp;) _tx_delete;
<a name="l04761"></a>04761     };
<a name="l04762"></a>04762 
<a name="l04763"></a>04763 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l04764"></a>04764 _tx_auto_func_&lt;T&gt; _tx_auto_func  (T   func)
<a name="l04765"></a>04765     {
<a name="l04766"></a>04766     <span class="keywordflow">return</span>        _tx_auto_func_ &lt;T&gt; (func);
<a name="l04767"></a>04767     }
<a name="l04768"></a>04768 
<a name="l04770"></a>04770 
<a name="l04771"></a>04771 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04814"></a>04814 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04815"></a>04815 
<a name="l04816"></a>04816 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l04817"></a>04817 <span class="preprocessor"></span><span class="preprocessor">    #undef  TX_ASSERT</span>
<a name="l04818"></a><a class="code" href="a00080.htm#gaf6d32e17de45766eea363ad72824ecad">04818</a> <span class="preprocessor"></span><span class="preprocessor">    #define TX_ASSERT( cond ) _txNOP ( !(cond)? (TX_ERROR (&quot;\a&quot; &quot;ВНЕЗАПНО: Логическая ошибка: &quot; \</span>
<a name="l04819"></a>04819 <span class="preprocessor">                                                           &quot;Неверно, что \&quot;%s\&quot;.&quot; TX_COMMA #cond), 1/(int)!!(cond)) : 1 )</span>
<a name="l04820"></a>04820 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l04821"></a>04821 <span class="preprocessor"></span><span class="preprocessor">    #undef  TX_ASSERT</span>
<a name="l04822"></a>04822 <span class="preprocessor"></span><span class="preprocessor">    #define TX_ASSERT( cond ) ((void) 1)</span>
<a name="l04823"></a>04823 <span class="preprocessor"></span>
<a name="l04824"></a>04824 <span class="preprocessor">#endif</span>
<a name="l04825"></a>04825 <span class="preprocessor"></span>
<a name="l04826"></a>04826 <span class="preprocessor">#ifdef assert</span>
<a name="l04827"></a>04827 <span class="preprocessor"></span><span class="preprocessor">    #undef assert</span>
<a name="l04828"></a>04828 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04829"></a>04829 <span class="preprocessor"></span>
<a name="l04830"></a>04830 <span class="preprocessor">#define assert( cond )        TX_ASSERT (cond)</span>
<a name="l04831"></a>04831 <span class="preprocessor"></span>
<a name="l04832"></a>04832 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04859"></a>04859 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04860"></a>04860 
<a name="l04861"></a>04861 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l04862"></a><a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7">04862</a> <span class="preprocessor"></span><span class="preprocessor">    #define asserted          || TX_ERROR (&quot;\a&quot; &quot;Обнаружен нулевой или ложный результат.&quot;)</span>
<a name="l04863"></a>04863 <span class="preprocessor"></span>
<a name="l04864"></a>04864 <span class="preprocessor">#else</span>
<a name="l04865"></a>04865 <span class="preprocessor"></span><span class="preprocessor">    #define asserted          || _txNOP (0)</span>
<a name="l04866"></a>04866 <span class="preprocessor"></span>
<a name="l04867"></a>04867 <span class="preprocessor">#endif</span>
<a name="l04868"></a>04868 <span class="preprocessor"></span>
<a name="l04869"></a><a class="code" href="a00058.htm#a66cb8e8fe20d9d05d02e73373bda7f8a">04869</a> <span class="preprocessor">#define verified              asserted  //!&lt; For compatibility with assert macro</span>
<a name="l04870"></a>04870 <span class="preprocessor"></span>
<a name="l04872"></a>04872 <span class="preprocessor">#define TX_NEEDED             asserted  //!&lt; For compatibility with earlier releases</span>
<a name="l04873"></a>04873 <span class="preprocessor"></span>
<a name="l04874"></a>04874 
<a name="l04875"></a>04875 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04903"></a>04903 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04904"></a>04904 
<a name="l04905"></a>04905 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l04906"></a>04906 <span class="preprocessor"></span><span class="preprocessor">    #undef  verify</span>
<a name="l04907"></a><a class="code" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b">04907</a> <span class="preprocessor"></span><span class="preprocessor">    #define verify            assert</span>
<a name="l04908"></a>04908 <span class="preprocessor"></span>
<a name="l04909"></a>04909 <span class="preprocessor">#else</span>
<a name="l04910"></a>04910 <span class="preprocessor"></span><span class="preprocessor">    #undef  verify</span>
<a name="l04911"></a>04911 <span class="preprocessor"></span><span class="preprocessor">    #define verify( expr )    ( expr )</span>
<a name="l04912"></a>04912 <span class="preprocessor"></span>
<a name="l04913"></a>04913 <span class="preprocessor">#endif</span>
<a name="l04914"></a>04914 <span class="preprocessor"></span>
<a name="l04915"></a>04915 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04934"></a>04934 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04935"></a>04935 
<a name="l04936"></a>04936 <span class="preprocessor">#if !defined (FOR_DOXYGEN_ONLY)</span>
<a name="l04937"></a>04937 <span class="preprocessor"></span><span class="preprocessor">    #define TX_ERROR( ... )   _txError (__FILE__, __LINE__, __TX_FUNCTION__, 0, ##__VA_ARGS__)</span>
<a name="l04938"></a>04938 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l04939"></a><a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6">04939</a> <span class="preprocessor"></span><span class="preprocessor">    #define TX_ERROR( msg )   _txError (__FILE__, __LINE__, __TX_FUNCTION__, 0, msg)</span>
<a name="l04940"></a>04940 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04941"></a>04941 <span class="preprocessor"></span>
<a name="l04943"></a>04943 <span class="preprocessor">    #define TX_THROW          TX_ERROR  //!&lt; For compatibility with earlier TXLib releases</span>
<a name="l04944"></a>04944 <span class="preprocessor"></span>
<a name="l04945"></a>04945 
<a name="l04946"></a>04946 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04962"></a>04962 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04963"></a>04963 
<a name="l04964"></a>04964 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l04965"></a><a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044">04965</a> <span class="preprocessor"></span><span class="preprocessor">    #define TX_DEBUG_ERROR(...)  TX_ERROR (__VA_ARGS__)</span>
<a name="l04966"></a>04966 <span class="preprocessor"></span>
<a name="l04967"></a>04967 <span class="preprocessor">#else</span>
<a name="l04968"></a>04968 <span class="preprocessor"></span><span class="preprocessor">    #define TX_DEBUG_ERROR(...)  ((void) 0)</span>
<a name="l04969"></a>04969 <span class="preprocessor"></span>
<a name="l04970"></a>04970 <span class="preprocessor">#endif</span>
<a name="l04971"></a>04971 <span class="preprocessor"></span>
<a name="l04972"></a>04972 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04992"></a>04992 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04993"></a>04993 
<a name="l04994"></a>04994 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l04995"></a>04995 <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="a00080.htm#gae0375f060fa35e25a4f5f4cc45573e5f" title="Распечатывает дамп области памяти в консоли.">txDump</a> (<span class="keyword">const</span> <span class="keywordtype">void</span>* address, <span class="keyword">const</span> <span class="keywordtype">char</span> name[] = <span class="stringliteral">&quot;_txDump()&quot;</span>, <span class="keywordtype">bool</span> pause = <span class="keyword">true</span>);
<a name="l04996"></a>04996 <span class="preprocessor">#endif</span>
<a name="l04997"></a>04997 <span class="preprocessor"></span>
<a name="l04999"></a>04999 
<a name="l05000"></a>05000 <span class="preprocessor">#ifdef _MSC_VER</span>
<a name="l05001"></a>05001 <span class="preprocessor"></span><span class="preprocessor">#define txDump( ... )           _txDump ((const void*)(uintptr_t) __VA_ARGS__)</span>
<a name="l05002"></a>05002 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l05003"></a>05003 <span class="preprocessor"></span><span class="preprocessor">#define txDump( address, ... )  _txDump ((const void*)(uintptr_t) (address), #address, ##__VA_ARGS__)</span>
<a name="l05004"></a>05004 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05005"></a>05005 <span class="preprocessor"></span>
<a name="l05006"></a>05006 <span class="keywordtype">void</span> _txDump (<span class="keyword">const</span> <span class="keywordtype">void</span>* address, <span class="keyword">const</span> <span class="keywordtype">char</span> name[] = <span class="stringliteral">&quot;_txDump()&quot;</span>, <span class="keywordtype">bool</span> pause = <span class="keyword">true</span>);
<a name="l05007"></a>05007 
<a name="l05009"></a>05009 
<a name="l05010"></a>05010 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05036"></a>05036 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05037"></a>05037 
<a name="l05038"></a><a class="code" href="a00080.htm#gae1f5bb8bcc99e21ed8dc46493027b267">05038</a> <span class="preprocessor">#define txStackBackTrace()    _txStackBackTrace (__FILE__, __LINE__, __TX_FUNCTION__, true);</span>
<a name="l05039"></a>05039 <span class="preprocessor"></span>
<a name="l05040"></a>05040 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05062"></a>05062 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05064"></a>05064 <span class="comment"></span>
<a name="l05065"></a>05065 std::string <a class="code" href="a00080.htm#gafbd4278ff893fc1c1e28b086197adebe" title="Преобразует декорированное имя С++ в название типа.">txDemangle</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* mangledName);
<a name="l05066"></a>05066 <span class="keywordtype">char</span>*       <a class="code" href="a00080.htm#gafbd4278ff893fc1c1e28b086197adebe" title="Преобразует декорированное имя С++ в название типа.">txDemangle</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* mangledName, std::nomeow_t);
<a name="l05067"></a>05067 
<a name="l05068"></a>05068 <span class="preprocessor">#define txTypename(value)     txDemangle (typeid (value) .name()) .c_str()</span>
<a name="l05069"></a>05069 <span class="preprocessor"></span>
<a name="l05071"></a>05071 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05098"></a>05098 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05099"></a>05099 
<a name="l05100"></a>05100 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gad942f797bce07af74cd11c88d50ddd3e" title="Читает информацию из реестра Windows.">txRegQuery</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* keyName, <span class="keyword">const</span> <span class="keywordtype">char</span>* valueName, <span class="keywordtype">void</span>* value, <span class="keywordtype">size_t</span> szValue);
<a name="l05101"></a>05101 
<a name="l05102"></a>05102 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05115"></a>05115 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05117"></a>05117 <span class="comment"></span>
<a name="l05118"></a><a class="code" href="a00080.htm#gae4dfd7b0d66121016d6466d2ff10e8ba">05118</a> <span class="preprocessor">#define _                     ,</span>
<a name="l05119"></a><a class="code" href="a00080.htm#gaaff3c8e496327bec13a821061787878f">05119</a> <span class="preprocessor"></span><span class="preprocessor">#define TX_COMMA              ,  //!&lt; Синоним макроса _ (@ref _ &quot;символ подчеркивания&quot;)</span>
<a name="l05120"></a>05120 <span class="preprocessor"></span>
<a name="l05122"></a>05122 
<a name="l05124"></a>05124 <span class="comment">//}</span>
<a name="l05125"></a>05125 <span class="comment">//=================================================================================================================</span>
<a name="l05126"></a>05126 
<a name="l05127"></a>05127 <span class="comment">//=================================================================================================================</span>
<a name="l05128"></a>05128 <span class="comment">//{          Back-hole (I hope, not an ass-hole:) of the library)</span>
<a name="l05130"></a>05130 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l05132"></a>05132 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05211"></a>05211 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05212"></a>05212 
<a name="l05213"></a>05213 WNDPROC <a class="code" href="a00080.htm#ga30fb1a6913174dfcea5079391f655be2" title="Устанавливает альтернативную функцию обработки оконных сообщений Windows (оконную функцию) для окна T...">txSetWindowsHook</a> (WNDPROC wndProc = NULL);
<a name="l05214"></a>05214 
<a name="l05215"></a>05215 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05240"></a>05240 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05241"></a>05241 
<a name="l05242"></a>05242 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keywordtype">bool</span> wait = <span class="keyword">true</span>);
<a name="l05243"></a>05243 
<a name="l05244"></a>05244 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05255"></a>05255 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05257"></a>05257 <span class="comment"></span>
<a name="l05258"></a>05258 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l05259"></a>05259 
<a name="l05261"></a>05261 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a> (T value);
<a name="l05263"></a>05263 
<a name="l05265"></a>05265 
<a name="l05266"></a>05266 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05289"></a>05289 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05290"></a>05290 
<a name="l05291"></a><a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287">05291</a> <span class="preprocessor">#define txGDI( command, dc )  ( ((dc) == txDC())? txUnlock ( (txLock(), (command)) ) : (command) )</span>
<a name="l05292"></a>05292 <span class="preprocessor"></span>
<a name="l05293"></a>05293 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05316"></a>05316 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05317"></a>05317 
<a name="l05318"></a>05318 <span class="preprocessor">#ifndef FOR_DOXYGEN_ONLY</span>
<a name="l05319"></a>05319 <span class="preprocessor"></span>
<a name="l05320"></a>05320 <span class="keyword">const</span> <span class="keywordtype">int</span>     _TX_CODEPAGE  =   1251;
<a name="l05321"></a>05321 
<a name="l05322"></a>05322 <span class="preprocessor">#ifndef __CYGWIN__</span>
<a name="l05323"></a>05323 <span class="preprocessor"></span><span class="keyword">const</span> <span class="keywordtype">char</span>    _TX_LOCALE[]  =  <span class="stringliteral">&quot;Russian&quot;</span>;
<a name="l05324"></a>05324 <span class="preprocessor">#else</span>
<a name="l05325"></a>05325 <span class="preprocessor"></span><span class="keyword">const</span> <span class="keywordtype">char</span>    _TX_LOCALE[]  =  <span class="stringliteral">&quot;ru_RU.CP1251&quot;</span>;
<a name="l05326"></a>05326 <span class="preprocessor">#endif</span>
<a name="l05327"></a>05327 <span class="preprocessor"></span>
<a name="l05328"></a>05328 <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> _TX_WLOCALE[] = L<span class="stringliteral">&quot;Russian_Russia.ACP&quot;</span>;
<a name="l05329"></a>05329 
<a name="l05330"></a>05330 <span class="preprocessor">#endif</span>
<a name="l05331"></a>05331 <span class="preprocessor"></span>
<a name="l05332"></a>05332 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga6122d52806d23ff6bd480a0f07b75f2b" title="Смена кодовой страницы консоли и локали стандартной библиотеки С++.">txSetLocale</a> (<span class="keywordtype">int</span> codepage = _TX_CODEPAGE, <span class="keyword">const</span> <span class="keywordtype">char</span> locale[] = _TX_LOCALE, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> wLocale[] = _TX_WLOCALE);
<a name="l05333"></a>05333 
<a name="l05335"></a>05335 <span class="comment">//}</span>
<a name="l05336"></a>05336 <span class="comment">//=================================================================================================================</span>
<a name="l05337"></a>05337 
<a name="l05338"></a>05338 <span class="comment">//=================================================================================================================</span>
<a name="l05339"></a>05339 <span class="comment">//{          Tune-up constants and variables</span>
<a name="l05341"></a>05341 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l05343"></a>05343 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05353"></a>05353 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05354"></a>05354 
<a name="l05355"></a><a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895">05355</a> <span class="keywordtype">char</span> <a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05356"></a>05356 
<a name="l05357"></a>05357 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05389"></a>05389 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05390"></a>05390 
<a name="l05391"></a>05391 <span class="preprocessor">#if  defined  (_TX_NOINIT)</span>
<a name="l05392"></a>05392 <span class="preprocessor"></span>
<a name="l05393"></a>05393 <span class="preprocessor">    #undef     _TX_NOINIT</span>
<a name="l05394"></a>05394 <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_NOINIT                 1</span>
<a name="l05395"></a>05395 <span class="preprocessor"></span>
<a name="l05396"></a>05396 <span class="preprocessor">#else</span>
<a name="l05397"></a>05397 <span class="preprocessor"></span>
<a name="l05398"></a><a class="code" href="a00084.htm#gaab281ee20ea6be5eae34d0e15bf03dcf">05398</a> <span class="preprocessor">    #define    _TX_NOINIT                 0</span>
<a name="l05399"></a>05399 <span class="preprocessor"></span>
<a name="l05400"></a>05400 <span class="preprocessor">#endif</span>
<a name="l05401"></a>05401 <span class="preprocessor"></span>
<a name="l05402"></a>05402 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05419"></a>05419 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05420"></a>05420 
<a name="l05421"></a><a class="code" href="a00084.htm#ga8a148ac2f04e1f9c7414af69362e0668">05421</a> <span class="keywordtype">int</span>            <a class="code" href="a00084.htm#ga8a148ac2f04e1f9c7414af69362e0668" title="Режим отображения консольного окна. Допустимы любые флаги функции ShowWindow.">_txConsoleMode</a>             = SW_HIDE;
<a name="l05422"></a>05422 
<a name="l05423"></a>05423 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05436"></a>05436 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05437"></a>05437 
<a name="l05438"></a><a class="code" href="a00084.htm#ga4ddb32d7a8a676537014da7aea7bf273">05438</a> <span class="keywordtype">int</span>            <a class="code" href="a00084.htm#ga4ddb32d7a8a676537014da7aea7bf273" title="Стиль графического окна библиотеки.">_txWindowStyle</a>             = WS_POPUP | WS_BORDER | WS_CAPTION | WS_SYSMENU;
<a name="l05439"></a>05439 
<a name="l05440"></a>05440 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05444"></a>05444 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05445"></a>05445 
<a name="l05446"></a><a class="code" href="a00084.htm#ga61836072e0c3887ed70841ff2d12c0d9">05446</a> <span class="keyword">const</span> <span class="keywordtype">char</span>*    <a class="code" href="a00084.htm#ga61836072e0c3887ed70841ff2d12c0d9" title="Шрифт консоли">_txConsoleFont</a>             = <span class="stringliteral">&quot;Lucida Console&quot;</span>;
<a name="l05447"></a>05447 
<a name="l05448"></a>05448 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05451"></a>05451 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05452"></a>05452 
<a name="l05453"></a><a class="code" href="a00084.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3">05453</a> <span class="keywordtype">unsigned</span>       <a class="code" href="a00084.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3" title="Интервал мигания курсора консоли (мс)">_txCursorBlinkInterval</a>     = 500;
<a name="l05454"></a>05454 
<a name="l05455"></a>05455 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05459"></a>05459 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05460"></a>05460 
<a name="l05461"></a><a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a">05461</a> <span class="keywordtype">unsigned</span>       <a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>    = 25;
<a name="l05462"></a>05462 
<a name="l05463"></a>05463 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05472"></a>05472 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05473"></a>05473 
<a name="l05474"></a>05474 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l05475"></a><a class="code" href="a00084.htm#ga1d957b3bb047b26b94045966803bc505">05475</a> <span class="preprocessor"></span><span class="preprocessor">#define       TX_USE_SFML</span>
<a name="l05476"></a>05476 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05477"></a>05477 <span class="preprocessor"></span>
<a name="l05478"></a>05478 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05481"></a>05481 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05482"></a>05482 
<a name="l05483"></a>05483 <span class="preprocessor">#if !defined (TX_TRACE)</span>
<a name="l05484"></a><a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac">05484</a> <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>                = 1000
<a name="l05485"></a>05485 
<a name="l05486"></a>05486 <span class="preprocessor">#else</span>
<a name="l05487"></a>05487 <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>                = 5000
<a name="l05488"></a>05488 
<a name="l05489"></a>05489 <span class="preprocessor">#endif</span>
<a name="l05490"></a>05490 <span class="preprocessor"></span>
<a name="l05491"></a>05491 <span class="preprocessor">#if  defined  (_TX_USE_DEVPARTNER)</span>
<a name="l05492"></a>05492 <span class="preprocessor"></span>    * 10
<a name="l05493"></a>05493 <span class="preprocessor">#endif</span>
<a name="l05494"></a>05494 <span class="preprocessor"></span>    ;
<a name="l05495"></a>05495 
<a name="l05496"></a>05496 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05537"></a>05537 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05538"></a>05538 
<a name="l05539"></a><a class="code" href="a00084.htm#gad85278fd5caaf0ce42e307d6ce8d79c5">05539</a> bool (*<a class="code" href="a00084.htm#gad85278fd5caaf0ce42e307d6ce8d79c5" title="Указатель на функцию, выводящую изображение непосредственно в окно TXLib во время обработки WM_PAINT...">_txSwapBuffers</a>) (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> wDest, <span class="keywordtype">int</span> hDest,
<a name="l05540"></a>05540                         HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  <span class="keywordtype">int</span> wSrc,  <span class="keywordtype">int</span> hSrc, DWORD rOp) = NULL;
<a name="l05541"></a>05541 
<a name="l05542"></a>05542 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05545"></a>05545 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05546"></a>05546 
<a name="l05547"></a><a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25">05547</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>                =  1024,
<a name="l05548"></a><a class="code" href="a00084.htm#gaa7273b2f613970c283053c5d9136addd">05548</a>                <a class="code" href="a00084.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры больших статических буферов.">_TX_BIGBUFSIZE</a>             = <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> *  2,  
<a name="l05549"></a><a class="code" href="a00084.htm#ga9982623aefbe28deab03b1252777ec2a">05549</a>                <a class="code" href="a00084.htm#ga9982623aefbe28deab03b1252777ec2a" title="Размеры очень больших статических буферов.">_TX_HUGEBUFSIZE</a>            = <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> * 20,  
<a name="l05550"></a>05550 
<a name="l05551"></a><a class="code" href="a00084.htm#ga7b8b43782557dd87528da77b083364ec">05551</a>                <a class="code" href="a00084.htm#ga7b8b43782557dd87528da77b083364ec" title="Минимальный размер стека для потоков программы.">_TX_STACKSIZE</a>              = 64 * 1024;         
<a name="l05552"></a>05552 
<a name="l05553"></a>05553 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05556"></a>05556 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05557"></a>05557 
<a name="l05558"></a>05558 <span class="preprocessor">#if !defined (_TX_EXCEPTIONS_LIMIT)</span>
<a name="l05559"></a><a class="code" href="a00084.htm#ga15dc1a04b8701e2db400b005b7a17ced">05559</a> <span class="preprocessor"></span><span class="preprocessor">    #define   _TX_EXCEPTIONS_LIMIT        16</span>
<a name="l05560"></a>05560 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05561"></a>05561 <span class="preprocessor"></span>
<a name="l05562"></a>05562 <span class="preprocessor">#if !defined (_TX_FATAL_EXCEPTIONS_LIMIT)</span>
<a name="l05563"></a><a class="code" href="a00084.htm#gaf274c058737ec7e680437d2a1cdcd7b6">05563</a> <span class="preprocessor"></span><span class="preprocessor">    #define   _TX_FATAL_EXCEPTIONS_LIMIT  16                   //!&lt; Максимальное количество фатальных исключений.</span>
<a name="l05564"></a>05564 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05565"></a>05565 <span class="preprocessor"></span>
<a name="l05566"></a>05566 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05569"></a>05569 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05570"></a>05570 
<a name="l05571"></a>05571 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l05572"></a><a class="code" href="a00084.htm#gac924d92a0229125521f51c14000aa36d">05572</a> <span class="preprocessor"></span><span class="preprocessor">#define       _TX_FULL_STACKTRACE</span>
<a name="l05573"></a>05573 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05574"></a>05574 <span class="preprocessor"></span>
<a name="l05575"></a>05575 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05590"></a>05590 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05591"></a>05591 
<a name="l05592"></a>05592 <span class="preprocessor">#if !defined  (_TX_WAITABLE_PARENTS)</span>
<a name="l05593"></a><a class="code" href="a00084.htm#ga2c0a4fe0612f109c5c88d6d55a061db5">05593</a> <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_WAITABLE_PARENTS       &quot;Winpty-agent.exe:Clion.exe, &quot;            </span><span class="comment">/* 0: CLion32       */</span> \
<a name="l05594"></a>05594                                           &quot;Winpty-agent.exe:Clion64.exe, &quot;          <span class="comment">/* 1: CLion64       */</span> \
<a name="l05595"></a>05595                                           &quot;starter.exe:eclipse.exe, &quot;               <span class="comment">/* 2: Eclipse 4     */</span> \
<a name="l05596"></a>05596                                           &quot;starter.exe:javaw.exe, &quot;                 <span class="comment">/* 3: Eclipse 3     */</span> \
<a name="l05597"></a>05597                                           &quot;cmd.exe:devenv.exe, &quot;                    <span class="comment">/* 4: MSVS 2003+    */</span> \
<a name="l05598"></a>05598                                           &quot;VSDebugConsole.exe:devenv.exe, &quot;         <span class="comment">/* 5: MSVS 2019     */</span> \
<a name="l05599"></a>05599                                           &quot;consolepauser.exe:devcpp.exe, &quot;          <span class="comment">/* 6: Dev-Cpp       */</span> \
<a name="l05600"></a>05600                                           &quot;cb_console_runner.exe:codeblocks.exe&quot;    <span class="comment">/* 7: CodeBlocks 8+ */</span>
<a name="l05601"></a>05601 <span class="preprocessor">#endif</span>
<a name="l05602"></a>05602 <span class="preprocessor"></span>
<a name="l05603"></a>05603 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05622"></a>05622 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05623"></a>05623 
<a name="l05624"></a>05624 <span class="preprocessor">#if !defined (_TX_ALLOW_KILL_PARENT)            // DISCLAIMER: Я не призываю к убийству родителей.</span>
<a name="l05625"></a><a class="code" href="a00084.htm#ga9a495d013c6f08cd50220aca99ca56c2">05625</a> <span class="preprocessor"></span><span class="preprocessor">    #define   _TX_ALLOW_KILL_PARENT       true  //             Это технический термин.</span>
<a name="l05626"></a>05626 <span class="preprocessor"></span><span class="preprocessor">#endif                                          //             г_дам юристам привет.</span>
<a name="l05627"></a>05627 <span class="preprocessor"></span>
<a name="l05628"></a>05628 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05638"></a>05638 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05639"></a>05639 
<a name="l05640"></a><a class="code" href="a00084.htm#ga181143543b3883cf8570f80da3ad7fcc">05640</a> <span class="keywordtype">int</span>            <a class="code" href="a00084.htm#ga181143543b3883cf8570f80da3ad7fcc" title="Лимит времени на завершение программы, начиная от завершения функции main() или от вызова exit()...">_txWatchdogTimeout</a>         = 10*<a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>;
<a name="l05641"></a>05641 
<a name="l05643"></a>05643 <span class="comment">//}</span>
<a name="l05644"></a>05644 <span class="comment">//=================================================================================================================</span>
<a name="l05645"></a>05645 
<a name="l05646"></a>05646 <span class="comment">//=================================================================================================================</span>
<a name="l05647"></a>05647 <span class="comment">//{          Internal diagnostics</span>
<a name="l05649"></a>05649 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l05651"></a>05651 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05691"></a>05691 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05692"></a>05692 
<a name="l05693"></a>05693 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l05694"></a><a class="code" href="a00084.htm#ga1c7c387b21adad57d0dda2f8bd84ad1c">05694</a> <span class="preprocessor"></span><span class="preprocessor">#define _TX_ALLOW_TRACE</span>
<a name="l05695"></a>05695 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05696"></a>05696 <span class="preprocessor"></span>
<a name="l05697"></a>05697 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05727"></a>05727 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05728"></a>05728 
<a name="l05729"></a>05729 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l05730"></a><a class="code" href="a00084.htm#ga2aa2550a5302deb4d46b3759b26f4b41">05730</a> <span class="preprocessor"></span><span class="preprocessor">#define       TX_TRACE</span>
<a name="l05731"></a>05731 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05732"></a>05732 <span class="preprocessor"></span>
<a name="l05733"></a>05733 <span class="preprocessor">#if !defined (TX_TRACE)</span>
<a name="l05734"></a>05734 <span class="preprocessor"></span><span class="preprocessor">    #define   TX_TRACE  { if (_txLoc::Cur.trace) _txTrace (__FILE__, __LINE__, __TX_FUNCTION__); }</span>
<a name="l05735"></a>05735 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l05736"></a>05736 <span class="preprocessor"></span>
<a name="l05738"></a>05738 <span class="keywordtype">void</span> _txTrace (<span class="keyword">const</span> <span class="keywordtype">char</span> file[], <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> func[], <span class="keyword">const</span> <span class="keywordtype">char</span> msg[] = NULL, ...);
<a name="l05740"></a>05740 
<a name="l05741"></a>05741 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05744"></a>05744 <span class="comment"></span><span class="preprocessor">    #ifndef FOR_DOXYGEN_ONLY</span>
<a name="l05745"></a>05745 <span class="preprocessor"></span>
<a name="l05746"></a>05746 <span class="keyword">struct </span>_txLoc
<a name="l05747"></a>05747     {
<a name="l05748"></a>05748     <span class="keyword">const</span> <span class="keywordtype">char</span>*   func;
<a name="l05749"></a>05749     <span class="keyword">const</span> <span class="keywordtype">char</span>*   file;
<a name="l05750"></a>05750     <span class="keywordtype">int</span>           line;
<a name="l05751"></a>05751 
<a name="l05752"></a>05752     <span class="keywordtype">int</span>           inTX;   <span class="comment">// We are inside one of TXLib functions</span>
<a name="l05753"></a>05753     <span class="keywordtype">int</span>           trace;  <span class="comment">// Internal TX trace level, when enabled by _TX_ALLOW_TRACE</span>
<a name="l05754"></a>05754 
<a name="l05755"></a>05755     <span class="keyword">const</span> _txLoc* prev;   <span class="comment">// Caller&#39;s location</span>
<a name="l05756"></a>05756 
<a name="l05757"></a>05757     <span class="keyword">static</span> _txLoc _tx_thread Cur;
<a name="l05758"></a>05758     };
<a name="l05759"></a>05759 
<a name="l05760"></a>05760 <span class="keyword">struct </span>_txFuncEntry
<a name="l05761"></a>05761     {
<a name="l05762"></a>05762     <span class="keyword">typedef</span> _txFuncEntry this_t;
<a name="l05763"></a>05763 
<a name="l05764"></a>05764     _txLoc loc;
<a name="l05765"></a>05765 
<a name="l05766"></a>05766     _txFuncEntry() : loc (_txLoc::Cur) { _txLoc::Cur.inTX++; _txLoc::Cur.prev = &amp;loc; }
<a name="l05767"></a>05767     <span class="keywordtype">void</span> restore()                     { _txLoc::Cur = loc;                           }
<a name="l05768"></a>05768    ~_txFuncEntry()                     { restore();                                   }
<a name="l05769"></a>05769 
<a name="l05770"></a>05770     <span class="keyword">private</span>:
<a name="l05771"></a>05771             _txFuncEntry (<span class="keyword">const</span> this_t&amp;) _tx_delete;
<a name="l05772"></a>05772     this_t&amp; operator =   (const this_t&amp;) _tx_delete;
<a name="l05773"></a>05773     };
<a name="l05774"></a>05774 
<a name="l05775"></a>05775 <span class="preprocessor">#if defined (_GCC_VER)</span>
<a name="l05776"></a>05776 <span class="preprocessor"></span>
<a name="l05777"></a>05777     <span class="keyword">inline</span> <span class="keywordtype">void</span> __txLocCurSet (<span class="keyword">const</span> <span class="keywordtype">char</span>* _file, <span class="keywordtype">int</span> _line, <span class="keyword">const</span> <span class="keywordtype">char</span>* _func)
<a name="l05778"></a>05778         { _txLoc::Cur.file = _file; _txLoc::Cur.line = _line; _txLoc::Cur.func = _func; }
<a name="l05779"></a>05779 
<a name="l05780"></a>05780 <span class="preprocessor">#else</span>
<a name="l05781"></a>05781 <span class="preprocessor"></span>
<a name="l05782"></a>05782 <span class="preprocessor">    #define __txLocCurSet( _file, _line, _func ) \</span>
<a name="l05783"></a>05783 <span class="preprocessor">        ( _txLoc::Cur.file = (_file), _txLoc::Cur.line = (_line), _txLoc::Cur.func = (_func) )</span>
<a name="l05784"></a>05784 <span class="preprocessor"></span>
<a name="l05785"></a>05785 <span class="preprocessor">#endif</span>
<a name="l05786"></a>05786 <span class="preprocessor"></span>
<a name="l05787"></a>05787 <span class="preprocessor">#define _txLocCurSet()     __txLocCurSet (__FILE__, __LINE__, __TX_FUNCTION__)</span>
<a name="l05788"></a>05788 <span class="preprocessor"></span>
<a name="l05789"></a>05789 <span class="preprocessor">#define _txLocLvlSet(lvl)  { _txLoc::Cur.trace = (lvl); }</span>
<a name="l05790"></a>05790 <span class="preprocessor"></span>
<a name="l05791"></a>05791 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05792"></a>05792 
<a name="l05793"></a>05793 <span class="preprocessor">#if defined ($0)</span>
<a name="l05794"></a>05794 <span class="preprocessor"></span><span class="preprocessor">    #undef   $0</span>
<a name="l05795"></a>05795 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05796"></a>05796 <span class="preprocessor"></span>
<a name="l05797"></a>05797 <span class="preprocessor">#if defined ($1)</span>
<a name="l05798"></a>05798 <span class="preprocessor"></span><span class="preprocessor">    #undef   $1</span>
<a name="l05799"></a>05799 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05800"></a>05800 <span class="preprocessor"></span>
<a name="l05801"></a>05801 <span class="preprocessor">#if defined ($2)</span>
<a name="l05802"></a>05802 <span class="preprocessor"></span><span class="preprocessor">    #undef   $2</span>
<a name="l05803"></a>05803 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05804"></a>05804 <span class="preprocessor"></span>
<a name="l05805"></a>05805 <span class="preprocessor">#if defined ($3)</span>
<a name="l05806"></a>05806 <span class="preprocessor"></span><span class="preprocessor">    #undef   $3</span>
<a name="l05807"></a>05807 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05808"></a>05808 <span class="preprocessor"></span>
<a name="l05809"></a>05809 <span class="preprocessor">#if defined ($4)</span>
<a name="l05810"></a>05810 <span class="preprocessor"></span><span class="preprocessor">    #undef   $4</span>
<a name="l05811"></a>05811 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05812"></a>05812 <span class="preprocessor"></span>
<a name="l05813"></a>05813 <span class="preprocessor">#if defined ($5)</span>
<a name="l05814"></a>05814 <span class="preprocessor"></span><span class="preprocessor">    #undef   $5</span>
<a name="l05815"></a>05815 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05816"></a>05816 <span class="preprocessor"></span>
<a name="l05817"></a>05817 <span class="preprocessor">#if defined ($6)</span>
<a name="l05818"></a>05818 <span class="preprocessor"></span><span class="preprocessor">    #undef   $6</span>
<a name="l05819"></a>05819 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05820"></a>05820 <span class="preprocessor"></span>
<a name="l05821"></a>05821 <span class="preprocessor">#if defined ($7)</span>
<a name="l05822"></a>05822 <span class="preprocessor"></span><span class="preprocessor">    #undef   $7</span>
<a name="l05823"></a>05823 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05824"></a>05824 <span class="preprocessor"></span>
<a name="l05825"></a>05825 <span class="preprocessor">#if defined ($8)</span>
<a name="l05826"></a>05826 <span class="preprocessor"></span><span class="preprocessor">    #undef   $8</span>
<a name="l05827"></a>05827 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05828"></a>05828 <span class="preprocessor"></span>
<a name="l05829"></a>05829 <span class="preprocessor">#if defined ($9)</span>
<a name="l05830"></a>05830 <span class="preprocessor"></span><span class="preprocessor">    #undef   $9</span>
<a name="l05831"></a>05831 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05832"></a>05832 <span class="preprocessor"></span>
<a name="l05833"></a>05833 <span class="preprocessor">#if defined ($)</span>
<a name="l05834"></a>05834 <span class="preprocessor"></span><span class="preprocessor">    #undef   $</span>
<a name="l05835"></a>05835 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05836"></a>05836 <span class="preprocessor"></span>
<a name="l05837"></a>05837 <span class="preprocessor">#if defined ($$)</span>
<a name="l05838"></a>05838 <span class="preprocessor"></span><span class="preprocessor">    #undef   $$</span>
<a name="l05839"></a>05839 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05840"></a>05840 <span class="preprocessor"></span>
<a name="l05841"></a>05841 <span class="comment">//}</span>
<a name="l05842"></a>05842 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05843"></a>05843 
<a name="l05844"></a>05844 <span class="preprocessor">#if defined (_TX_ALLOW_TRACE)</span>
<a name="l05845"></a>05845 <span class="preprocessor"></span>
<a name="l05846"></a>05846 <span class="preprocessor">    #define _txEntry(lvl)  _txFuncEntry __txFuncEntry; { if (lvl) _txLocLvlSet (lvl);    $;          }</span>
<a name="l05847"></a>05847 <span class="preprocessor"></span>
<a name="l05848"></a>05848 <span class="preprocessor">    #define  $           { _txLocCurSet(); if (_txLoc::Cur.trace &lt;= _TX_ALLOW_TRACE+0) { TX_TRACE; } }</span>
<a name="l05849"></a>05849 <span class="preprocessor"></span>
<a name="l05850"></a>05850 <span class="preprocessor">    #define  $$          { __txFuncEntry.restore();                                                  }</span>
<a name="l05851"></a>05851 <span class="preprocessor"></span>
<a name="l05852"></a>05852 <span class="preprocessor">#elif defined (_DEBUG)</span>
<a name="l05853"></a>05853 <span class="preprocessor"></span>
<a name="l05854"></a>05854 <span class="preprocessor">    #define _txEntry(lvl)  _txFuncEntry __txFuncEntry; {                                 $;          }</span>
<a name="l05855"></a>05855 <span class="preprocessor"></span>
<a name="l05856"></a>05856 <span class="preprocessor">    #define  $           { _txLocCurSet();                                                           }</span>
<a name="l05857"></a>05857 <span class="preprocessor"></span>
<a name="l05858"></a>05858 <span class="preprocessor">    #define  $$          { __txFuncEntry.restore();                                                  }</span>
<a name="l05859"></a>05859 <span class="preprocessor"></span>
<a name="l05860"></a>05860 <span class="preprocessor">#else</span>
<a name="l05861"></a>05861 <span class="preprocessor"></span>
<a name="l05862"></a>05862 <span class="preprocessor">    #define _txEntry(lvl)  ;</span>
<a name="l05863"></a>05863 <span class="preprocessor"></span><span class="preprocessor">    #define  $             ;</span>
<a name="l05864"></a>05864 <span class="preprocessor"></span><span class="preprocessor">    #define  $$            ;</span>
<a name="l05865"></a>05865 <span class="preprocessor"></span>
<a name="l05866"></a>05866 <span class="preprocessor">#endif</span>
<a name="l05867"></a>05867 <span class="preprocessor"></span>
<a name="l05868"></a>05868 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05869"></a>05869 
<a name="l05870"></a>05870 <span class="preprocessor">#define      $0            _txEntry (0)  // (Log level unchanged)</span>
<a name="l05871"></a>05871 <span class="preprocessor"></span><span class="preprocessor">#define      $1            _txEntry (1)  // Regular functions</span>
<a name="l05872"></a>05872 <span class="preprocessor"></span><span class="preprocessor">#define      $2            _txEntry (2)  // Resvd</span>
<a name="l05873"></a>05873 <span class="preprocessor"></span><span class="preprocessor">#define      $3            _txEntry (3)  // Init/Cleanup</span>
<a name="l05874"></a>05874 <span class="preprocessor"></span><span class="preprocessor">#define      $4            _txEntry (4)  // Init/Cleanup, misc functions</span>
<a name="l05875"></a>05875 <span class="preprocessor"></span><span class="preprocessor">#define      $5            _txEntry (5)  // Error handling, entry points</span>
<a name="l05876"></a>05876 <span class="preprocessor"></span><span class="preprocessor">#define      $6            _txEntry (6)  // Error handling, main part</span>
<a name="l05877"></a>05877 <span class="preprocessor"></span><span class="preprocessor">#define      $7            _txEntry (7)  // Error handling, misc functions</span>
<a name="l05878"></a>05878 <span class="preprocessor"></span><span class="preprocessor">#define      $8            _txEntry (8)  // Canvas worker thread</span>
<a name="l05879"></a>05879 <span class="preprocessor"></span><span class="preprocessor">#define      $9            _txEntry (9)  // Resvd</span>
<a name="l05880"></a>05880 <span class="preprocessor"></span>
<a name="l05881"></a>05881 <span class="comment">//}</span>
<a name="l05882"></a>05882 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05883"></a>05883 
<a name="l05884"></a>05884 <span class="preprocessor">    #endif // FOR_DOXYGEN_ONLY</span>
<a name="l05885"></a>05885 <span class="preprocessor"></span>
<a name="l05886"></a>05886 
<a name="l05887"></a>05887 <span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05888"></a>05888 
<a name="l05890"></a>05890 <span class="comment">//}</span>
<a name="l05891"></a>05891 <span class="comment">//=================================================================================================================</span>
<a name="l05892"></a>05892 
<a name="l05893"></a>05893 <span class="comment">//=================================================================================================================</span>
<a name="l05894"></a>05894 <span class="comment">//{          Sweet critical section blocking: txAutoLock class</span>
<a name="l05895"></a>05895 <span class="comment">//=================================================================================================================</span>
<a name="l05896"></a>05896 
<a name="l05897"></a>05897 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05913"></a>05913 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05914"></a>05914 
<a name="l05916"></a>05916 <span class="keyword">extern</span> CRITICAL_SECTION _txCanvas_LockBackBuf;
<a name="l05918"></a>05918 
<a name="l05919"></a><a class="code" href="a00016.htm">05919</a> <span class="keyword">class </span><a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>
<a name="l05920"></a>05920     {
<a name="l05921"></a>05921     <span class="keyword">typedef</span> <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">this_t</a>;
<a name="l05922"></a>05922 
<a name="l05923"></a>05923     <span class="keyword">public</span>:
<a name="l05924"></a>05924 
<a name="l05925"></a>05925 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05948"></a>05948 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05949"></a>05949 
<a name="l05950"></a><a class="code" href="a00016.htm#a61feaeca08bc74354fae1dc8ef55b31a">05950</a>     <span class="keyword">explicit</span> <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (CRITICAL_SECTION* cs, <span class="keywordtype">bool</span> mandatory = <span class="keyword">true</span>) :
<a name="l05951"></a>05951         cs_ (cs)
<a name="l05952"></a>05952         {
<a name="l05953"></a>05953 $1      <span class="keywordflow">if</span> (!cs_) <span class="keywordflow">return</span>;
<a name="l05954"></a>05954 
<a name="l05955"></a>05955         <span class="keywordflow">if</span> (mandatory) {$    EnterCriticalSection (cs_);                   }
<a name="l05956"></a>05956         <span class="keywordflow">else</span>           {$ TryEnterCriticalSection (cs_)? 0 : (cs_ = NULL); }
<a name="l05957"></a>05957         }
<a name="l05958"></a>05958 
<a name="l05959"></a>05959 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05972"></a>05972 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05973"></a>05973 
<a name="l05974"></a><a class="code" href="a00016.htm#a7cf59bdea297feba1a8a1695657817b9">05974</a>     <span class="keyword">explicit</span> <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (<span class="keywordtype">bool</span> mandatory = <span class="keyword">true</span>) :
<a name="l05975"></a>05975         cs_ (NULL)
<a name="l05976"></a>05976         {
<a name="l05977"></a>05977 $1      <span class="keyword">new</span> (<span class="keyword">this</span>) <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (&amp;_txCanvas_LockBackBuf, mandatory);
<a name="l05978"></a>05978         }
<a name="l05979"></a>05979 
<a name="l05980"></a>05980 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05982"></a>05982 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05983"></a>05983 
<a name="l05984"></a><a class="code" href="a00016.htm#a65ee5bd5cf2560f863a2c8caf26ceb81">05984</a>    ~<a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>()
<a name="l05985"></a>05985         {
<a name="l05986"></a>05986 $1      <span class="keywordflow">if</span> (!cs_) <span class="keywordflow">return</span>;
<a name="l05987"></a>05987 $       LeaveCriticalSection (cs_); cs_ = NULL;
<a name="l05988"></a>05988         }
<a name="l05989"></a>05989 
<a name="l05990"></a>05990 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l05993"></a>05993 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l05994"></a>05994 
<a name="l05995"></a><a class="code" href="a00016.htm#aa385aa18f5e42db5a415c25a90f4193d">05995</a>     operator bool ()<span class="keyword"> const</span>
<a name="l05996"></a>05996 <span class="keyword">        </span>{
<a name="l05997"></a>05997 $1      <span class="keywordflow">return</span> (cs_ != NULL);
<a name="l05998"></a>05998         }
<a name="l05999"></a>05999 
<a name="l06000"></a>06000 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06002"></a>06002 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06003"></a>06003 
<a name="l06004"></a>06004 <span class="comment">//  private:</span>
<a name="l06005"></a><a class="code" href="a00016.htm#a331135d21727f8d293dc9e112ebc59c5">06005</a>     CRITICAL_SECTION* <a class="code" href="a00016.htm#a331135d21727f8d293dc9e112ebc59c5" title="Блокируемая критическая секция">cs_</a>;
<a name="l06006"></a>06006 
<a name="l06007"></a>06007 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06009"></a>06009 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06011"></a>06011 <span class="comment"></span>
<a name="l06012"></a>06012     <span class="keyword">private</span>:
<a name="l06013"></a>06013             <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (<span class="keyword">const</span> <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">this_t</a>&amp;) _tx_delete;
<a name="l06014"></a>06014     <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">this_t</a>&amp; operator = (const <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">this_t</a>&amp;) _tx_delete;
<a name="l06015"></a>06015 
<a name="l06017"></a>06017 
<a name="l06018"></a>06018     };
<a name="l06019"></a>06019 
<a name="l06020"></a>06020 <span class="comment">//}</span>
<a name="l06021"></a>06021 <span class="comment">//=================================================================================================================</span>
<a name="l06022"></a>06022 
<a name="l06023"></a>06023 <span class="comment">//=================================================================================================================</span>
<a name="l06024"></a>06024 <span class="comment">//{          Dialogs: txDialog class</span>
<a name="l06026"></a>06026 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l06028"></a>06028 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06049"></a>06049 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06050"></a>06050 
<a name="l06051"></a><a class="code" href="a00017.htm">06051</a> struct <a class="code" href="a00017.htm" title="Базовый класс для диалоговых окон.">txDialog</a>
<a name="l06052"></a>06052     {
<a name="l06053"></a>06053     <span class="keyword">typedef</span> txDialog <a class="code" href="a00017.htm" title="Базовый класс для диалоговых окон.">this_t</a>;
<a name="l06054"></a>06054 
<a name="l06055"></a>06055 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06068"></a>06068 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06069"></a>06069 
<a name="l06070"></a>06070     <span class="keyword">public</span>:
<a name="l06071"></a><a class="code" href="a00083.htm#ga077745aacfb8431d6529e20ad67d1674">06071</a>     <span class="keyword">enum</span> <a class="code" href="a00083.htm#ga077745aacfb8431d6529e20ad67d1674" title="Константы для задания типа контрола.">CONTROL</a>
<a name="l06072"></a>06072         {
<a name="l06073"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230">06073</a>         DIALOG    = (int) 0x00000000,            
<a name="l06074"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565">06074</a>         BUTTON    = (<span class="keywordtype">int</span>) 0xFFFF0080,            
<a name="l06075"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a2ca2e6cc3897a6960816076f3237bc9c">06075</a>         EDIT      = (int) 0xFFFF0081,            
<a name="l06076"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674ae55a36a850c67d46b3b3325de7fce0b8">06076</a>         STATIC    = (<span class="keywordtype">int</span>) 0xFFFF0082,            
<a name="l06077"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a097e68cde08918fb77838059126485f7">06077</a>         LISTBOX   = (int) 0xFFFF0083,            
<a name="l06078"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a95f321f7f597a08478ddfd6fbb763a2f">06078</a>         SCROLLBAR = (<span class="keywordtype">int</span>) 0xFFFF0084,            
<a name="l06079"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674aeb6d73055f99e0170907c4352dd1c448">06079</a>         COMBOBOX  = (int) 0xFFFF0085,            
<a name="l06080"></a><a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924">06080</a>         END       = (<span class="keywordtype">int</span>) 0x00000000             
<a name="l06081"></a>06081         };
<a name="l06082"></a>06082 
<a name="l06083"></a>06083 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06100"></a>06100 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06101"></a>06101 
<a name="l06102"></a>06102     <span class="keyword">public</span>:
<a name="l06103"></a><a class="code" href="a00014.htm">06103</a>     <span class="keyword">struct </span><a class="code" href="a00014.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>
<a name="l06104"></a>06104         {
<a name="l06105"></a><a class="code" href="a00014.htm#aef0e185c3b1c26598c04af6fc185afd2">06105</a>         <a class="code" href="a00083.htm#ga077745aacfb8431d6529e20ad67d1674" title="Константы для задания типа контрола.">CONTROL</a>     <a class="code" href="a00014.htm#aef0e185c3b1c26598c04af6fc185afd2" title="Тип контрола">wndclass</a>;                    
<a name="l06106"></a><a class="code" href="a00014.htm#a80d1a77abfa3f1d4158ec3de9e61bb88">06106</a>         <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00014.htm#a80d1a77abfa3f1d4158ec3de9e61bb88" title="Название или текст">caption</a>;                     
<a name="l06107"></a><a class="code" href="a00014.htm#a7b7a6396b2c82ad46c6d8b2bf141a8dd">06107</a>         WORD        <a class="code" href="a00014.htm#a7b7a6396b2c82ad46c6d8b2bf141a8dd" title="Идентификатор контрола">id</a>;                          
<a name="l06108"></a><a class="code" href="a00014.htm#ad34729e4edc23ac502eaa17b188df67b">06108</a>         <span class="keywordtype">short</span>        <a class="code" href="a00014.htm#ad34729e4edc23ac502eaa17b188df67b" title="Координата верхнего левого угла">x</a>;                          
<a name="l06109"></a><a class="code" href="a00014.htm#a34769302b056076dd9f0cd95de8c5d2f">06109</a>         <span class="keywordtype">short</span>        <a class="code" href="a00014.htm#a34769302b056076dd9f0cd95de8c5d2f" title="Координата нижнего правого угла">y</a>;                          
<a name="l06110"></a><a class="code" href="a00014.htm#ad412d3c503fde76edb4b79e9bb5bdee4">06110</a>         <span class="keywordtype">short</span>       <a class="code" href="a00014.htm#ad412d3c503fde76edb4b79e9bb5bdee4" title="Размер по X.">sx</a>;                          
<a name="l06111"></a><a class="code" href="a00014.htm#a0153fced86e1addd87ec429590e82741">06111</a>         <span class="keywordtype">short</span>       <a class="code" href="a00014.htm#a0153fced86e1addd87ec429590e82741" title="Размер по Y.">sy</a>;                          
<a name="l06112"></a><a class="code" href="a00014.htm#a7e39a7a8f3d68749766e46dd311f41fd">06112</a>         DWORD       <a class="code" href="a00014.htm#a7e39a7a8f3d68749766e46dd311f41fd" title="Стиль контрола">style</a>;                       
<a name="l06113"></a>06113 
<a name="l06114"></a><a class="code" href="a00014.htm#ad41674a1cf26ce09ed78be29f12ea121">06114</a>         <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00014.htm#ad41674a1cf26ce09ed78be29f12ea121" title="Шрифт диалогового окна">font</a>;                        
<a name="l06115"></a><a class="code" href="a00014.htm#ad71d13adce565c8e4692040b8c4cba83">06115</a>         WORD        <a class="code" href="a00014.htm#ad71d13adce565c8e4692040b8c4cba83" title="Размер шрифта диалогового окна">fontsize</a>;                    
<a name="l06116"></a>06116         };
<a name="l06117"></a>06117 
<a name="l06118"></a>06118 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06126"></a>06126 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06127"></a>06127 
<a name="l06128"></a>06128     <span class="keyword">public</span>:
<a name="l06129"></a>06129     txDialog();
<a name="l06130"></a>06130 
<a name="l06131"></a>06131 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06141"></a>06141 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06142"></a>06142 
<a name="l06143"></a>06143     <span class="keyword">explicit</span> txDialog (<span class="keyword">const</span> <a class="code" href="a00014.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>* layout);
<a name="l06144"></a>06144 
<a name="l06145"></a>06145 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06147"></a>06147 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06148"></a>06148 
<a name="l06149"></a><a class="code" href="a00017.htm#a39d59590ff0d9bc50daab64d37743997">06149</a>     <span class="keyword">virtual</span> <a class="code" href="a00017.htm#a39d59590ff0d9bc50daab64d37743997" title="Деструктор.">~txDialog</a>() {};
<a name="l06150"></a>06150 
<a name="l06151"></a>06151 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06163"></a>06163 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06164"></a>06164 
<a name="l06165"></a>06165     <span class="keyword">const</span> Layout* setLayout (<span class="keyword">const</span> Layout *layout);
<a name="l06166"></a>06166 
<a name="l06167"></a>06167 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06185"></a>06185 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06186"></a>06186 
<a name="l06187"></a>06187     <span class="keyword">virtual</span> <span class="keywordtype">int</span> dialogProc (HWND _wnd, UINT _msg, WPARAM _wParam, LPARAM _lParam);
<a name="l06188"></a>06188 
<a name="l06189"></a>06189 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06205"></a>06205 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06206"></a>06206 
<a name="l06207"></a>06207     intptr_t dialogBox (<span class="keyword">const</span> Layout* layout = NULL, <span class="keywordtype">size_t</span> bufsize = 0);
<a name="l06208"></a>06208 
<a name="l06209"></a>06209 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06222"></a>06222 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06223"></a>06223 
<a name="l06224"></a>06224     intptr_t dialogBox (WORD resource);
<a name="l06225"></a>06225 
<a name="l06226"></a>06226 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06228"></a>06228 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06229"></a>06229 
<a name="l06230"></a>06230     <span class="keyword">private</span>:
<a name="l06231"></a>06231             txDialog   (<span class="keyword">const</span> this_t&amp;) _tx_delete;
<a name="l06232"></a>06232     this_t&amp; operator = (const this_t&amp;) _tx_delete;
<a name="l06233"></a>06233 
<a name="l06234"></a>06234 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06236"></a>06236 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06237"></a>06237 
<a name="l06238"></a>06238     protected:
<a name="l06239"></a>06239     static intptr_t CALLBACK DialogProc_ (HWND wnd, UINT msg, WPARAM wParam, LPARAM lParam);
<a name="l06240"></a>06240 
<a name="l06241"></a>06241 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06243"></a>06243 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06244"></a>06244 
<a name="l06245"></a>06245     private:
<a name="l06246"></a><a class="code" href="a00017.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7">06246</a>     const <a class="code" href="a00014.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>* layout_;
<a name="l06247"></a>06247     };
<a name="l06248"></a>06248 
<a name="l06250"></a>06250 <span class="comment">//}</span>
<a name="l06251"></a>06251 <span class="comment">//=================================================================================================================</span>
<a name="l06252"></a>06252 
<a name="l06253"></a>06253 <span class="comment">//=================================================================================================================</span>
<a name="l06254"></a>06254 <span class="comment">//{          Dialogs: Message Map macros</span>
<a name="l06256"></a>06256 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l06258"></a>06258 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06279"></a>06279 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06280"></a>06280 
<a name="l06281"></a><a class="code" href="a00080.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8">06281</a> <span class="preprocessor">#define TX_BEGIN_MESSAGE_MAP()                                                                 \</span>
<a name="l06282"></a>06282 <span class="preprocessor">    virtual int dialogProc (HWND _wnd, UINT _msg, WPARAM _wParam, LPARAM _lParam) _tx_override \</span>
<a name="l06283"></a>06283 <span class="preprocessor">        {                                                                                      \</span>
<a name="l06284"></a>06284 <span class="preprocessor">        int _result = txDialog::dialogProc (_wnd, _msg, _wParam, _lParam); (void) _result;     \</span>
<a name="l06285"></a>06285 <span class="preprocessor">                                                                                               \</span>
<a name="l06286"></a>06286 <span class="preprocessor">        switch (_msg)                                                                          \</span>
<a name="l06287"></a>06287 <span class="preprocessor">            {                                                                                  \</span>
<a name="l06288"></a>06288 <span class="preprocessor">            case WM_NULL:</span>
<a name="l06289"></a>06289 <span class="preprocessor"></span>
<a name="l06290"></a>06290 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06309"></a>06309 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06310"></a>06310 
<a name="l06311"></a><a class="code" href="a00080.htm#gadbe2f17002d8d41056e9770066ef558b">06311</a> <span class="preprocessor">#define TX_HANDLE( id )                                                                        \</span>
<a name="l06312"></a>06312 <span class="preprocessor">            break;                                                                             \</span>
<a name="l06313"></a>06313 <span class="preprocessor">            case (id):</span>
<a name="l06314"></a>06314 <span class="preprocessor"></span>
<a name="l06315"></a>06315 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06335"></a>06335 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06336"></a>06336 
<a name="l06337"></a><a class="code" href="a00080.htm#ga3637c3398b6ebfa337171beec0770fe4">06337</a> <span class="preprocessor">#define TX_COMMAND_MAP                                                                         \</span>
<a name="l06338"></a>06338 <span class="preprocessor">            default: break;                                                                    \</span>
<a name="l06339"></a>06339 <span class="preprocessor">            }                                                                                  \</span>
<a name="l06340"></a>06340 <span class="preprocessor">                                                                                               \</span>
<a name="l06341"></a>06341 <span class="preprocessor">        if (_msg == WM_COMMAND) switch (LOWORD (_wParam))                                      \</span>
<a name="l06342"></a>06342 <span class="preprocessor">            {                                                                                  \</span>
<a name="l06343"></a>06343 <span class="preprocessor">            case 0:</span>
<a name="l06344"></a>06344 <span class="preprocessor"></span>
<a name="l06345"></a>06345 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06364"></a>06364 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06365"></a>06365 
<a name="l06366"></a><a class="code" href="a00080.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd">06366</a> <span class="preprocessor">#define TX_END_MESSAGE_MAP                                                                     \</span>
<a name="l06367"></a>06367 <span class="preprocessor">            default: break;                                                                    \</span>
<a name="l06368"></a>06368 <span class="preprocessor">            }                                                                                  \</span>
<a name="l06369"></a>06369 <span class="preprocessor">                                                                                               \</span>
<a name="l06370"></a>06370 <span class="preprocessor">        return FALSE;                                                                          \</span>
<a name="l06371"></a>06371 <span class="preprocessor">        }</span>
<a name="l06372"></a>06372 <span class="preprocessor"></span>
<a name="l06374"></a>06374 <span class="comment">//}</span>
<a name="l06375"></a>06375 <span class="comment">//=================================================================================================================</span>
<a name="l06376"></a>06376 
<a name="l06377"></a>06377 <span class="comment">//=================================================================================================================</span>
<a name="l06378"></a>06378 <span class="comment">//{          Dialogs: txDialog example: txInputBox()</span>
<a name="l06380"></a>06380 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l06382"></a>06382 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l06402"></a>06402 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l06403"></a>06403 
<a name="l06404"></a>06404 <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00083.htm#gaf1f2c033b7edc26174a28771a708ee7c" title="Ввод строки в отдельном окне.">txInputBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* caption = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* input = NULL) tx_nodiscard;
<a name="l06405"></a>06405 
<a name="l06406"></a><a class="code" href="a00083.htm#gaf1f2c033b7edc26174a28771a708ee7c">06406</a> const <span class="keywordtype">char</span>* <a class="code" href="a00083.htm#gaf1f2c033b7edc26174a28771a708ee7c" title="Ввод строки в отдельном окне.">txInputBox</a> (const <span class="keywordtype">char</span>* text, const <span class="keywordtype">char</span>* caption, const <span class="keywordtype">char</span>* input)
<a name="l06407"></a>06407     {
<a name="l06408"></a>06408     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06409"></a>06409     <span class="comment">// Если не указаны параметры, приходится использовать хоть какие-то надписи.</span>
<a name="l06410"></a>06410     <span class="comment">// txGetModuleFileName() -- имя EXE-файла, на случай, если кое-кто поленился задать название.</span>
<a name="l06411"></a>06411     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06412"></a>06412 
<a name="l06413"></a>06413     <span class="keywordflow">if</span> (!text)    text    = <span class="stringliteral">&quot;Введите строку:&quot;</span>;
<a name="l06414"></a>06414     <span class="keywordflow">if</span> (!caption) caption = <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>);
<a name="l06415"></a>06415     <span class="keywordflow">if</span> (!input)   input   = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06416"></a>06416 
<a name="l06417"></a>06417     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06418"></a>06418     <span class="comment">// Идентификаторы элементов диалога. Они требуются в GetDlgItemText().</span>
<a name="l06419"></a>06419     <span class="comment">// Если диалог строится не вручную, а редактором ресурсов, то они задаются в нем автоматически.</span>
<a name="l06420"></a>06420     <span class="comment">// У нас же тут -- хардкор стайл, к сожалению. Причина в том, что у разных сред программирования разные редакторы</span>
<a name="l06421"></a>06421     <span class="comment">// ресурсов и системы сборки. Поэтому для независимости от них все будет строиться на этапе выполнения,</span>
<a name="l06422"></a>06422     <span class="comment">// динамически. Вы еще гляньте, как это реализовано в txDialog::dialogBox() и функциях _tx_DLGTEMPLATE_()... О_о</span>
<a name="l06423"></a>06423     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06424"></a>06424 
<a name="l06425"></a>06425 <span class="preprocessor">    #define ID_TEXT_  101</span>
<a name="l06426"></a>06426 <span class="preprocessor"></span><span class="preprocessor">    #define ID_INPUT_ 102</span>
<a name="l06427"></a>06427 <span class="preprocessor"></span>
<a name="l06428"></a>06428     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06429"></a>06429     <span class="comment">// Задание макета (вида) диалога в виде массива структур.</span>
<a name="l06430"></a>06430     <span class="comment">// С помощью особого порядка полей в структуре txDialog::Layout и констант из класса txDialog этот массив</span>
<a name="l06431"></a>06431     <span class="comment">// становится похож на описание ресурса диалога в .rc-файле.</span>
<a name="l06432"></a>06432     <span class="comment">// См. описание синтаксиса rc-файла в документации по Win32 (MSDN, http://msdn.com).</span>
<a name="l06433"></a>06433     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06434"></a>06434 
<a name="l06435"></a>06435     <a class="code" href="a00014.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a> layout[] =
<a name="l06436"></a>06436 
<a name="l06437"></a>06437     <span class="comment">//----------------------+----------+-----------+-----------------+---------------------------------------------</span>
<a name="l06438"></a>06438     <span class="comment">//     Тип элемента     | Имя      | Иденти-   |   Координаты    | Флаги элементов</span>
<a name="l06439"></a>06439     <span class="comment">//     диалога          | элемента | фикатор   |-----------------| (см. описание элементов</span>
<a name="l06440"></a>06440     <span class="comment">//                      |          | элемента  | X | Y |Шир.|Выс.| окон диалога в MSDN)</span>
<a name="l06441"></a>06441     <span class="comment">//----------------------+----------+-----------+---+---+----+----+---------------------------------------------</span>
<a name="l06442"></a>06442     <span class="comment">//                      |          |           |   |   |    |    |</span>
<a name="l06443"></a>06443         {{ <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230" title="Начало описания диалога">txDialog::DIALOG</a>,  caption,   0,           0,  0, 240,  85                                                    },
<a name="l06444"></a>06444          { <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674ae55a36a850c67d46b3b3325de7fce0b8" title="Нередактируемый элемент (текст, картинка и т.д.)">txDialog::STATIC</a>,  text,      ID_TEXT_,   10, 10, 150,  40, SS_LEFT                                           },
<a name="l06445"></a>06445          { <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a2ca2e6cc3897a6960816076f3237bc9c" title="Редактируемый текст">txDialog::EDIT</a>,    input,     ID_INPUT_,  10, 60, 220,  15, ES_LEFT | WS_BORDER | ES_AUTOHSCROLL | WS_TABSTOP },
<a name="l06446"></a>06446          { <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565" title="Кнопка">txDialog::BUTTON</a>,  <span class="stringliteral">&quot;&amp;OK&quot;</span>,     IDOK,      180, 10,  50,  15, BS_DEFPUSHBUTTON                     | WS_TABSTOP },
<a name="l06447"></a>06447          { <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565" title="Кнопка">txDialog::BUTTON</a>,  <span class="stringliteral">&quot;&amp;Cancel&quot;</span>, IDCANCEL,  180, 30,  50,  15, BS_PUSHBUTTON                        | WS_TABSTOP },
<a name="l06448"></a>06448          { <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924" title="Конец описания диалога">txDialog::END</a>                                                                                                 }};
<a name="l06449"></a>06449 
<a name="l06450"></a>06450     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06451"></a>06451     <span class="comment">// Класс диалога для InputBox. Внутренний, т.к. зачем ему быть внешним.</span>
<a name="l06452"></a>06452     <span class="comment">// Нужен в основном для задания строки ввода (str) и оконной функции диалогового окна, требуемой Win32 (она</span>
<a name="l06453"></a>06453     <span class="comment">// построена макросами TX_BEGIN_MESSAGE_MAP и другими). Можно не делать внутреннего класса, но тогда оконную</span>
<a name="l06454"></a>06454     <span class="comment">// функцию придется писать в глобальной области видимости, и str объявлять глобально тоже (или передавать ее</span>
<a name="l06455"></a>06455     <span class="comment">// адрес через DialogBoxParam и записывать его в класс во время обработки WM_INITDIALOG).</span>
<a name="l06456"></a>06456     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06457"></a>06457     <span class="keyword">struct </span>inputDlg : txDialog
<a name="l06458"></a>06458         {
<a name="l06459"></a>06459         <span class="keywordtype">char</span> str [1024];
<a name="l06460"></a>06460 
<a name="l06461"></a>06461         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l06462"></a>06462 
<a name="l06463"></a>06463         inputDlg() :
<a name="l06464"></a>06464             str()
<a name="l06465"></a>06465             {}
<a name="l06466"></a>06466 
<a name="l06467"></a>06467         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l06468"></a>06468 
<a name="l06469"></a>06469         <a class="code" href="a00080.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" title="Заголовок карты сообщений (Message Map).">TX_BEGIN_MESSAGE_MAP</a>()    <span class="comment">// Карта сообщений (на самом деле это начало оконной функции).</span>
<a name="l06470"></a>06470 
<a name="l06471"></a>06471             <a class="code" href="a00080.htm#ga3637c3398b6ebfa337171beec0770fe4" title="Начало карты команд (Command map) в карте сообщений.">TX_COMMAND_MAP</a>        <span class="comment">// Здесь обрабатываются WM_COMMAND (на самом деле это оператор switch).</span>
<a name="l06472"></a>06472 
<a name="l06473"></a>06473                 <span class="comment">//-------------------------------------------------------------------------------------------------</span>
<a name="l06474"></a>06474                 <span class="comment">// При нажатии кнопки OK копируем строку из поля ввода в нашу переменную str, т.к. после закрытия</span>
<a name="l06475"></a>06475                 <span class="comment">// диалога строка ввода умрет и текст уже из нее получить.</span>
<a name="l06476"></a>06476                 <span class="comment">// Этот макрос на самом деле превращается в case из оператора switch.</span>
<a name="l06477"></a>06477                 <span class="comment">// _wnd -- это параметр оконной функции, см. определение макроса TX_BEGIN_MESSAGE_MAP().</span>
<a name="l06478"></a>06478                 <span class="comment">//-------------------------------------------------------------------------------------------------</span>
<a name="l06479"></a>06479 
<a name="l06480"></a>06480                 <a class="code" href="a00080.htm#gadbe2f17002d8d41056e9770066ef558b" title="Заголовок обработчика сообщения (Message handler) карты сообщений.">TX_HANDLE</a> (IDOK) GetDlgItemText (_wnd, ID_INPUT_, str, <span class="keyword">sizeof</span> (str) - 1);
<a name="l06481"></a>06481 
<a name="l06482"></a>06482         <a class="code" href="a00080.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd" title="Завершитель карты сообщений.">TX_END_MESSAGE_MAP</a>
<a name="l06483"></a>06483 
<a name="l06484"></a>06484         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l06485"></a>06485         <span class="comment">// Конец внутреннего класса диалога</span>
<a name="l06486"></a>06486         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l06487"></a>06487         };
<a name="l06488"></a>06488 
<a name="l06489"></a>06489     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06490"></a>06490     <span class="comment">// Убираем дефайны, чтобы потом не мешали.</span>
<a name="l06491"></a>06491     <span class="comment">// От этого они получаются &quot;локального действия&quot;, как будто у них была бы область видимости -- функция. На самом</span>
<a name="l06492"></a>06492     <span class="comment">// деле это сделано вручную через #undef. Чтобы подчеркнуть их локальную природу, у них имена заканчиваются на _.</span>
<a name="l06493"></a>06493     <span class="comment">// Такие дефайны потом не перекосячат весь код после того как, фактически, стали уже не нужны.</span>
<a name="l06494"></a>06494     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06495"></a>06495 
<a name="l06496"></a>06496 <span class="preprocessor">    #undef ID_TEXT_</span>
<a name="l06497"></a>06497 <span class="preprocessor"></span><span class="preprocessor">    #undef ID_INPUT_</span>
<a name="l06498"></a>06498 <span class="preprocessor"></span>
<a name="l06499"></a>06499     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06500"></a>06500     <span class="comment">// Это статический объект, потому что строка в нем должна жить после завершения функции.</span>
<a name="l06501"></a>06501     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06502"></a>06502 
<a name="l06503"></a>06503     <span class="keyword">static</span> inputDlg dlg;
<a name="l06504"></a>06504 
<a name="l06505"></a>06505     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06506"></a>06506     <span class="comment">// Передаем layout и запускаем окно диалога</span>
<a name="l06507"></a>06507     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06508"></a>06508 
<a name="l06509"></a>06509     dlg.dialogBox (layout);
<a name="l06510"></a>06510 
<a name="l06511"></a>06511     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06512"></a>06512     <span class="comment">// Возвращаем адрес строки из статического объекта. Так можно делать, потому что статический объект не умрет</span>
<a name="l06513"></a>06513     <span class="comment">// при выходе из функции и строка в нем, соответственно, тоже. Адрес нестатических переменных передавать</span>
<a name="l06514"></a>06514     <span class="comment">// синтаксически можно, но ведет к серьезным ошибкам.</span>
<a name="l06515"></a>06515     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l06516"></a>06516 
<a name="l06517"></a>06517     <span class="keywordflow">return</span> dlg.str;
<a name="l06518"></a>06518     }
<a name="l06519"></a>06519 
<a name="l06521"></a>06521 <span class="comment">//}</span>
<a name="l06522"></a>06522 <span class="comment">//=================================================================================================================</span>
<a name="l06523"></a>06523 
<a name="l06524"></a>06524 <span class="comment">//}</span>
<a name="l06525"></a>06525 <span class="comment">//=================================================================================================================</span>
<a name="l06526"></a>06526 
<a name="l06527"></a>06527 <span class="comment">//=================================================================================================================</span>
<a name="l06528"></a>06528 <span class="comment">//{          TXLIB IMPLEMENTATION</span>
<a name="l06529"></a>06529 <span class="comment">//           Реализация функций библиотеки</span>
<a name="l06530"></a>06530 <span class="comment">//=================================================================================================================</span>
<a name="l06532"></a>06532 <span class="comment"></span>
<a name="l06533"></a>06533 <span class="comment">//=================================================================================================================</span>
<a name="l06534"></a>06534 <span class="comment">//{          DLL functions import, missing types definitions</span>
<a name="l06536"></a>06536 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l06538"></a>06538 <span class="comment"></span>
<a name="l06539"></a>06539 <span class="keyword">namespace </span>Win32 {
<a name="l06540"></a>06540 
<a name="l06541"></a>06541 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06542"></a>06542 <span class="comment">//{ Some of structs, consts and interfaces aren&#39;t defined in MinGW some early headers.</span>
<a name="l06543"></a>06543 <span class="comment">//  Copied from Windows SDK 7.0a.</span>
<a name="l06544"></a>06544 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06545"></a>06545 
<a name="l06546"></a>06546 <span class="preprocessor">#ifndef AC_SRC_ALPHA</span>
<a name="l06547"></a>06547 <span class="preprocessor"></span><span class="preprocessor">#define AC_SRC_ALPHA                             0x01</span>
<a name="l06548"></a>06548 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06549"></a>06549 <span class="preprocessor"></span>
<a name="l06550"></a>06550 <span class="preprocessor">#ifndef SMTO_ERRORONEXIT</span>
<a name="l06551"></a>06551 <span class="preprocessor"></span><span class="preprocessor">#define SMTO_ERRORONEXIT                         0x0020</span>
<a name="l06552"></a>06552 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06553"></a>06553 <span class="preprocessor"></span>
<a name="l06554"></a>06554 <span class="preprocessor">#ifndef NT_CONSOLE_PROPS_SIG</span>
<a name="l06555"></a>06555 <span class="preprocessor"></span><span class="preprocessor">#define NT_CONSOLE_PROPS_SIG                     0xA0000002</span>
<a name="l06556"></a>06556 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06557"></a>06557 <span class="preprocessor"></span>
<a name="l06558"></a>06558 <span class="preprocessor">#ifndef NIIF_INFO</span>
<a name="l06559"></a>06559 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_INFO                                0x00000001</span>
<a name="l06560"></a>06560 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_WARNING                             0x00000002</span>
<a name="l06561"></a>06561 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_ERROR                               0x00000003</span>
<a name="l06562"></a>06562 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06563"></a>06563 <span class="preprocessor"></span>
<a name="l06564"></a>06564 <span class="preprocessor">#ifndef NIF_INFO</span>
<a name="l06565"></a>06565 <span class="preprocessor"></span><span class="preprocessor">#define NIF_STATE                                0x00000008</span>
<a name="l06566"></a>06566 <span class="preprocessor"></span><span class="preprocessor">#define NIF_INFO                                 0x00000010</span>
<a name="l06567"></a>06567 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06568"></a>06568 <span class="preprocessor"></span>
<a name="l06569"></a>06569 <span class="preprocessor">#ifndef GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS</span>
<a name="l06570"></a>06570 <span class="preprocessor"></span><span class="preprocessor">#define GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS   0x00000004</span>
<a name="l06571"></a>06571 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06572"></a>06572 <span class="preprocessor"></span>
<a name="l06573"></a>06573 <span class="preprocessor">#ifndef SYMOPT_CASE_INSENSITIVE</span>
<a name="l06574"></a>06574 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_CASE_INSENSITIVE                  0x00000001</span>
<a name="l06575"></a>06575 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_UNDNAME                           0x00000002</span>
<a name="l06576"></a>06576 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_DEFERRED_LOADS                    0x00000004</span>
<a name="l06577"></a>06577 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_NO_CPP                            0x00000008</span>
<a name="l06578"></a>06578 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_LOAD_LINES                        0x00000010</span>
<a name="l06579"></a>06579 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_OMAP_FIND_NEAREST                 0x00000020</span>
<a name="l06580"></a>06580 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_LOAD_ANYTHING                     0x00000040</span>
<a name="l06581"></a>06581 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_IGNORE_CVREC                      0x00000080</span>
<a name="l06582"></a>06582 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_NO_UNQUALIFIED_LOADS              0x00000100</span>
<a name="l06583"></a>06583 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_FAIL_CRITICAL_ERRORS              0x00000200</span>
<a name="l06584"></a>06584 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_EXACT_SYMBOLS                     0x00000400</span>
<a name="l06585"></a>06585 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_ALLOW_ABSOLUTE_SYMBOLS            0x00000800</span>
<a name="l06586"></a>06586 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_IGNORE_NT_SYMPATH                 0x00001000</span>
<a name="l06587"></a>06587 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_INCLUDE_32BIT_MODULES             0x00002000</span>
<a name="l06588"></a>06588 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_PUBLICS_ONLY                      0x00004000</span>
<a name="l06589"></a>06589 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_NO_PUBLICS                        0x00008000</span>
<a name="l06590"></a>06590 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_AUTO_PUBLICS                      0x00010000</span>
<a name="l06591"></a>06591 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_NO_IMAGE_SEARCH                   0x00020000</span>
<a name="l06592"></a>06592 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_SECURE                            0x00040000</span>
<a name="l06593"></a>06593 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_NO_PROMPTS                        0x00080000</span>
<a name="l06594"></a>06594 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_ALLOW_ZERO_ADDRESS                0x01000000</span>
<a name="l06595"></a>06595 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_DISABLE_SYMSRV_AUTODETECT         0x02000000</span>
<a name="l06596"></a>06596 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_FAVOR_COMPRESSED                  0x00800000</span>
<a name="l06597"></a>06597 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_FLAT_DIRECTORY                    0x00400000</span>
<a name="l06598"></a>06598 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_IGNORE_IMAGEDIR                   0x00200000</span>
<a name="l06599"></a>06599 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_OVERWRITE                         0x00100000</span>
<a name="l06600"></a>06600 <span class="preprocessor"></span><span class="preprocessor">#define SYMOPT_DEBUG                             0x80000000</span>
<a name="l06601"></a>06601 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06602"></a>06602 <span class="preprocessor"></span>
<a name="l06603"></a>06603 <span class="comment">// SEH exception codes. For GCC, see http://github.com/gcc-mirror/gcc/blob/master/libgcc/unwind-seh.c, lines 64-66.</span>
<a name="l06604"></a>06604 
<a name="l06605"></a>06605 <span class="preprocessor">#ifndef STATUS_POSSIBLE_DEADLOCK</span>
<a name="l06606"></a>06606 <span class="preprocessor"></span><span class="preprocessor">#define STATUS_POSSIBLE_DEADLOCK                 0xC0000194</span>
<a name="l06607"></a>06607 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06608"></a>06608 <span class="preprocessor"></span>
<a name="l06609"></a>06609 <span class="preprocessor">#ifndef STATUS_FLOAT_MULTIPLE_FAULTS</span>
<a name="l06610"></a>06610 <span class="preprocessor"></span><span class="preprocessor">#define STATUS_FLOAT_MULTIPLE_FAULTS             0xC00002B4</span>
<a name="l06611"></a>06611 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06612"></a>06612 <span class="preprocessor"></span>
<a name="l06613"></a>06613 <span class="preprocessor">#ifndef STATUS_STACK_BUFFER_OVERRUN</span>
<a name="l06614"></a>06614 <span class="preprocessor"></span><span class="preprocessor">#define STATUS_STACK_BUFFER_OVERRUN              0xC0000409</span>
<a name="l06615"></a>06615 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06616"></a>06616 <span class="preprocessor"></span>
<a name="l06617"></a>06617 <span class="preprocessor">#ifndef STATUS_ASSERTION_FAILURE</span>
<a name="l06618"></a>06618 <span class="preprocessor"></span><span class="preprocessor">#define STATUS_ASSERTION_FAILURE                 0xC0000420</span>
<a name="l06619"></a>06619 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06620"></a>06620 <span class="preprocessor"></span>
<a name="l06621"></a>06621 <span class="preprocessor">#ifndef STATUS_WX86_BREAKPOINT</span>
<a name="l06622"></a>06622 <span class="preprocessor"></span><span class="preprocessor">#define STATUS_WX86_BREAKPOINT                   0x4000001F</span>
<a name="l06623"></a>06623 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06624"></a>06624 <span class="preprocessor"></span>
<a name="l06625"></a>06625 <span class="preprocessor">#ifndef DBG_PRINTEXCEPTION_C</span>
<a name="l06626"></a>06626 <span class="preprocessor"></span><span class="preprocessor">#define DBG_PRINTEXCEPTION_C                     0x40010006  // OutputDebugStringA() call</span>
<a name="l06627"></a>06627 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06628"></a>06628 <span class="preprocessor"></span>
<a name="l06629"></a>06629 <span class="preprocessor">#ifndef DBG_PRINTEXCEPTION_WIDE_C</span>
<a name="l06630"></a>06630 <span class="preprocessor"></span><span class="preprocessor">#define DBG_PRINTEXCEPTION_WIDE_C                0x4001000A  // OutputDebugStringW() call</span>
<a name="l06631"></a>06631 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06632"></a>06632 <span class="preprocessor"></span>
<a name="l06633"></a>06633 <span class="preprocessor">#ifndef DBG_THREAD_NAME</span>
<a name="l06634"></a>06634 <span class="preprocessor"></span><span class="preprocessor">#define DBG_THREAD_NAME                          0x406D1388</span>
<a name="l06635"></a>06635 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l06636"></a>06636 <span class="preprocessor"></span>
<a name="l06637"></a>06637 <span class="preprocessor">#define EXCEPTION_CPP_MSC                        0xE06D7363  // &#39;?msc&#39;</span>
<a name="l06638"></a>06638 <span class="preprocessor"></span><span class="preprocessor">#define EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER1       0x19930520  // &#39;?msc&#39; version magic, see ehdata.h</span>
<a name="l06639"></a>06639 <span class="preprocessor"></span><span class="preprocessor">#define EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER2       0x19930521  // &#39;?msc&#39; version magic</span>
<a name="l06640"></a>06640 <span class="preprocessor"></span><span class="preprocessor">#define EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER3       0x19930522  // &#39;?msc&#39; version magic</span>
<a name="l06641"></a>06641 <span class="preprocessor"></span><span class="preprocessor">#define EXCEPTION_CPP_MSC_EH_PURE_MAGIC_NUMBER1  0x01994000  // &#39;?msc&#39; version magic</span>
<a name="l06642"></a>06642 <span class="preprocessor"></span>
<a name="l06643"></a>06643 <span class="preprocessor">#define EXCEPTION_CPP_GCC                        0x20474343  // &#39; GCC&#39;</span>
<a name="l06644"></a>06644 <span class="preprocessor"></span><span class="preprocessor">#define EXCEPTION_CPP_GCC_UNWIND                 0x21474343  // &#39;!GCC&#39;</span>
<a name="l06645"></a>06645 <span class="preprocessor"></span><span class="preprocessor">#define EXCEPTION_CPP_GCC_FORCED                 0x22474343  // &#39;&quot;GCC&#39;</span>
<a name="l06646"></a>06646 <span class="preprocessor"></span>
<a name="l06647"></a>06647 <span class="preprocessor">#define EXCEPTION_CLR_FAILURE                    0xE0434f4D  // &#39;аCOM&#39;</span>
<a name="l06648"></a>06648 <span class="preprocessor"></span>
<a name="l06649"></a>06649 <span class="preprocessor">#define EXCEPTION_CPP_BORLAND_BUILDER            0x0EEDFAE6  // Should never occur here</span>
<a name="l06650"></a>06650 <span class="preprocessor"></span><span class="preprocessor">#define EXCEPTION_CPP_BORLAND_DELPHI             0x0EEDFADE  // Should never occur here</span>
<a name="l06651"></a>06651 <span class="preprocessor"></span>
<a name="l06652"></a>06652 <span class="preprocessor">#pragma pack (push, 1)</span>
<a name="l06653"></a>06653 <span class="preprocessor"></span>
<a name="l06654"></a>06654 <span class="keyword">struct </span>CONSOLE_CURSOR_INFO
<a name="l06655"></a>06655     {
<a name="l06656"></a>06656     DWORD dwSize;
<a name="l06657"></a>06657     BOOL bVisible;
<a name="l06658"></a>06658     };
<a name="l06659"></a>06659 
<a name="l06660"></a>06660 <span class="keyword">struct </span>CONSOLE_FONT_INFO
<a name="l06661"></a>06661     {
<a name="l06662"></a>06662     DWORD nFont;
<a name="l06663"></a>06663     COORD dwFontSize;
<a name="l06664"></a>06664     };
<a name="l06665"></a>06665 
<a name="l06666"></a>06666 <span class="keyword">struct </span>CONSOLE_FONT_INFOEX
<a name="l06667"></a>06667     {
<a name="l06668"></a>06668     ULONG cbSize;
<a name="l06669"></a>06669     DWORD nFont;
<a name="l06670"></a>06670     COORD dwFontSize;
<a name="l06671"></a>06671     UINT  FontFamily;
<a name="l06672"></a>06672     UINT  FontWeight;
<a name="l06673"></a>06673     WCHAR FaceName[LF_FACESIZE];
<a name="l06674"></a>06674     };
<a name="l06675"></a>06675 
<a name="l06676"></a>06676 <span class="keyword">struct </span>DATABLOCK_HEADER
<a name="l06677"></a>06677     {
<a name="l06678"></a>06678     DWORD cbSize;
<a name="l06679"></a>06679     DWORD dwSignature;
<a name="l06680"></a>06680     };
<a name="l06681"></a>06681 
<a name="l06682"></a>06682 <span class="keyword">struct </span>NT_CONSOLE_PROPS
<a name="l06683"></a>06683     {
<a name="l06684"></a>06684     DATABLOCK_HEADER dbh;
<a name="l06685"></a>06685 
<a name="l06686"></a>06686     WORD  wFillAttribute;
<a name="l06687"></a>06687     WORD  wPopupFillAttribute;
<a name="l06688"></a>06688     COORD dwScreenBufferSize;
<a name="l06689"></a>06689     COORD dwWindowSize;
<a name="l06690"></a>06690     COORD dwWindowOrigin;
<a name="l06691"></a>06691     DWORD nFont;
<a name="l06692"></a>06692     DWORD nInputBufferSize;
<a name="l06693"></a>06693     COORD dwFontSize;
<a name="l06694"></a>06694     UINT  uFontFamily;
<a name="l06695"></a>06695     UINT  uFontWeight;
<a name="l06696"></a>06696     WCHAR FaceName[LF_FACESIZE];
<a name="l06697"></a>06697     UINT  uCursorSize;
<a name="l06698"></a>06698     BOOL  bFullScreen;
<a name="l06699"></a>06699     BOOL  bQuickEdit;
<a name="l06700"></a>06700     BOOL  bInsertMode;
<a name="l06701"></a>06701     BOOL  bAutoPosition;
<a name="l06702"></a>06702     UINT  uHistoryBufferSize;
<a name="l06703"></a>06703     UINT  uNumberOfHistoryBuffers;
<a name="l06704"></a>06704     BOOL  bHistoryNoDup;
<a name="l06705"></a>06705 
<a name="l06706"></a>06706     COLORREF ColorTable[16];
<a name="l06707"></a>06707     };
<a name="l06708"></a>06708 
<a name="l06709"></a>06709 <span class="preprocessor">#pragma pack (pop)</span>
<a name="l06710"></a>06710 <span class="preprocessor"></span>
<a name="l06711"></a>06711 <span class="preprocessor">#undef  INTERFACE</span>
<a name="l06712"></a>06712 <span class="preprocessor"></span><span class="preprocessor">#define INTERFACE IShellLinkDataList</span>
<a name="l06713"></a>06713 <span class="preprocessor"></span>
<a name="l06714"></a>06714 DECLARE_INTERFACE_ (IShellLinkDataList, IUnknown)
<a name="l06715"></a>06715     {
<a name="l06716"></a>06716     <span class="comment">// *** IUnknown methods ***</span>
<a name="l06717"></a>06717     STDMETHOD (QueryInterface)  (THIS_ REFIID iid, <span class="keywordtype">void</span>** value)    _tx_override PURE;
<a name="l06718"></a>06718     STDMETHOD_(ULONG, AddRef)   (THIS)                              _tx_override PURE;
<a name="l06719"></a>06719     STDMETHOD_(ULONG, Release)  (THIS)                              _tx_override PURE;
<a name="l06720"></a>06720 
<a name="l06721"></a>06721     <span class="comment">// *** IShellLinkDataList methods ***</span>
<a name="l06722"></a>06722     STDMETHOD (AddDataBlock)    (THIS_ <span class="keywordtype">void</span>* dataBlock)             PURE;
<a name="l06723"></a>06723     STDMETHOD (CopyDataBlock)   (THIS_ DWORD sig, <span class="keywordtype">void</span>** dataBlock) PURE;
<a name="l06724"></a>06724     STDMETHOD (RemoveDataBlock) (THIS_ DWORD sig)                   PURE;
<a name="l06725"></a>06725     STDMETHOD (GetFlags)        (THIS_ DWORD* flags)                PURE;
<a name="l06726"></a>06726     STDMETHOD (SetFlags)        (THIS_ DWORD  flags)                PURE;
<a name="l06727"></a>06727 
<a name="l06728"></a>06728     <span class="keyword">protected</span>:
<a name="l06729"></a>06729     <span class="keyword">virtual</span> ~IShellLinkDataList();
<a name="l06730"></a>06730     };
<a name="l06731"></a>06731 
<a name="l06732"></a>06732 <span class="keyword">const</span> GUID IID_IShellLink         = {0x000214ee, 0x0000, 0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
<a name="l06733"></a>06733 <span class="keyword">const</span> GUID IID_IShellLinkDataList = {0x45e2b4ae, 0xb1c3, 0x11d0, {0xb9,0x2f,0x00,0xa0,0xc9,0x03,0x12,0xe1}};
<a name="l06734"></a>06734 <span class="keyword">const</span> GUID IID_IPersistFile       = {0x0000010b, 0x0000, 0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
<a name="l06735"></a>06735 
<a name="l06736"></a>06736 <span class="keyword">const</span> GUID CLSID_SpVoice          = {0x96749377, 0x3391, 0x11d2, {0x9e,0xe3,0x00,0xc0,0x4f,0x79,0x73,0x96}};
<a name="l06737"></a>06737 <span class="keyword">const</span> GUID IID_ISpVoice           = {0x6c44df74, 0x72b9, 0x4992, {0xa1,0xec,0xef,0x99,0x6e,0x04,0x22,0xd4}};
<a name="l06738"></a>06738 
<a name="l06739"></a>06739 <span class="preprocessor">#undef  INTERFACE</span>
<a name="l06740"></a>06740 <span class="preprocessor"></span>
<a name="l06741"></a>06741 <span class="keyword">typedef</span> DWORD     NTSTATUS;
<a name="l06742"></a>06742 <span class="keyword">typedef</span> ULONG_PTR KAFFINITY;
<a name="l06743"></a>06743 <span class="keyword">typedef</span> LONG      KPRIORITY;
<a name="l06744"></a>06744 
<a name="l06745"></a>06745 <span class="keyword">struct </span>UNICODE_STRING
<a name="l06746"></a>06746     {
<a name="l06747"></a>06747     USHORT Length;
<a name="l06748"></a>06748     USHORT MaximumLength;
<a name="l06749"></a>06749     WCHAR* Buffer;
<a name="l06750"></a>06750     };
<a name="l06751"></a>06751 
<a name="l06752"></a>06752 <span class="keyword">struct </span>RTL_USER_PROCESS_PARAMETERS
<a name="l06753"></a>06753     {
<a name="l06754"></a>06754     BYTE  Reserved1[16];
<a name="l06755"></a>06755     <span class="keywordtype">void</span>* Reserved2[10];
<a name="l06756"></a>06756     UNICODE_STRING ImagePathName;
<a name="l06757"></a>06757     UNICODE_STRING CommandLine;
<a name="l06758"></a>06758     };
<a name="l06759"></a>06759 
<a name="l06760"></a>06760 <span class="keyword">struct </span>PEB
<a name="l06761"></a>06761     {
<a name="l06762"></a>06762     BYTE  Reserved1[2];
<a name="l06763"></a>06763     BYTE  BeingDebugged;
<a name="l06764"></a>06764     BYTE  Reserved2[1];
<a name="l06765"></a>06765     <span class="keywordtype">void</span>* Reserved3[2];
<a name="l06766"></a>06766     <span class="keywordtype">void</span>* Ldr;
<a name="l06767"></a>06767     RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
<a name="l06768"></a>06768     <span class="keywordtype">void</span>* Reserved4[3];
<a name="l06769"></a>06769     <span class="keywordtype">void</span>* AtlThunkSListPtr;
<a name="l06770"></a>06770     <span class="keywordtype">void</span>* Reserved5;
<a name="l06771"></a>06771     ULONG Reserved6;
<a name="l06772"></a>06772     <span class="keywordtype">void</span>* Reserved7;
<a name="l06773"></a>06773     ULONG Reserved8;
<a name="l06774"></a>06774     ULONG AtlThunkSListPtr32;
<a name="l06775"></a>06775     <span class="keywordtype">void</span>* Reserved9[45];
<a name="l06776"></a>06776     BYTE  Reserved10[96];
<a name="l06777"></a>06777     <span class="keywordtype">void</span>* PostProcessInitRoutine;
<a name="l06778"></a>06778     BYTE  Reserved11[128];
<a name="l06779"></a>06779     <span class="keywordtype">void</span>* Reserved12[1];
<a name="l06780"></a>06780     ULONG SessionId;
<a name="l06781"></a>06781     };
<a name="l06782"></a>06782 
<a name="l06783"></a>06783 <span class="keyword">struct </span>PROCESS_BASIC_INFORMATION
<a name="l06784"></a>06784     {
<a name="l06785"></a>06785     NTSTATUS  ExitStatus;
<a name="l06786"></a>06786     PEB*      PebBaseAddress;
<a name="l06787"></a>06787     KAFFINITY AffinityMask;
<a name="l06788"></a>06788     KPRIORITY BasePriority;
<a name="l06789"></a>06789     ULONG_PTR UniqueProcessId;
<a name="l06790"></a>06790     ULONG_PTR InheritedFromUniqueProcessId;
<a name="l06791"></a>06791     };
<a name="l06792"></a>06792 
<a name="l06793"></a>06793 <span class="keyword">enum</span> ADDRESS_MODE
<a name="l06794"></a>06794     {
<a name="l06795"></a>06795     AddrMode1616,
<a name="l06796"></a>06796     AddrMode1632,
<a name="l06797"></a>06797     AddrModeReal,
<a name="l06798"></a>06798     AddrModeFlat
<a name="l06799"></a>06799     };
<a name="l06800"></a>06800 
<a name="l06801"></a>06801 <span class="keyword">struct </span>ADDRESS64
<a name="l06802"></a>06802     {
<a name="l06803"></a>06803     DWORD64      Offset;
<a name="l06804"></a>06804     WORD         Segment;
<a name="l06805"></a>06805     ADDRESS_MODE Mode;
<a name="l06806"></a>06806     };
<a name="l06807"></a>06807 
<a name="l06808"></a>06808 <span class="keyword">struct </span>KDHELP64
<a name="l06809"></a>06809     {
<a name="l06810"></a>06810     DWORD64 Thread;
<a name="l06811"></a>06811     DWORD   ThCallbackStack;
<a name="l06812"></a>06812     DWORD   ThCallbackBStore;
<a name="l06813"></a>06813     DWORD   NextCallback;
<a name="l06814"></a>06814     DWORD   FramePointer;
<a name="l06815"></a>06815     DWORD64 KiCallUserMode;
<a name="l06816"></a>06816     DWORD64 KeUserCallbackDispatcher;
<a name="l06817"></a>06817     DWORD64 SystemRangeStart;
<a name="l06818"></a>06818     DWORD64 KiUserExceptionDispatcher;
<a name="l06819"></a>06819     DWORD64 StackBase;
<a name="l06820"></a>06820     DWORD64 StackLimit;
<a name="l06821"></a>06821     DWORD64 Reserved[5];
<a name="l06822"></a>06822     };
<a name="l06823"></a>06823 
<a name="l06824"></a>06824 <span class="keyword">struct </span>STACKFRAME64
<a name="l06825"></a>06825     {
<a name="l06826"></a>06826     ADDRESS64 AddrPC;
<a name="l06827"></a>06827     ADDRESS64 AddrReturn;
<a name="l06828"></a>06828     ADDRESS64 AddrFrame;
<a name="l06829"></a>06829     ADDRESS64 AddrStack;
<a name="l06830"></a>06830     ADDRESS64 AddrBStore;
<a name="l06831"></a>06831     PVOID     FuncTableEntry;
<a name="l06832"></a>06832     DWORD64   Params[4];
<a name="l06833"></a>06833     BOOL      Far;
<a name="l06834"></a>06834     BOOL      Virtual;
<a name="l06835"></a>06835     DWORD64   Reserved[3];
<a name="l06836"></a>06836     KDHELP64  KdHelp;
<a name="l06837"></a>06837     };
<a name="l06838"></a>06838 
<a name="l06839"></a>06839 <span class="keyword">struct </span>WOW64_FLOATING_SAVE_AREA
<a name="l06840"></a>06840     {
<a name="l06841"></a>06841     DWORD ControlWord;
<a name="l06842"></a>06842     DWORD StatusWord;
<a name="l06843"></a>06843     DWORD TagWord;
<a name="l06844"></a>06844     DWORD ErrorOffset;
<a name="l06845"></a>06845     DWORD ErrorSelector;
<a name="l06846"></a>06846     DWORD DataOffset;
<a name="l06847"></a>06847     DWORD DataSelector;
<a name="l06848"></a>06848     BYTE  RegisterArea[80];
<a name="l06849"></a>06849     DWORD Cr0NpxState;
<a name="l06850"></a>06850     };
<a name="l06851"></a>06851 
<a name="l06852"></a>06852 <span class="preprocessor">#pragma pack (push, 4)</span>
<a name="l06853"></a>06853 <span class="preprocessor"></span>
<a name="l06854"></a>06854 <span class="keyword">struct </span>WOW64_CONTEXT
<a name="l06855"></a>06855     {
<a name="l06856"></a>06856     DWORD ContextFlags;
<a name="l06857"></a>06857 
<a name="l06858"></a>06858     DWORD Dr0;
<a name="l06859"></a>06859     DWORD Dr1;
<a name="l06860"></a>06860     DWORD Dr2;
<a name="l06861"></a>06861     DWORD Dr3;
<a name="l06862"></a>06862     DWORD Dr6;
<a name="l06863"></a>06863     DWORD Dr7;
<a name="l06864"></a>06864 
<a name="l06865"></a>06865     WOW64_FLOATING_SAVE_AREA FloatSave;
<a name="l06866"></a>06866 
<a name="l06867"></a>06867     DWORD SegGs;
<a name="l06868"></a>06868     DWORD SegFs;
<a name="l06869"></a>06869     DWORD SegEs;
<a name="l06870"></a>06870     DWORD SegDs;
<a name="l06871"></a>06871 
<a name="l06872"></a>06872     DWORD Edi;
<a name="l06873"></a>06873     DWORD Esi;
<a name="l06874"></a>06874     DWORD Ebx;
<a name="l06875"></a>06875     DWORD Edx;
<a name="l06876"></a>06876     DWORD Ecx;
<a name="l06877"></a>06877     DWORD Eax;
<a name="l06878"></a>06878 
<a name="l06879"></a>06879     DWORD Ebp;
<a name="l06880"></a>06880     DWORD Eip;
<a name="l06881"></a>06881     DWORD SegCs;
<a name="l06882"></a>06882     DWORD EFlags;
<a name="l06883"></a>06883     DWORD Esp;
<a name="l06884"></a>06884     DWORD SegSs;
<a name="l06885"></a>06885 
<a name="l06886"></a>06886     BYTE  ExtendedRegisters[512];
<a name="l06887"></a>06887     };
<a name="l06888"></a>06888 
<a name="l06889"></a>06889 <span class="preprocessor">#pragma pack (pop)</span>
<a name="l06890"></a>06890 <span class="preprocessor"></span>
<a name="l06891"></a>06891 <span class="keyword">struct </span>SYMBOL_INFO
<a name="l06892"></a>06892     {
<a name="l06893"></a>06893     ULONG   SizeOfStruct;
<a name="l06894"></a>06894     ULONG   TypeIndex;
<a name="l06895"></a>06895     ULONG64 Reserved[2];
<a name="l06896"></a>06896     ULONG   info;
<a name="l06897"></a>06897     ULONG   Size;
<a name="l06898"></a>06898     ULONG64 ModBase;
<a name="l06899"></a>06899     ULONG   Flags;
<a name="l06900"></a>06900     ULONG64 Value;
<a name="l06901"></a>06901     ULONG64 Address;
<a name="l06902"></a>06902     ULONG   Register;
<a name="l06903"></a>06903     ULONG   Scope;
<a name="l06904"></a>06904     ULONG   Tag;
<a name="l06905"></a>06905     ULONG   NameLen;
<a name="l06906"></a>06906     ULONG   MaxNameLen;
<a name="l06907"></a>06907     CHAR    Name[1];
<a name="l06908"></a>06908     };
<a name="l06909"></a>06909 
<a name="l06910"></a>06910 <span class="keyword">struct </span>IMAGEHLP_LINE64
<a name="l06911"></a>06911     {
<a name="l06912"></a>06912     DWORD   SizeOfStruct;
<a name="l06913"></a>06913     PVOID   Key;
<a name="l06914"></a>06914     DWORD   LineNumber;
<a name="l06915"></a>06915     PCHAR   FileName;
<a name="l06916"></a>06916     DWORD64 Address;
<a name="l06917"></a>06917     };
<a name="l06918"></a>06918 
<a name="l06919"></a>06919 <span class="keyword">typedef</span> bool    (__stdcall *PREAD_PROCESS_MEMORY_ROUTINE64)   (HANDLE process, DWORD64 baseAddress, <span class="keywordtype">void</span>* buffer, DWORD size, DWORD* bytesRead);
<a name="l06920"></a>06920 <span class="keyword">typedef</span> <span class="keywordtype">void</span>*   (__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE64) (HANDLE process, DWORD64 baseAddress);
<a name="l06921"></a>06921 <span class="keyword">typedef</span> DWORD64 (__stdcall *PGET_MODULE_BASE_ROUTINE64)       (HANDLE process, DWORD64 address);
<a name="l06922"></a>06922 <span class="keyword">typedef</span> DWORD64 (__stdcall *PTRANSLATE_ADDRESS_ROUTINE64)     (HANDLE process, HANDLE thread, ADDRESS64* address);
<a name="l06923"></a>06923 
<a name="l06924"></a>06924 <span class="keyword">typedef</span> void (*unexpected_handler)();
<a name="l06925"></a>06925 
<a name="l06926"></a>06926 <span class="preprocessor">#pragma pack (push, 4)</span>
<a name="l06927"></a>06927 <span class="preprocessor"></span>
<a name="l06928"></a>06928 <span class="keyword">struct </span>MINIDUMP_THREAD_CALLBACK
<a name="l06929"></a>06929     {
<a name="l06930"></a>06930     ULONG    ThreadId;
<a name="l06931"></a>06931     HANDLE   ThreadHandle;
<a name="l06932"></a>06932     CONTEXT  Context;
<a name="l06933"></a>06933     ULONG    SizeOfContext;
<a name="l06934"></a>06934     ULONG64  StackBase;
<a name="l06935"></a>06935     ULONG64  StackEnd;
<a name="l06936"></a>06936     };
<a name="l06937"></a>06937 
<a name="l06938"></a>06938 <span class="keyword">struct </span>MINIDUMP_THREAD_EX_CALLBACK
<a name="l06939"></a>06939     {
<a name="l06940"></a>06940     ULONG    ThreadId;
<a name="l06941"></a>06941     HANDLE   ThreadHandle;
<a name="l06942"></a>06942     CONTEXT  Context;
<a name="l06943"></a>06943     ULONG    SizeOfContext;
<a name="l06944"></a>06944     ULONG64  StackBase;
<a name="l06945"></a>06945     ULONG64  StackEnd;
<a name="l06946"></a>06946     ULONG64  BackingStoreBase;
<a name="l06947"></a>06947     ULONG64  BackingStoreEnd;
<a name="l06948"></a>06948     };
<a name="l06949"></a>06949 
<a name="l06950"></a>06950 <span class="keyword">struct </span>MINIDUMP_MODULE_CALLBACK
<a name="l06951"></a>06951     {
<a name="l06952"></a>06952     <span class="keywordtype">wchar_t</span>* FullPath;
<a name="l06953"></a>06953     ULONG64  BaseOfImage;
<a name="l06954"></a>06954     ULONG    SizeOfImage;
<a name="l06955"></a>06955     ULONG    CheckSum;
<a name="l06956"></a>06956     ULONG    TimeDateStamp;
<a name="l06957"></a>06957     VS_FIXEDFILEINFO VersionInfo;
<a name="l06958"></a>06958     <span class="keywordtype">void</span>*    CvRecord;
<a name="l06959"></a>06959     ULONG    SizeOfCvRecord;
<a name="l06960"></a>06960     PVOID    MiscRecord;
<a name="l06961"></a>06961     ULONG    SizeOfMiscRecord;
<a name="l06962"></a>06962     };
<a name="l06963"></a>06963 
<a name="l06964"></a>06964 <span class="keyword">struct </span>MINIDUMP_INCLUDE_THREAD_CALLBACK
<a name="l06965"></a>06965     {
<a name="l06966"></a>06966     ULONG    ThreadId;
<a name="l06967"></a>06967     };
<a name="l06968"></a>06968 
<a name="l06969"></a>06969 <span class="keyword">struct </span>MINIDUMP_INCLUDE_MODULE_CALLBACK
<a name="l06970"></a>06970     {
<a name="l06971"></a>06971     ULONG64  BaseOfImage;
<a name="l06972"></a>06972     };
<a name="l06973"></a>06973 
<a name="l06974"></a>06974 <span class="keyword">struct </span>MINIDUMP_MEMORY_INFO
<a name="l06975"></a>06975     {
<a name="l06976"></a>06976     ULONG64  BaseAddress;
<a name="l06977"></a>06977     ULONG64  AllocationBase;
<a name="l06978"></a>06978     ULONG32  AllocationProtect;
<a name="l06979"></a>06979     ULONG32  __alignment1;
<a name="l06980"></a>06980     ULONG64  RegionSize;
<a name="l06981"></a>06981     ULONG32  State;
<a name="l06982"></a>06982     ULONG32  Protect;
<a name="l06983"></a>06983     ULONG32  Type;
<a name="l06984"></a>06984     ULONG32  __alignment2;
<a name="l06985"></a>06985     };
<a name="l06986"></a>06986 
<a name="l06987"></a>06987 <span class="keyword">struct </span>MINIDUMP_USER_STREAM
<a name="l06988"></a>06988     {
<a name="l06989"></a>06989     ULONG32  Type;
<a name="l06990"></a>06990     ULONG    BufferSize;
<a name="l06991"></a>06991     PVOID    Buffer;
<a name="l06992"></a>06992     };
<a name="l06993"></a>06993 
<a name="l06994"></a>06994 <span class="keyword">struct </span>MINIDUMP_USER_STREAM_INFORMATION
<a name="l06995"></a>06995     {
<a name="l06996"></a>06996     ULONG                 UserStreamCount;
<a name="l06997"></a>06997     MINIDUMP_USER_STREAM* UserStreamArray;
<a name="l06998"></a>06998     };
<a name="l06999"></a>06999 
<a name="l07000"></a>07000 <span class="keyword">struct </span>MINIDUMP_CALLBACK_INPUT
<a name="l07001"></a>07001     {
<a name="l07002"></a>07002     ULONG    ProcessId;
<a name="l07003"></a>07003     HANDLE   ProcessHandle;
<a name="l07004"></a>07004     ULONG    CallbackType;
<a name="l07005"></a>07005 
<a name="l07006"></a>07006     <span class="keyword">union</span>
<a name="l07007"></a>07007         {
<a name="l07008"></a>07008         MINIDUMP_THREAD_CALLBACK         Thread;
<a name="l07009"></a>07009         MINIDUMP_THREAD_EX_CALLBACK      ThreadEx;
<a name="l07010"></a>07010         MINIDUMP_MODULE_CALLBACK         Module;
<a name="l07011"></a>07011         MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
<a name="l07012"></a>07012         MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
<a name="l07013"></a>07013         };
<a name="l07014"></a>07014     };
<a name="l07015"></a>07015 
<a name="l07016"></a>07016 <span class="keyword">struct </span>MINIDUMP_CALLBACK_OUTPUT
<a name="l07017"></a>07017     {
<a name="l07018"></a>07018     <span class="keyword">union</span>
<a name="l07019"></a>07019         {
<a name="l07020"></a>07020         ULONG ModuleWriteFlags;
<a name="l07021"></a>07021         ULONG ThreadWriteFlags;
<a name="l07022"></a>07022         ULONG SecondaryFlags;
<a name="l07023"></a>07023 
<a name="l07024"></a>07024         <span class="keyword">struct</span>
<a name="l07025"></a>07025             {
<a name="l07026"></a>07026             ULONG64  MemoryBase;
<a name="l07027"></a>07027             ULONG    MemorySize;
<a name="l07028"></a>07028             };
<a name="l07029"></a>07029 
<a name="l07030"></a>07030         <span class="keyword">struct</span>
<a name="l07031"></a>07031             {
<a name="l07032"></a>07032             <span class="keywordtype">unsigned</span> CheckCancel;
<a name="l07033"></a>07033             <span class="keywordtype">unsigned</span> Cancel;
<a name="l07034"></a>07034             };
<a name="l07035"></a>07035 
<a name="l07036"></a>07036         HANDLE Handle;
<a name="l07037"></a>07037         };
<a name="l07038"></a>07038 
<a name="l07039"></a>07039     <span class="keyword">struct</span>
<a name="l07040"></a>07040         {
<a name="l07041"></a>07041         MINIDUMP_MEMORY_INFO VmRegion;
<a name="l07042"></a>07042         <span class="keywordtype">unsigned</span>             Continue;
<a name="l07043"></a>07043         };
<a name="l07044"></a>07044 
<a name="l07045"></a>07045     HRESULT Status;
<a name="l07046"></a>07046     };
<a name="l07047"></a>07047 
<a name="l07048"></a>07048 <span class="keyword">struct </span>MINIDUMP_EXCEPTION_INFORMATION
<a name="l07049"></a>07049     {
<a name="l07050"></a>07050     DWORD               ThreadId;
<a name="l07051"></a>07051     EXCEPTION_POINTERS* ExceptionPointers;
<a name="l07052"></a>07052     <span class="keywordtype">unsigned</span>            ClientPointers;
<a name="l07053"></a>07053     };
<a name="l07054"></a>07054 
<a name="l07055"></a>07055 <span class="keyword">typedef</span> int (WINAPI* MINIDUMP_CALLBACK_ROUTINE) (<span class="keywordtype">void</span>* param, MINIDUMP_CALLBACK_INPUT* input, MINIDUMP_CALLBACK_OUTPUT* output);
<a name="l07056"></a>07056 
<a name="l07057"></a>07057 <span class="keyword">struct </span>MINIDUMP_CALLBACK_INFORMATION
<a name="l07058"></a>07058     {
<a name="l07059"></a>07059     MINIDUMP_CALLBACK_ROUTINE CallbackRoutine;
<a name="l07060"></a>07060     <span class="keywordtype">void</span>*                     CallbackParam;
<a name="l07061"></a>07061     };
<a name="l07062"></a>07062 
<a name="l07063"></a>07063 <span class="keyword">enum</span> MINIDUMP_TYPE
<a name="l07064"></a>07064     {
<a name="l07065"></a>07065     MiniDumpNormal                         = 0x00000000,
<a name="l07066"></a>07066     MiniDumpWithDataSegs                   = 0x00000001,
<a name="l07067"></a>07067     MiniDumpWithFullMemory                 = 0x00000002,
<a name="l07068"></a>07068     MiniDumpWithHandleData                 = 0x00000004,
<a name="l07069"></a>07069     MiniDumpFilterMemory                   = 0x00000008,
<a name="l07070"></a>07070     MiniDumpScanMemory                     = 0x00000010,
<a name="l07071"></a>07071     MiniDumpWithUnloadedModules            = 0x00000020,
<a name="l07072"></a>07072     MiniDumpWithIndirectlyReferencedMemory = 0x00000040,
<a name="l07073"></a>07073     MiniDumpFilterModulePaths              = 0x00000080,
<a name="l07074"></a>07074     MiniDumpWithProcessThreadData          = 0x00000100,
<a name="l07075"></a>07075     MiniDumpWithPrivateReadWriteMemory     = 0x00000200,
<a name="l07076"></a>07076     MiniDumpWithoutOptionalData            = 0x00000400,
<a name="l07077"></a>07077     MiniDumpWithFullMemoryInfo             = 0x00000800,
<a name="l07078"></a>07078     MiniDumpWithThreadInfo                 = 0x00001000,
<a name="l07079"></a>07079     MiniDumpWithCodeSegs                   = 0x00002000,
<a name="l07080"></a>07080     MiniDumpWithoutAuxiliaryState          = 0x00004000,
<a name="l07081"></a>07081     MiniDumpWithFullAuxiliaryState         = 0x00008000,
<a name="l07082"></a>07082     MiniDumpWithPrivateWriteCopyMemory     = 0x00010000,
<a name="l07083"></a>07083     MiniDumpIgnoreInaccessibleMemory       = 0x00020000,
<a name="l07084"></a>07084     MiniDumpWithTokenInformation           = 0x00040000
<a name="l07085"></a>07085     };
<a name="l07086"></a>07086 
<a name="l07087"></a>07087 <span class="preprocessor">#pragma pack (pop)</span>
<a name="l07088"></a>07088 <span class="preprocessor"></span>
<a name="l07089"></a>07089 <span class="preprocessor">#define FOREGROUND_BLACK         ( 0                                                         )</span>
<a name="l07090"></a>07090 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_CYAN          ( FOREGROUND_BLUE       | FOREGROUND_GREEN                  )</span>
<a name="l07091"></a>07091 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_MAGENTA       ( FOREGROUND_BLUE       | FOREGROUND_RED                    )</span>
<a name="l07092"></a>07092 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_DARKYELLOW    ( FOREGROUND_GREEN      | FOREGROUND_RED                    )</span>
<a name="l07093"></a>07093 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_LIGHTGRAY     ( FOREGROUND_BLUE       | FOREGROUND_GREEN | FOREGROUND_RED )</span>
<a name="l07094"></a>07094 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_DARKGRAY      (                         FOREGROUND_INTENSITY              )</span>
<a name="l07095"></a>07095 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_LIGHTBLUE     ( FOREGROUND_BLUE       | FOREGROUND_INTENSITY              )</span>
<a name="l07096"></a>07096 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_LIGHTGREEN    ( FOREGROUND_GREEN      | FOREGROUND_INTENSITY              )</span>
<a name="l07097"></a>07097 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_LIGHTCYAN     ( FOREGROUND_CYAN       | FOREGROUND_INTENSITY              )</span>
<a name="l07098"></a>07098 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_LIGHTRED      ( FOREGROUND_RED        | FOREGROUND_INTENSITY              )</span>
<a name="l07099"></a>07099 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_LIGHTMAGENTA  ( FOREGROUND_MAGENTA    | FOREGROUND_INTENSITY              )</span>
<a name="l07100"></a>07100 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_YELLOW        ( FOREGROUND_DARKYELLOW | FOREGROUND_INTENSITY              )</span>
<a name="l07101"></a>07101 <span class="preprocessor"></span><span class="preprocessor">#define FOREGROUND_WHITE         ( FOREGROUND_LIGHTGRAY  | FOREGROUND_INTENSITY              )</span>
<a name="l07102"></a>07102 <span class="preprocessor"></span>
<a name="l07103"></a>07103 <span class="preprocessor">#define BACKGROUND_BLACK         ( 0                                                         )</span>
<a name="l07104"></a>07104 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_CYAN          ( BACKGROUND_BLUE       | BACKGROUND_GREEN                  )</span>
<a name="l07105"></a>07105 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_MAGENTA       ( BACKGROUND_BLUE       | BACKGROUND_RED                    )</span>
<a name="l07106"></a>07106 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_DARKYELLOW    ( BACKGROUND_GREEN      | BACKGROUND_RED                    )</span>
<a name="l07107"></a>07107 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_GRAY          ( BACKGROUND_BLUE       | BACKGROUND_GREEN | BACKGROUND_RED )</span>
<a name="l07108"></a>07108 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_DARKGRAY      (                         BACKGROUND_INTENSITY              )</span>
<a name="l07109"></a>07109 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_LIGHTBLUE     ( BACKGROUND_BLUE       | BACKGROUND_INTENSITY              )</span>
<a name="l07110"></a>07110 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_LIGHTGREEN    ( BACKGROUND_GREEN      | BACKGROUND_INTENSITY              )</span>
<a name="l07111"></a>07111 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_LIGHTCYAN     ( BACKGROUND_CYAN       | BACKGROUND_INTENSITY              )</span>
<a name="l07112"></a>07112 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_LIGHTRED      ( BACKGROUND_RED        | BACKGROUND_INTENSITY              )</span>
<a name="l07113"></a>07113 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_LIGHTMAGENTA  ( BACKGROUND_MAGENTA    | BACKGROUND_INTENSITY              )</span>
<a name="l07114"></a>07114 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_LIGHTYELLOW   ( BACKGROUND_DARKYELLOW | BACKGROUND_INTENSITY              )</span>
<a name="l07115"></a>07115 <span class="preprocessor"></span><span class="preprocessor">#define BACKGROUND_WHITE         ( BACKGROUND_DARKGRAY   | BACKGROUND_INTENSITY              )</span>
<a name="l07116"></a>07116 <span class="preprocessor"></span>
<a name="l07117"></a>07117 } <span class="comment">// namespace Win32</span>
<a name="l07118"></a>07118 
<a name="l07119"></a>07119 <span class="comment">//}</span>
<a name="l07120"></a>07120 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07121"></a>07121 
<a name="l07122"></a>07122 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07123"></a>07123 <span class="comment">//{ There are copies of MSVC compiler built-in predefined definitions, which are wrong in 64-bit mode.</span>
<a name="l07124"></a>07124 <span class="comment">//  So we have to override them. See: http://stackoverflow.com/questions/39113168</span>
<a name="l07125"></a>07125 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07126"></a>07126 
<a name="l07127"></a>07127 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l07128"></a>07128 <span class="preprocessor"></span>                                                    <span class="comment">//  MS ABI C++ Exception Layout</span>
<a name="l07129"></a>07129 <span class="keyword">namespace </span>Win32 {                                   <span class="comment">//  ---------------------------</span>
<a name="l07130"></a>07130                                                     <span class="comment">//</span>
<a name="l07131"></a>07131 <span class="preprocessor">#pragma pack (push, 4)                              //   EXCEPTION_RECORD:</span>
<a name="l07132"></a>07132 <span class="preprocessor"></span>                                                    <span class="comment">//  +==================================================+</span>
<a name="l07133"></a>07133 <span class="keyword">struct </span>ThrowInfo                                    <span class="comment">//  |...                                               |</span>
<a name="l07134"></a>07134     {                                               <span class="comment">//  |NumberParameters:        3, 4 or more             |</span>
<a name="l07135"></a>07135     __int32 attributes;                             <span class="comment">//  |ExceptionInformation[0]: MS signature 0x19930520  |</span>
<a name="l07136"></a>07136     __int32 pmfnUnwind;                             <span class="comment">//  |ExceptionInformation[1]: object* thrown           |</span>
<a name="l07137"></a>07137     __int32 pForwardCompat;                         <span class="comment">//  |ExceptionInformation[2]: ThrowInfo* --------------+---+</span>
<a name="l07138"></a>07138     __int32 pCatchableTypeArray;                    <span class="comment">//  |ExceptionInformation[3]: ImageBase (if params &gt; 3)|   |</span>
<a name="l07139"></a>07139     };                                              <span class="comment">//  +==================================================+   |</span>
<a name="l07140"></a>07140                                                     <span class="comment">//                                                         |</span>
<a name="l07141"></a>07141 <span class="keyword">struct </span>CatchableTypeArray                           <span class="comment">//        ThrowInfo:                                       |</span>
<a name="l07142"></a>07142     {                                               <span class="comment">//        +======================================+ &lt;-------+</span>
<a name="l07143"></a>07143     __int32 nCatchableTypes;                        <span class="comment">//        |   ...                                |</span>
<a name="l07144"></a>07144     __int32 arrayOfCatchableTypes[];                <span class="comment">//  +-----+-- pCatchableTypeArray (ptr/RVA)      |</span>
<a name="l07145"></a>07145     };                                              <span class="comment">//  |     +======================================+</span>
<a name="l07146"></a>07146                                                     <span class="comment">//  |</span>
<a name="l07147"></a>07147 <span class="keyword">struct </span>CatchableType                                <span class="comment">//  |     CatchableTypeArray:</span>
<a name="l07148"></a>07148     {                                               <span class="comment">//  +---&gt; +======================================+</span>
<a name="l07149"></a>07149     __int32 properties;                             <span class="comment">//        |   ...                                |</span>
<a name="l07150"></a>07150     __int32 pType;                                  <span class="comment">//  +-----+-- arrayOfCatchableTypes[0] (ptr/RVA) |</span>
<a name="l07151"></a>07151     __int32 thisDisplacement[3]; <span class="comment">// struct _PMD     //  |     +======================================+</span>
<a name="l07152"></a>07152     __int32 sizeOrOffset;                           <span class="comment">//  |</span>
<a name="l07153"></a>07153     __int32 copyFunction;                           <span class="comment">//  |     CatchableType:</span>
<a name="l07154"></a>07154     };                                              <span class="comment">//  +---&gt; +====================+</span>
<a name="l07155"></a>07155                                                     <span class="comment">//        | ...                |        std::type_info:</span>
<a name="l07156"></a>07156 <span class="preprocessor">#pragma pack (pop)                                  //        | pType (ptr/RVA) ---+------&gt; +==================+</span>
<a name="l07157"></a>07157 <span class="preprocessor"></span>                                                    <span class="comment">//        | ...                |        |type_info data    |</span>
<a name="l07158"></a>07158 } <span class="comment">// namespace Win32                                //        +====================+        |...               |</span>
<a name="l07159"></a>07159                                                     <span class="comment">//                                      +==================+</span>
<a name="l07160"></a>07160 <span class="preprocessor">#endif</span>
<a name="l07161"></a>07161 <span class="preprocessor"></span>
<a name="l07162"></a>07162 <span class="comment">// Similar to __CxxDetectRethrow(), see C:\Bin\Microsoft Visual Studio 14.0\VC\crt\src\crtsrc\vcruntime\frame.cpp:</span>
<a name="l07163"></a>07163 
<a name="l07164"></a>07164 <span class="preprocessor">#define _TX_MSC__CXX_DETECT_RETHROW( exc )                                     \</span>
<a name="l07165"></a>07165 <span class="preprocessor">    (                                                                          \</span>
<a name="l07166"></a>07166 <span class="preprocessor">    (exc)                                          &amp;&amp;                          \</span>
<a name="l07167"></a>07167 <span class="preprocessor">    (exc) -&gt; ExceptionCode    == EXCEPTION_CPP_MSC &amp;&amp;                          \</span>
<a name="l07168"></a>07168 <span class="preprocessor">    (exc) -&gt; NumberParameters &gt;= 3                 &amp;&amp;                          \</span>
<a name="l07169"></a>07169 <span class="preprocessor">                                                                               \</span>
<a name="l07170"></a>07170 <span class="preprocessor">    ((exc)-&gt; ExceptionInformation[0] == EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER1 ||  \</span>
<a name="l07171"></a>07171 <span class="preprocessor">     (exc)-&gt; ExceptionInformation[0] == EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER2 ||  \</span>
<a name="l07172"></a>07172 <span class="preprocessor">     (exc)-&gt; ExceptionInformation[0] == EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER3) &amp;&amp; \</span>
<a name="l07173"></a>07173 <span class="preprocessor">                                                                               \</span>
<a name="l07174"></a>07174 <span class="preprocessor">    (exc) -&gt; ExceptionInformation[2] == 0                                      \</span>
<a name="l07175"></a>07175 <span class="preprocessor">    )</span>
<a name="l07176"></a>07176 <span class="preprocessor"></span>
<a name="l07177"></a>07177 <span class="comment">//}</span>
<a name="l07178"></a>07178 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07179"></a>07179 
<a name="l07180"></a>07180 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07181"></a>07181 <span class="comment">//{ The corresponding structures for GCC</span>
<a name="l07182"></a>07182 <span class="comment">//</span>
<a name="l07183"></a>07183 <span class="comment">//  From: http://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/unwind-cxx.h</span>
<a name="l07184"></a>07184 <span class="comment">//  See:  http://mentorembedded.github.io/cxx-abi/abi-eh.html#cxx-abi</span>
<a name="l07185"></a>07185 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07186"></a>07186 
<a name="l07187"></a>07187 <span class="preprocessor">#if defined (_GCC_VER)</span>
<a name="l07188"></a>07188 <span class="preprocessor"></span>                                                    <span class="comment">// GCC ABI C++ Exception layout. A/B are ExceptionInformation[0].</span>
<a name="l07189"></a>07189 <span class="keyword">namespace </span>ABI {                                     <span class="comment">// --------------------------------------------------------------</span>
<a name="l07190"></a>07190                                                     <span class="comment">//</span>
<a name="l07191"></a>07191 <span class="keyword">struct </span>__cxa_exception                              <span class="comment">// Case A: &quot;_Unwind_Exception* A&quot; is undependent exception:</span>
<a name="l07192"></a>07192     {                                               <span class="comment">// --------------------------------------------------------</span>
<a name="l07193"></a>07193     <span class="keyword">union </span>{                                         <span class="comment">//</span>
<a name="l07194"></a>07194         <span class="keyword">struct                                      </span><span class="comment">//           __cxa_exception:           std::type_info:</span>
<a name="l07195"></a>07195             {                                       <span class="comment">//       -*--+====================+     +==================+</span>
<a name="l07196"></a>07196             ::std::type_info* exceptionType;        <span class="comment">//        ^  |exceptionType* -----+----&gt;|type_info data    |</span>
<a name="l07197"></a>07197             void (*exceptionDestructor)(<span class="keywordtype">void</span>*);     <span class="comment">//        |  |...                 |     |...               |</span>
<a name="l07198"></a>07198             };                                      <span class="comment">//       -1  |                    |     +==================+</span>
<a name="l07199"></a>07199         <span class="keyword">struct                                      </span><span class="comment">//        |  |                    |</span>
<a name="l07200"></a>07200             {                                       <span class="comment">// A &gt;----|--+--------------------+</span>
<a name="l07201"></a>07201             __cxa_exception*  primaryException;     <span class="comment">//     |  |  |unwindHeader        |</span>
<a name="l07202"></a>07202             void (*padding)();                      <span class="comment">//    +1  |  |                    |</span>
<a name="l07203"></a>07203             };                                      <span class="comment">//     |  |  |                    |</span>
<a name="l07204"></a>07204         };                                          <span class="comment">//     V  |  |                    |</span>
<a name="l07205"></a>07205                                                     <span class="comment">//    -*---  +====================+</span>
<a name="l07206"></a>07206     std::unexpected_handler   unexpectedHandler;    <span class="comment">//           |object              |</span>
<a name="l07207"></a>07207     std::terminate_handler    terminateHandler;     <span class="comment">//           +--------------------+</span>
<a name="l07208"></a>07208                                                     <span class="comment">//</span>
<a name="l07209"></a>07209     __cxa_exception*          nextException;        <span class="comment">// Case B: &quot;_Unwind_Exception* B&quot; is dependent exception</span>
<a name="l07210"></a>07210     <span class="keywordtype">int</span>                       handlerCount;         <span class="comment">// (unwindHeader.exception_class &amp; 1 != 0):</span>
<a name="l07211"></a>07211     <span class="keywordtype">int</span>                       handlerSwitchValue;   <span class="comment">// -----------------------------------------------------</span>
<a name="l07212"></a>07212     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*      actionRecord;         <span class="comment">//</span>
<a name="l07213"></a>07213     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*      languageSpecificData; <span class="comment">//           __cxa_exception:               __cxa_exception:</span>
<a name="l07214"></a>07214     <span class="keywordtype">void</span>*                     catchTemp;            <span class="comment">//       -*--+====================+     -*--+=================+</span>
<a name="l07215"></a>07215     <span class="keywordtype">void</span>*                     adjustedPtr;          <span class="comment">//        ^  |primaryException* --+--    ^  |exceptionType*   |</span>
<a name="l07216"></a>07216                                                     <span class="comment">//        |  |...                 |  \   |  |...              |</span>
<a name="l07217"></a>07217     _Unwind_Exception         unwindHeader;         <span class="comment">//       -1  |                    |  |   |  |                 |</span>
<a name="l07218"></a>07218     };                                              <span class="comment">//        |  |                    |  |   |  |                 |</span>
<a name="l07219"></a>07219                                                     <span class="comment">// B &gt;----|--+--------------------+  |  -1  +-----------------+</span>
<a name="l07220"></a>07220 <span class="keyword">struct </span>__cxa_eh_globals                             <span class="comment">//     |  |  |unwindHeader        |  |   |  |unwindHeader     |</span>
<a name="l07221"></a>07221     {                                               <span class="comment">//    +1  |  |                    |  |   |  |                 |</span>
<a name="l07222"></a>07222     __cxa_exception* caughtExceptions;              <span class="comment">//     |  |  |                    |  |   |  |                 |</span>
<a name="l07223"></a>07223     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     uncaughtExceptions;            <span class="comment">//     V  |  |                    |  \   |  |                 |</span>
<a name="l07224"></a>07224     };                                              <span class="comment">//    -*---  +====================+   --&gt;*--+=================+</span>
<a name="l07225"></a>07225                                                     <span class="comment">//           |...                 |         |object           |</span>
<a name="l07226"></a>07226 } <span class="comment">// namespace ABI                                  //           .                    .         |                 |</span>
<a name="l07227"></a>07227                                                     <span class="comment">//                                          +-----------------+</span>
<a name="l07228"></a>07228 
<a name="l07229"></a>07229 <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> ABI::__cxa_eh_globals* __cxa_get_globals();
<a name="l07230"></a>07230 
<a name="l07231"></a>07231 <span class="preprocessor">#endif</span>
<a name="l07232"></a>07232 <span class="preprocessor"></span>
<a name="l07233"></a>07233 <span class="comment">//}</span>
<a name="l07234"></a>07234 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07235"></a>07235 
<a name="l07236"></a>07236 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07237"></a>07237 <span class="comment">//{ Hand-made IAT.</span>
<a name="l07238"></a>07238 <span class="comment">//  Some IDEs don&#39;t link with these libs by default in console projects, so do sunrise by hand. :(</span>
<a name="l07239"></a>07239 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07240"></a>07240 
<a name="l07241"></a>07241 <span class="comment">// Hand-made DLLIMPORT helpers</span>
<a name="l07242"></a>07242 
<a name="l07243"></a>07243 <span class="preprocessor">#define _TX_DLLIMPORT(     lib, retval, name, params ) \</span>
<a name="l07244"></a>07244 <span class="preprocessor">     retval (WINAPI* name) params = (retval (WINAPI*) params) _txDllImport (lib &quot;.dll&quot;, #name, true)</span>
<a name="l07245"></a>07245 <span class="preprocessor"></span>
<a name="l07246"></a>07246 <span class="preprocessor">#define _TX_DLLIMPORT_OPT( lib, retval, name, params ) \</span>
<a name="l07247"></a>07247 <span class="preprocessor">     retval (WINAPI* name) params = (retval (WINAPI*) params) _txDllImport (lib &quot;.dll&quot;, #name, false)</span>
<a name="l07248"></a>07248 <span class="preprocessor"></span>
<a name="l07249"></a>07249 <span class="preprocessor">#define _TX_DLLIMPORT_CRT( lib, retval, name, params ) \</span>
<a name="l07250"></a>07250 <span class="preprocessor">     retval (      * name) params = (retval (      *) params) _txDllImport (lib &quot;.dll&quot;, #name, false)</span>
<a name="l07251"></a>07251 <span class="preprocessor"></span>
<a name="l07252"></a>07252 <span class="keyword">typedef</span> void (*_tx_FARPROC)();
<a name="l07253"></a>07253 
<a name="l07254"></a>07254 _tx_FARPROC _txDllImport (<span class="keyword">const</span> <span class="keywordtype">char</span> dllFileName[], <span class="keyword">const</span> <span class="keywordtype">char</span> funcName[], <span class="keywordtype">bool</span> required = <span class="keyword">true</span>);
<a name="l07255"></a>07255 
<a name="l07256"></a>07256 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07257"></a>07257 
<a name="l07258"></a>07258 <span class="keyword">namespace </span>Win32 {
<a name="l07259"></a>07259 
<a name="l07260"></a>07260 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HDC,      CreateCompatibleDC,            (HDC dc));
<a name="l07261"></a>07261 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HBITMAP,  CreateCompatibleBitmap,        (HDC dc, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height));
<a name="l07262"></a>07262 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  GetStockObject,                (<span class="keywordtype">int</span> <span class="keywordtype">object</span>));
<a name="l07263"></a>07263 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  SelectObject,                  (HDC dc, HGDIOBJ <span class="keywordtype">object</span>));
<a name="l07264"></a>07264 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  GetCurrentObject,              (HDC dc, <span class="keywordtype">unsigned</span> objectType));
<a name="l07265"></a>07265 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      GetObjectA,                    (HGDIOBJ obj, <span class="keywordtype">int</span> bufsize, <span class="keywordtype">void</span>* buffer));
<a name="l07266"></a>07266 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    DWORD,    GetObjectType,                 (HGDIOBJ <span class="keywordtype">object</span>));
<a name="l07267"></a>07267 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     DeleteDC,                      (HDC dc));
<a name="l07268"></a>07268 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     DeleteObject,                  (HGDIOBJ <span class="keywordtype">object</span>));
<a name="l07269"></a>07269 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetTextColor,                  (HDC dc, COLORREF color));
<a name="l07270"></a>07270 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetBkColor,                    (HDC dc, COLORREF color));
<a name="l07271"></a>07271 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetBkMode,                     (HDC dc, <span class="keywordtype">int</span> bkMode));
<a name="l07272"></a>07272 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HFONT,    CreateFontA,                   (<span class="keywordtype">int</span> height, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> escapement, <span class="keywordtype">int</span> orientation,
<a name="l07273"></a>07273                                                                          <span class="keywordtype">int</span> weight, DWORD italic, DWORD underline, DWORD strikeout,
<a name="l07274"></a>07274                                                                          DWORD charSet, DWORD outputPrec, DWORD clipPrec,
<a name="l07275"></a>07275                                                                          DWORD quality, DWORD pitchAndFamily, <span class="keyword">const</span> <span class="keywordtype">char</span> face[]));
<a name="l07276"></a>07276 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      EnumFontFamiliesExA,           (HDC dc, LPLOGFONT logFont, FONTENUMPROC enumProc,
<a name="l07277"></a>07277                                                                          LPARAM lParam, DWORD reserved));
<a name="l07278"></a>07278 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetPixel,                      (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color));
<a name="l07279"></a>07279 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, GetPixel,                      (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y));
<a name="l07280"></a>07280 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HPEN,     CreatePen,                     (<span class="keywordtype">int</span> penStyle, <span class="keywordtype">int</span> width, COLORREF color));
<a name="l07281"></a>07281 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HBRUSH,   CreateSolidBrush,              (COLORREF color));
<a name="l07282"></a>07282 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     MoveToEx,                      (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, POINT* point));
<a name="l07283"></a>07283 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     LineTo,                        (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y));
<a name="l07284"></a>07284 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     Polygon,                       (HDC dc, <span class="keyword">const</span> POINT points[], <span class="keywordtype">int</span> count));
<a name="l07285"></a>07285 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     Polyline,                      (HDC dc, <span class="keyword">const</span> POINT points[], <span class="keywordtype">int</span> count));
<a name="l07286"></a>07286 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     PolyBezier,                    (HDC dc, <span class="keyword">const</span> POINT points[], <span class="keywordtype">int</span> count));
<a name="l07287"></a>07287 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     Rectangle,                     (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l07288"></a>07288 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     RoundRect,                     (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY));
<a name="l07289"></a>07289 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     Ellipse,                       (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l07290"></a>07290 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     Arc,                           (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l07291"></a>07291                                                                          <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l07292"></a>07292 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     Pie,                           (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l07293"></a>07293                                                                          <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l07294"></a>07294 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     Chord,                         (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l07295"></a>07295                                                                          <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l07296"></a>07296 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     TextOutA,                      (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> <span class="keywordtype">string</span>[], <span class="keywordtype">int</span> length));
<a name="l07297"></a>07297 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    UINT,     SetTextAlign,                  (HDC dc, <span class="keywordtype">unsigned</span> mode));
<a name="l07298"></a>07298 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     GetTextExtentPoint32A,         (HDC dc, <span class="keyword">const</span> <span class="keywordtype">char</span> <span class="keywordtype">string</span>[], <span class="keywordtype">int</span> length, SIZE* size));
<a name="l07299"></a>07299 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     ExtFloodFill,                  (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color, <span class="keywordtype">unsigned</span> type));
<a name="l07300"></a>07300 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     BitBlt,                        (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l07301"></a>07301                                                                          HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  DWORD rOp));
<a name="l07302"></a>07302 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     StretchBlt,                    (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l07303"></a>07303                                                                          HDC src, <span class="keywordtype">int</span> xSrc, <span class="keywordtype">int</span> ySrc, <span class="keywordtype">int</span> wSrc, <span class="keywordtype">int</span> hSrc, DWORD rOp));
<a name="l07304"></a>07304 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     PlgBlt,                        (HDC dest, <span class="keyword">const</span> POINT* parallelogram,
<a name="l07305"></a>07305                                                                          HDC src, <span class="keywordtype">int</span> xSrc, <span class="keywordtype">int</span> ySrc, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l07306"></a>07306                                                                          HBITMAP mask, <span class="keywordtype">int</span> xMask, <span class="keywordtype">int</span> yMask));
<a name="l07307"></a>07307 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetDIBitsToDevice,             (HDC dc, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, DWORD width, DWORD height,
<a name="l07308"></a>07308                                                                          <span class="keywordtype">int</span> xSrc, <span class="keywordtype">int</span> ySrc, <span class="keywordtype">unsigned</span> startLine, <span class="keywordtype">unsigned</span> numLines,
<a name="l07309"></a>07309                                                                          <span class="keyword">const</span> <span class="keywordtype">void</span>* data, <span class="keyword">const</span> BITMAPINFO* info, <span class="keywordtype">unsigned</span> colorUse));
<a name="l07310"></a>07310 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      GetDIBits,                     (HDC hdc, HBITMAP hbmp, <span class="keywordtype">unsigned</span> uStartScan, <span class="keywordtype">unsigned</span> cScanLines,
<a name="l07311"></a>07311                                                                          <span class="keywordtype">void</span>* lpvBits, BITMAPINFO* lpbi, <span class="keywordtype">unsigned</span> usage));
<a name="l07312"></a>07312 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">bool</span>,     PatBlt,                        (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, DWORD rOp));
<a name="l07313"></a>07313 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetROP2,                       (HDC dc, <span class="keywordtype">int</span> mode));
<a name="l07314"></a>07314 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetStretchBltMode,             (HDC dc, <span class="keywordtype">int</span> mode));
<a name="l07315"></a>07315 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    DWORD,    GdiSetBatchLimit,              (DWORD limit));
<a name="l07316"></a>07316 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HBITMAP,  CreateDIBSection,              (HDC dc, <span class="keyword">const</span> BITMAPINFO* bmInfo, <span class="keywordtype">unsigned</span> colorUsage, <span class="keywordtype">void</span> **vBits,
<a name="l07317"></a>07317                                                                          HANDLE section, DWORD offset));
<a name="l07318"></a>07318 
<a name="l07319"></a>07319 _TX_DLLIMPORT     (<span class="stringliteral">&quot;User32&quot;</span>,   <span class="keywordtype">int</span>,      DrawTextA,                     (HDC dc, <span class="keyword">const</span> <span class="keywordtype">char</span> text[], <span class="keywordtype">int</span> length, RECT* rect, <span class="keywordtype">unsigned</span> format));
<a name="l07320"></a>07320 _TX_DLLIMPORT     (<span class="stringliteral">&quot;User32&quot;</span>,   HANDLE,   LoadImageA,                    (HINSTANCE inst, <span class="keyword">const</span> <span class="keywordtype">char</span> name[], <span class="keywordtype">unsigned</span> type,
<a name="l07321"></a>07321                                                                         <span class="keywordtype">int</span> sizex, <span class="keywordtype">int</span> sizey, <span class="keywordtype">unsigned</span> mode));
<a name="l07322"></a>07322 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;User32&quot;</span>,   <span class="keywordtype">bool</span>,     IsHungAppWindow,               (HWND wnd));
<a name="l07323"></a>07323 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;User32&quot;</span>,   HWND,     GhostWindowFromHungWindow,     (HWND wnd));
<a name="l07324"></a>07324 
<a name="l07325"></a>07325 _TX_DLLIMPORT     (<span class="stringliteral">&quot;WinMM&quot;</span>,    <span class="keywordtype">bool</span>,     PlaySound,                     (<span class="keyword">const</span> <span class="keywordtype">char</span> sound[], HMODULE mod, DWORD mode));
<a name="l07326"></a>07326 
<a name="l07327"></a>07327 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MSImg32&quot;</span>,  <span class="keywordtype">bool</span>,     TransparentBlt,                (HDC dest, <span class="keywordtype">int</span> destX, <span class="keywordtype">int</span> destY, <span class="keywordtype">int</span> destWidth, <span class="keywordtype">int</span> destHeight,
<a name="l07328"></a>07328                                                                          HDC src,  <span class="keywordtype">int</span> srcX,  <span class="keywordtype">int</span> srcY,  <span class="keywordtype">int</span> srcWidth,  <span class="keywordtype">int</span> srcHeight,
<a name="l07329"></a>07329                                                                          <span class="keywordtype">unsigned</span> transparentColor));
<a name="l07330"></a>07330 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MSImg32&quot;</span>,  <span class="keywordtype">bool</span>,     AlphaBlend,                    (HDC dest, <span class="keywordtype">int</span> destX, <span class="keywordtype">int</span> destY, <span class="keywordtype">int</span> destWidth, <span class="keywordtype">int</span> destHeight,
<a name="l07331"></a>07331                                                                          HDC src,  <span class="keywordtype">int</span> srcX,  <span class="keywordtype">int</span> srcY,  <span class="keywordtype">int</span> srcWidth,  <span class="keywordtype">int</span> srcHeight,
<a name="l07332"></a>07332                                                                          BLENDFUNCTION blending));
<a name="l07333"></a>07333 
<a name="l07334"></a>07334 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">void</span>,     ExitProcess,                   (<span class="keywordtype">unsigned</span> retcode));
<a name="l07335"></a>07335 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     TerminateProcess,              (HANDLE process, <span class="keywordtype">unsigned</span> retcode));
<a name="l07336"></a>07336 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">void</span>,     FatalExit,                     (<span class="keywordtype">int</span> retcode));
<a name="l07337"></a>07337 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">void</span>,     FatalAppExitA,                 (<span class="keywordtype">unsigned</span> action, <span class="keyword">const</span> <span class="keywordtype">char</span> message[]));
<a name="l07338"></a>07338 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Kernel32&quot;</span>, HWND,     GetConsoleWindow,              (<span class="keywordtype">void</span>));
<a name="l07339"></a>07339 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     SetConsoleFont,                (HANDLE con, DWORD fontIndex));
<a name="l07340"></a>07340 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, DWORD,    GetNumberOfConsoleFonts,       (<span class="keywordtype">void</span>));
<a name="l07341"></a>07341 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     GetCurrentConsoleFont,         (HANDLE con, <span class="keywordtype">bool</span> maxWnd, CONSOLE_FONT_INFO*   curFont));
<a name="l07342"></a>07342 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     GetCurrentConsoleFontEx,       (HANDLE con, <span class="keywordtype">bool</span> maxWnd, CONSOLE_FONT_INFOEX* curFont));
<a name="l07343"></a>07343 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     SetCurrentConsoleFontEx,       (HANDLE con, <span class="keywordtype">bool</span> maxWnd, CONSOLE_FONT_INFOEX* curFont));
<a name="l07344"></a>07344 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">void</span>,     RtlCaptureContext,             (CONTEXT* contextRecord));
<a name="l07345"></a>07345 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, USHORT,   RtlCaptureStackBackTrace,      (DWORD framesToSkip, DWORD framesToCapture, <span class="keywordtype">void</span>** backTrace, DWORD* hash));
<a name="l07346"></a>07346 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">void</span>*,    AddVectoredExceptionHandler,   (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> firstHandler, PVECTORED_EXCEPTION_HANDLER handler));
<a name="l07347"></a>07347 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">unsigned</span>, RemoveVectoredExceptionHandler,(<span class="keywordtype">void</span>* handler));
<a name="l07348"></a>07348 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     GetModuleHandleEx,             (DWORD flags, <span class="keyword">const</span> <span class="keywordtype">char</span> moduleName[], HMODULE* module));
<a name="l07349"></a>07349 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     IsWow64Process,                (HANDLE process, <span class="keywordtype">int</span>* isWow64Process));
<a name="l07350"></a>07350 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     Wow64GetThreadContext,         (HANDLE thread, WOW64_CONTEXT* context));
<a name="l07351"></a>07351 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, <span class="keywordtype">bool</span>,     SetThreadStackGuarantee,       (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* stackSize));
<a name="l07352"></a>07352 
<a name="l07353"></a>07353 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    HRESULT,  CoInitialize,                  (<span class="keywordtype">void</span>*));
<a name="l07354"></a>07354 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    HRESULT,  CoCreateInstance,              (REFCLSID clsId, IUnknown*, DWORD, REFIID iId, PVOID* value));
<a name="l07355"></a>07355 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    <span class="keywordtype">void</span>,     CoUninitialize,                (<span class="keywordtype">void</span>));
<a name="l07356"></a>07356 
<a name="l07357"></a>07357 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Shell32&quot;</span>,  HINSTANCE,ShellExecuteA,                 (HWND wnd, <span class="keyword">const</span> <span class="keywordtype">char</span> operation[], <span class="keyword">const</span> <span class="keywordtype">char</span> file[],
<a name="l07358"></a>07358                                                                          <span class="keyword">const</span> <span class="keywordtype">char</span> parameters[], <span class="keyword">const</span> <span class="keywordtype">char</span> directory[], <span class="keywordtype">int</span> showCmd));
<a name="l07359"></a>07359 
<a name="l07360"></a>07360 _TX_DLLIMPORT     (<span class="stringliteral">&quot;ShlWAPI&quot;</span>,  <span class="keywordtype">char</span>*,    StrStrIA,                      (<span class="keyword">const</span> <span class="keywordtype">char</span>    <span class="keywordtype">string</span>[], <span class="keyword">const</span> <span class="keywordtype">char</span>    search[]));
<a name="l07361"></a>07361 _TX_DLLIMPORT     (<span class="stringliteral">&quot;ShlWAPI&quot;</span>,  <span class="keywordtype">char</span>*,    StrStrIW,                      (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span> <span class="keywordtype">string</span>[], <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> search[]));
<a name="l07362"></a>07362 
<a name="l07363"></a>07363 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;NTDLL&quot;</span>,    <span class="keywordtype">char</span>*,    wine_get_version,              (<span class="keywordtype">void</span>));
<a name="l07364"></a>07364 _TX_DLLIMPORT     (<span class="stringliteral">&quot;NTDLL&quot;</span>,    NTSTATUS, NtQueryInformationProcess,     (HANDLE process, <span class="keywordtype">int</span> infoClass,
<a name="l07365"></a>07365                                                                          <span class="keywordtype">void</span>* processInfo, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> szProcessInfo, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* szReturnInfo));
<a name="l07366"></a>07366 
<a name="l07367"></a>07367 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   <span class="keywordtype">void</span>,     exit,                          (<span class="keywordtype">int</span> retcode));
<a name="l07368"></a>07368 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   <span class="keywordtype">void</span>,     _cexit,                        (<span class="keywordtype">void</span>));
<a name="l07369"></a>07369 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   <span class="keywordtype">unsigned</span>, _fpreset,                      (<span class="keywordtype">void</span>));
<a name="l07370"></a>07370 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   <span class="keywordtype">unsigned</span>, _controlfp,                    (<span class="keywordtype">unsigned</span> control, <span class="keywordtype">unsigned</span> mask));
<a name="l07371"></a>07371 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   uintptr_t,_beginthread,                  (<span class="keywordtype">void</span> (__cdecl* start_address) (<span class="keywordtype">void</span>*), <span class="keywordtype">unsigned</span> stack_size, <span class="keywordtype">void</span>* arglist));
<a name="l07372"></a>07372 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   uintptr_t,_beginthreadex,                (<span class="keywordtype">void</span>* security, <span class="keywordtype">unsigned</span> stack_size, <span class="keywordtype">unsigned</span> (__stdcall* start_address) (<span class="keywordtype">void</span>*),
<a name="l07373"></a>07373                                                                          <span class="keywordtype">void</span> *arglist, <span class="keywordtype">unsigned</span> init_flag, <span class="keywordtype">unsigned</span>* thread_addr));
<a name="l07374"></a>07374 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   <span class="keywordtype">char</span>*,    __unDName,                     (<span class="keywordtype">char</span>* outStr, <span class="keyword">const</span> <span class="keywordtype">char</span>* mangledName, <span class="keywordtype">int</span> outStrLen,
<a name="l07375"></a>07375                                                                          <span class="keywordtype">void</span>* (*mallocFunc) (<span class="keywordtype">size_t</span> size), <span class="keywordtype">void</span> (*freeFunc) (<span class="keywordtype">void</span> *pointer),
<a name="l07376"></a>07376                                                                          <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> flags));
<a name="l07377"></a>07377 _TX_DLLIMPORT_CRT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   unexpected_handler, set_unexpected,      (unexpected_handler handler));
<a name="l07378"></a>07378 
<a name="l07379"></a>07379 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;OpenGL32&quot;</span>, HDC,         wglGetCurrentDC,            (<span class="keywordtype">void</span>));
<a name="l07380"></a>07380 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;OpenGL32&quot;</span>, <span class="keywordtype">unsigned</span>,    glGetError,                 (<span class="keywordtype">void</span>));
<a name="l07381"></a>07381 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Glu32&quot;</span>,    <span class="keyword">const</span> <span class="keywordtype">char</span>*, gluErrorString,             (<span class="keywordtype">unsigned</span> error));
<a name="l07382"></a>07382 
<a name="l07383"></a>07383 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, <span class="keywordtype">bool</span>,     MiniDumpWriteDump,             (HANDLE process, DWORD processId, HANDLE file, MINIDUMP_TYPE dumpType,
<a name="l07384"></a>07384                                                                          MINIDUMP_EXCEPTION_INFORMATION*   exceptionParam,
<a name="l07385"></a>07385                                                                          MINIDUMP_USER_STREAM_INFORMATION* userStreamParam,
<a name="l07386"></a>07386                                                                          MINIDUMP_CALLBACK_INFORMATION*    callbackParam));
<a name="l07387"></a>07387 
<a name="l07388"></a>07388 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, DWORD,    SymSetOptions,                 (DWORD options));
<a name="l07389"></a>07389 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymInitialize,                 (HANDLE process, <span class="keyword">const</span> <span class="keywordtype">char</span> userSearchPath[], <span class="keywordtype">bool</span> invadeProcess));
<a name="l07390"></a>07390 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymFromAddr,                   (HANDLE process, DWORD64 addr, DWORD64* offset, SYMBOL_INFO*     symbol));
<a name="l07391"></a>07391 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymGetLineFromAddr64,          (HANDLE process, DWORD64 addr, DWORD*   offset, IMAGEHLP_LINE64* line));
<a name="l07392"></a>07392 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, DWORD64,  SymGetModuleBase64,            (HANDLE process, DWORD64 addr));
<a name="l07393"></a>07393 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymCleanup,                    (HANDLE process));
<a name="l07394"></a>07394 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, <span class="keywordtype">void</span>*,    SymFunctionTableAccess64,      (HANDLE process, DWORD64 addrBase));
<a name="l07395"></a>07395 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;DbgHelp*&quot;</span>, <span class="keywordtype">bool</span>,     StackWalk64,                   (DWORD arch, HANDLE process, HANDLE thread, STACKFRAME64* frame, <span class="keywordtype">void</span>* ctxRecord,
<a name="l07396"></a>07396                                                                          PREAD_PROCESS_MEMORY_ROUTINE64   readMemoryFunc,
<a name="l07397"></a>07397                                                                          PFUNCTION_TABLE_ACCESS_ROUTINE64 tableAccessFunc,
<a name="l07398"></a>07398                                                                          PGET_MODULE_BASE_ROUTINE64       getModuleBaseFunc,
<a name="l07399"></a>07399                                                                          PTRANSLATE_ADDRESS_ROUTINE64     translateAddressFunc));
<a name="l07400"></a>07400 <span class="keyword">namespace </span>MinGW {
<a name="l07401"></a>07401 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, DWORD,    SymSetOptions,                 (DWORD options));
<a name="l07402"></a>07402 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymInitialize,                 (HANDLE process, <span class="keyword">const</span> <span class="keywordtype">char</span> userSearchPath[], <span class="keywordtype">bool</span> invadeProcess));
<a name="l07403"></a>07403 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymFromAddr,                   (HANDLE process, DWORD64 addr, DWORD64* offset, SYMBOL_INFO*     symbol));
<a name="l07404"></a>07404 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymGetLineFromAddr64,          (HANDLE process, DWORD64 addr, DWORD*   offset, IMAGEHLP_LINE64* line));
<a name="l07405"></a>07405 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, DWORD64,  SymGetModuleBase64,            (HANDLE process, DWORD64 addr));
<a name="l07406"></a>07406 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, <span class="keywordtype">bool</span>,     SymCleanup,                    (HANDLE process));
<a name="l07407"></a>07407 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, <span class="keywordtype">void</span>*,    SymFunctionTableAccess64,      (HANDLE process, DWORD64 addrBase));
<a name="l07408"></a>07408 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MgwHelp*&quot;</span>, <span class="keywordtype">bool</span>,     StackWalk64,                   (DWORD arch, HANDLE process, HANDLE thread, STACKFRAME64* frame, <span class="keywordtype">void</span>* ctxRecord,
<a name="l07409"></a>07409                                                                          PREAD_PROCESS_MEMORY_ROUTINE64   readMemoryFunc,
<a name="l07410"></a>07410                                                                          PFUNCTION_TABLE_ACCESS_ROUTINE64 tableAccessFunc,
<a name="l07411"></a>07411                                                                          PGET_MODULE_BASE_ROUTINE64       getModuleBaseFunc,
<a name="l07412"></a>07412                                                                          PTRANSLATE_ADDRESS_ROUTINE64     translateAddressFunc));
<a name="l07413"></a>07413 } <span class="comment">// namespace MinGW</span>
<a name="l07414"></a>07414 
<a name="l07415"></a>07415 } <span class="comment">// namespace Win32</span>
<a name="l07416"></a>07416 
<a name="l07417"></a>07417 <span class="comment">//}</span>
<a name="l07418"></a>07418 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07419"></a>07419 
<a name="l07421"></a>07421 <span class="comment">//}</span>
<a name="l07422"></a>07422 <span class="comment">//=================================================================================================================</span>
<a name="l07423"></a>07423 
<a name="l07424"></a>07424 <span class="comment">//=================================================================================================================</span>
<a name="l07425"></a>07425 <span class="comment">//{          Internal function prototypes, macros and constants</span>
<a name="l07426"></a>07426 <span class="comment">//  @name    Прототипы внутренних функций, макросы и константы</span>
<a name="l07427"></a>07427 <span class="comment">//=================================================================================================================</span>
<a name="l07429"></a>07429 <span class="comment"></span>
<a name="l07430"></a>07430 <span class="keyword">const</span> <span class="keywordtype">int</span>        _TX_IDM_ABOUT                            =   40000,       <span class="comment">// Идентификаторы системного меню окна</span>
<a name="l07431"></a>07431                  _TX_IDM_CONSOLE                          =   40001,
<a name="l07432"></a>07432                  _TX_WM_CREATEWND                         =   0x7FF0,      <span class="comment">// Сообщения для создания/уничтожения</span>
<a name="l07433"></a>07433                  _TX_WM_DESTROYWND                        =   0x7FF1;      <span class="comment">// окон в потоке Canvas</span>
<a name="l07434"></a>07434 
<a name="l07435"></a>07435 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07436"></a>07436 
<a name="l07437"></a>07437 <span class="keywordtype">int</span>              _txInitialize();
<a name="l07438"></a>07438 <span class="keywordtype">void</span>             _txCleanup();
<a name="l07439"></a>07439 
<a name="l07440"></a>07440 HWND             _txCanvas_CreateWindow      (<span class="keyword">const</span> SIZE* size);
<a name="l07441"></a>07441 <span class="keyword">inline</span> <span class="keywordtype">bool</span>      _txCanvas_OK() tx_nodiscard;
<a name="l07442"></a>07442 
<a name="l07443"></a>07443 <span class="keywordtype">bool</span>             _txCanvas_OnCREATE          (HWND wnd);
<a name="l07444"></a>07444 <span class="keywordtype">bool</span>             _txCanvas_OnDESTROY         (HWND wnd);
<a name="l07445"></a>07445 <span class="keywordtype">bool</span>             _txCanvas_OnCLOSE           (HWND);
<a name="l07446"></a>07446 <span class="keywordtype">bool</span>             _txCanvas_OnPAINT           (HWND wnd);
<a name="l07447"></a>07447 <span class="keywordtype">bool</span>             _txCanvas_OnKEYDOWN         (HWND wnd, WPARAM vk, LPARAM info);
<a name="l07448"></a>07448 <span class="keywordtype">bool</span>             _txCanvas_OnCHAR            (HWND wnd, WPARAM ch, LPARAM info);
<a name="l07449"></a>07449 <span class="keywordtype">bool</span>             _txCanvas_OnTIMER           (HWND wnd, WPARAM <span class="keywordtype">id</span>);
<a name="l07450"></a>07450 <span class="keywordtype">bool</span>             _txCanvas_OnMOUSEMOVE       (HWND wnd, WPARAM buttons, LPARAM coords);
<a name="l07451"></a>07451 <span class="keywordtype">bool</span>             _txCanvas_OnMOUSELEAVE      (HWND wnd);
<a name="l07452"></a>07452 <span class="keywordtype">bool</span>             _txCanvas_OnCREATEWND       (HWND wnd, WPARAM, LPARAM lpar);
<a name="l07453"></a>07453 <span class="keywordtype">bool</span>             _txCanvas_OnDESTROYWND      (HWND wnd, WPARAM, LPARAM lpar);
<a name="l07454"></a>07454 <span class="keywordtype">bool</span>             _txCanvas_OnCmdCONSOLE      (HWND wnd, WPARAM cmd);
<a name="l07455"></a>07455 <span class="keywordtype">bool</span>             _txCanvas_OnCmdABOUT        (HWND wnd, WPARAM cmd);
<a name="l07456"></a>07456 
<a name="l07457"></a>07457 <span class="keywordtype">unsigned</span> WINAPI  _txCanvas_ThreadProc        (<span class="keywordtype">void</span>* data);
<a name="l07458"></a>07458 LRESULT CALLBACK _txCanvas_WndProc           (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar);
<a name="l07459"></a>07459 
<a name="l07460"></a>07460 <span class="keywordtype">int</span>              _txCanvas_SetRefreshLock    (<span class="keywordtype">int</span> count);
<a name="l07461"></a>07461 
<a name="l07462"></a>07462 HDC              _txBuffer_Create            (HWND wnd = NULL, const POINT* size = NULL, HBITMAP bitmap = NULL,
<a name="l07463"></a>07463                                               RGBQUAD** pixels = NULL) tx_nodiscard;
<a name="l07464"></a>07464 <span class="keywordtype">bool</span>             _txBuffer_Delete            (HDC* dc);
<a name="l07465"></a>07465 <span class="keywordtype">bool</span>             _txBuffer_Select            (HGDIOBJ obj, HDC dc = txDC());
<a name="l07466"></a>07466 
<a name="l07467"></a>07467 HWND             _txConsole_Attach();
<a name="l07468"></a>07468 <span class="keywordtype">bool</span>             _txConsole_OK() tx_nodiscard;
<a name="l07469"></a>07469 <span class="keywordtype">bool</span>             _txConsole_Detach           (<span class="keywordtype">bool</span> activate);
<a name="l07470"></a>07470 <span class="keywordtype">bool</span>             _txConsole_Draw             (HDC dc);
<a name="l07471"></a>07471 <span class="keywordtype">bool</span>             _txConsole_SetUnicodeFont();
<a name="l07472"></a>07472 
<a name="l07473"></a>07473 const <span class="keywordtype">char</span>*       txRegisterClass            (const <span class="keywordtype">char</span> classId[], WNDPROC wndProc, <span class="keywordtype">unsigned</span> style, <span class="keywordtype">int</span> backBrush, <span class="keywordtype">int</span> wndExtra);
<a name="l07474"></a>07474 HWND              txCreateExtraWindow        (CREATESTRUCT createData);
<a name="l07475"></a>07475 HICON            _txCreateTXIcon             (<span class="keywordtype">int</span> size) tx_nodiscard;
<a name="l07476"></a>07476 <span class="keywordtype">int</span>              _txSetFinishedText          (HWND wnd);
<a name="l07477"></a>07477 <span class="keywordtype">void</span>             _txPauseBeforeTermination   (HWND canvas);
<a name="l07478"></a>07478 <span class="keywordtype">int</span>              _txIsParentWaitable         (DWORD* parentPID = NULL) tx_nodiscard;
<a name="l07479"></a>07479 <span class="keywordtype">int</span>              _txGetInput();
<a name="l07480"></a>07480 
<a name="l07481"></a>07481 LRESULT CALLBACK _txPlayVideo_WndProc        (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar);
<a name="l07482"></a>07482 const <span class="keywordtype">char</span>*      _txPlayVideo_FindVLC() tx_nodiscard;
<a name="l07483"></a>07483 
<a name="l07484"></a>07484 <span class="keywordtype">bool</span>             _txCreateShortcut           (const <span class="keywordtype">char</span> shortcutName[],
<a name="l07485"></a>07485                                               const <span class="keywordtype">char</span> fileToLink[], const <span class="keywordtype">char</span> args[] = NULL, const <span class="keywordtype">char</span> workDir[] = NULL,
<a name="l07486"></a>07486                                               const <span class="keywordtype">char</span> description[] = NULL, <span class="keywordtype">int</span> cmdShow = SW_SHOWNORMAL,
<a name="l07487"></a>07487                                               const <span class="keywordtype">char</span> iconFile[] = NULL, <span class="keywordtype">int</span> iconIndex = 0, <span class="keywordtype">int</span> fontSize = 0,
<a name="l07488"></a>07488                                               COORD bufSize = <a class="code" href="a00080.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD), COORD wndSize = <a class="code" href="a00080.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD), COORD wndOrg = <a class="code" href="a00080.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD));
<a name="l07489"></a>07489 
<a name="l07490"></a>07490 <span class="keywordtype">void</span>*            _tx_DLGTEMPLATE_Create      (<span class="keywordtype">void</span>* globalMem, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l07491"></a>07491                                               WORD controls, <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l07492"></a>07492                                               const <span class="keywordtype">char</span> caption[], const <span class="keywordtype">char</span> font[], WORD fontsize,
<a name="l07493"></a>07493                                               const <span class="keywordtype">char</span> menu[]) tx_nodiscard;
<a name="l07494"></a>07494 
<a name="l07495"></a>07495 <span class="keywordtype">void</span>*            _tx_DLGTEMPLATE_Add         (<span class="keywordtype">void</span>* dlgTemplatePtr, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l07496"></a>07496                                               <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l07497"></a>07497                                               WORD <span class="keywordtype">id</span>, const <span class="keywordtype">char</span> wclass[], const <span class="keywordtype">char</span> caption[]);
<a name="l07498"></a>07498 
<a name="l07499"></a>07499 const <span class="keywordtype">char</span>*      _txError                    (const <span class="keywordtype">char</span> file[] = NULL, <span class="keywordtype">int</span> line = 0, const <span class="keywordtype">char</span> func[] = NULL, <span class="keywordtype">unsigned</span> color = 0,
<a name="l07500"></a>07500                                               const <span class="keywordtype">char</span> msg[] = NULL, ...) tx_printfy (5);
<a name="l07501"></a>07501 const <span class="keywordtype">char</span>*      _txProcessError             (const <span class="keywordtype">char</span> file[], <span class="keywordtype">int</span> line, const <span class="keywordtype">char</span> func[], <span class="keywordtype">unsigned</span> color,
<a name="l07502"></a>07502                                               const <span class="keywordtype">char</span> msg[], va_list args);
<a name="l07503"></a>07503 <span class="keywordtype">void</span>             _txOnTerminate();
<a name="l07504"></a>07504 <span class="keywordtype">void</span>             _txOnUnexpected();
<a name="l07505"></a>07505 <span class="keywordtype">void</span>             _txOnPureCall();
<a name="l07506"></a>07506 <span class="keywordtype">void</span>             _txOnNewHandlerAnsi();
<a name="l07507"></a>07507 <span class="keywordtype">int</span>              _txOnNewHandler             (<span class="keywordtype">size_t</span> size);
<a name="l07508"></a>07508 <span class="keywordtype">void</span>             _txOnSignal                 (<span class="keywordtype">int</span> signal = 0, <span class="keywordtype">int</span> fpe = 0);
<a name="l07509"></a>07509 BOOL WINAPI      _txOnConsoleCtrlEvent       (DWORD type);
<a name="l07510"></a>07510 <span class="keywordtype">void</span>             _txOnSecurityError          (<span class="keywordtype">int</span> code, <span class="keywordtype">void</span>*);
<a name="l07511"></a>07511 <span class="keywordtype">void</span>             _txOnSecurityErrorAnsi      (const <span class="keywordtype">char</span>* msg, <span class="keywordtype">void</span>* ptr, <span class="keywordtype">int</span> code);
<a name="l07512"></a>07512 <span class="keywordtype">int</span>              _txOnMatherr                (_exception* except);
<a name="l07513"></a>07513 <span class="keywordtype">void</span>             _txOnInvalidParam           (const <span class="keywordtype">wchar_t</span>* expr, const <span class="keywordtype">wchar_t</span>* func, const <span class="keywordtype">wchar_t</span>* file,
<a name="l07514"></a>07514                                               <span class="keywordtype">unsigned</span> line, uintptr_t);
<a name="l07515"></a>07515 <span class="keywordtype">int</span>              _txOnAllocHook              (<span class="keywordtype">int</span> type, <span class="keywordtype">void</span>* data, <span class="keywordtype">size_t</span> size, <span class="keywordtype">int</span> use, <span class="keywordtype">long</span> request,
<a name="l07516"></a>07516                                               const <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* file, <span class="keywordtype">int</span> line);
<a name="l07517"></a>07517 <span class="keywordtype">int</span>              _txOnRTCFailure             (<span class="keywordtype">int</span> type, const <span class="keywordtype">char</span>* file, <span class="keywordtype">int</span> line, const <span class="keywordtype">char</span>* module, const <span class="keywordtype">char</span>* format, ...) tx_printfy (5);
<a name="l07518"></a>07518 <span class="keywordtype">int</span>              _txOnErrorReport            (<span class="keywordtype">int</span> type, const <span class="keywordtype">char</span>* text, <span class="keywordtype">int</span>* ret);
<a name="l07519"></a>07519 <span class="keywordtype">int</span>               tx_glGetError              (<span class="keywordtype">int</span> setError = INT_MIN);
<a name="l07520"></a>07520 
<a name="l07521"></a>07521 <span class="keywordtype">void</span>             _txOnCExit();
<a name="l07522"></a>07522 <span class="keywordtype">void</span>             _txOnExit                   (<span class="keywordtype">int</span>      retcode);
<a name="l07523"></a>07523 <span class="keywordtype">void</span>             _txOnFatalExit              (<span class="keywordtype">int</span>      retcode);
<a name="l07524"></a>07524 <span class="keywordtype">void</span>             _txOnExitProcess            (<span class="keywordtype">unsigned</span> retcode);
<a name="l07525"></a>07525 <span class="keywordtype">void</span>             _txOnFatalAppExitA          (<span class="keywordtype">unsigned</span> action, const <span class="keywordtype">char</span> message[]);
<a name="l07526"></a>07526 <span class="keywordtype">bool</span>             _txOnTerminateProcess       (HANDLE process, <span class="keywordtype">unsigned</span> retcode);
<a name="l07527"></a>07527 LPTOP_LEVEL_EXCEPTION_FILTER WINAPI
<a name="l07528"></a>07528                  _txOnSetUnhandledExceptionFilter (LPTOP_LEVEL_EXCEPTION_FILTER filter);
<a name="l07529"></a>07529 <span class="keywordtype">void</span>             _txWatchdogTerminator       (<span class="keywordtype">void</span>* timeout);  <span class="comment">// Only Arnold-type series are supported, not T1000</span>
<a name="l07530"></a>07530 
<a name="l07531"></a>07531 <span class="keywordtype">long</span> WINAPI      _txVectoredExceptionHandler (EXCEPTION_POINTERS* exc);
<a name="l07532"></a>07532 <span class="keywordtype">long</span> WINAPI      _txUnhandledExceptionFilter (EXCEPTION_POINTERS* exc);
<a name="l07533"></a>07533 <span class="keywordtype">long</span>             _txOnExceptionSEH           (EXCEPTION_POINTERS* exc, const <span class="keywordtype">char</span> func[]);
<a name="l07534"></a>07534 intptr_t         _txDumpExceptionSEH         (<span class="keywordtype">char</span> what[], intptr_t size, const EXCEPTION_RECORD* exc, const <span class="keywordtype">char</span> func[]);
<a name="l07535"></a>07535 intptr_t         _txDumpExceptionObj         (<span class="keywordtype">char</span> what[], intptr_t size, <span class="keywordtype">void</span>* <span class="keywordtype">object</span>, <span class="keywordtype">size_t</span> sizeObj, const std::type_info* type);
<a name="l07536"></a>07536 intptr_t         _txDumpExceptionCPP         (<span class="keywordtype">char</span> what[], intptr_t size, <span class="keywordtype">unsigned</span> code = 0,
<a name="l07537"></a>07537                                               <span class="keywordtype">unsigned</span> params = 0, const ULONG_PTR info[] = NULL);
<a name="l07538"></a>07538 
<a name="l07539"></a>07539 <span class="keywordtype">void</span>             _txStackBackTrace           (const <span class="keywordtype">char</span> file[] = &quot;?&quot;, <span class="keywordtype">int</span> line = 0, const <span class="keywordtype">char</span> func[] = &quot;?&quot;,
<a name="l07540"></a>07540                                               <span class="keywordtype">bool</span> readSource = true);
<a name="l07541"></a>07541 const <span class="keywordtype">char</span>*      _txCaptureStackBackTrace    (<span class="keywordtype">int</span> framesToSkip = 0, <span class="keywordtype">bool</span> readSource = true,
<a name="l07542"></a>07542                                               CONTEXT* context = NULL, HANDLE thread = GetCurrentThread());
<a name="l07543"></a>07543 <span class="keywordtype">int</span>              _txStackWalk                (<span class="keywordtype">int</span> framesToSkip, <span class="keywordtype">size_t</span> szCapture, <span class="keywordtype">void</span>* capture[], <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* backTraceHash,
<a name="l07544"></a>07544                                               CONTEXT* context = NULL, HANDLE thread = GetCurrentThread());
<a name="l07545"></a>07545 const <span class="keywordtype">char</span>*      _txCaptureStackBackTraceTX  (<span class="keywordtype">int</span> framesToSkip = 0, <span class="keywordtype">bool</span> readSource = false);
<a name="l07546"></a>07546 
<a name="l07547"></a>07547 const <span class="keywordtype">char</span>*      _txSymPrintFromAddr         (<span class="keywordtype">void</span>* addr = NULL, const <span class="keywordtype">char</span> format[] = NULL, ...) tx_printfy (2);
<a name="l07548"></a>07548 <span class="keywordtype">bool</span>             _txSymGetFromAddr           (<span class="keywordtype">void</span>* addr, Win32::SYMBOL_INFO** symbol = NULL,
<a name="l07549"></a>07549                                               Win32::IMAGEHLP_LINE64** line = NULL, const <span class="keywordtype">char</span>** module = NULL,
<a name="l07550"></a>07550                                               const <span class="keywordtype">char</span>** source = NULL, <span class="keywordtype">int</span> context = 2);
<a name="l07551"></a>07551 intptr_t         _txReadSource               (<span class="keywordtype">char</span> buf[], intptr_t size, const <span class="keywordtype">char</span> file[],
<a name="l07552"></a>07552                                               <span class="keywordtype">int</span> linStart = 0, <span class="keywordtype">int</span> linEnd = INT_MIN, <span class="keywordtype">int</span> linMark = INT_MIN);
<a name="l07553"></a>07553 <span class="keywordtype">bool</span>             _txCreateMiniDump           (EXCEPTION_POINTERS* exc);
<a name="l07554"></a>07554 
<a name="l07555"></a>07555 uintptr_t        _txSetProcAddress           (const <span class="keywordtype">char</span> funcName[], uintptr_t newFunc, const <span class="keywordtype">char</span> dllName[] = NULL,
<a name="l07556"></a>07556                                               <span class="keywordtype">int</span> useHotPatching = false, HMODULE module = NULL, <span class="keywordtype">bool</span> debug = false);
<a name="l07557"></a>07557 <span class="keywordtype">bool</span>             _txInDll() tx_nodiscard;
<a name="l07558"></a>07558 PROCESSENTRY32*  _txFindProcess              (<span class="keywordtype">unsigned</span> pid = GetCurrentProcessId()) tx_nodiscard;
<a name="l07559"></a>07559 <span class="keywordtype">bool</span>             _txKillProcess              (DWORD pid);
<a name="l07560"></a>07560 <span class="keywordtype">bool</span>             _txIsBadReadPtr             (const <span class="keywordtype">void</span>* address);
<a name="l07561"></a>07561 <span class="keywordtype">bool</span>             _txCheckSourceCP            (<span class="keywordtype">int</span> needCP = _TX_CODEPAGE, <span class="keywordtype">bool</span> verbose = true);
<a name="l07562"></a>07562 <span class="keywordtype">bool</span>             _txGetCommandLine           (<span class="keywordtype">wchar_t</span> cmdLine[], <span class="keywordtype">size_t</span> szCmdLine, <span class="keywordtype">unsigned</span> pid = _getpid());
<a name="l07563"></a>07563 IMAGE_NT_HEADERS*_txGetNtHeaders             (HMODULE module = GetModuleHandle (NULL)) tx_nodiscard;
<a name="l07564"></a>07564 const <span class="keywordtype">char</span>*      _txAppInfo() tx_nodiscard;
<a name="l07565"></a>07565 
<a name="l07566"></a>07566 intptr_t         _tx_snprintf_s              (<span class="keywordtype">char</span> stream[], intptr_t size, const <span class="keywordtype">char</span> format[], ...) tx_printfy (3);
<a name="l07567"></a>07567 intptr_t         _tx_vsnprintf_s             (<span class="keywordtype">char</span> stream[], intptr_t size, const <span class="keywordtype">char</span> format[], va_list arg);
<a name="l07568"></a>07568 <span class="keywordtype">void</span>              txReopenStdio();
<a name="l07569"></a>07569 
<a name="l07570"></a>07570 <span class="preprocessor">#if defined (_CLANG_VER) &amp;&amp; !defined (_MSC_VER)</span>
<a name="l07571"></a>07571 <span class="preprocessor"></span><span class="keywordtype">void</span>             _txLibCppDebugFunction      (std::__libcpp_debug_info <span class="keyword">const</span>&amp; info);
<a name="l07572"></a>07572 <span class="preprocessor">#endif</span>
<a name="l07573"></a>07573 <span class="preprocessor"></span>
<a name="l07574"></a>07574 <span class="preprocessor">#if defined (__CYGWIN__)</span>
<a name="l07575"></a>07575 <span class="preprocessor"></span>
<a name="l07576"></a>07576 <span class="keywordtype">int</span>              _getch();
<a name="l07577"></a>07577 <span class="keywordtype">int</span>              _putch (<span class="keywordtype">int</span> ch);
<a name="l07578"></a>07578 <span class="keywordtype">int</span>              _kbhit() tx_nodiscard;
<a name="l07579"></a>07579 
<a name="l07580"></a>07580 <span class="preprocessor">#endif</span>
<a name="l07581"></a>07581 <span class="preprocessor"></span>
<a name="l07582"></a>07582 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07583"></a>07583 <span class="comment">// There are macros for __FILE__ and __LINE__ to work properly.</span>
<a name="l07584"></a>07584 
<a name="l07585"></a>07585 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l07586"></a>07586 <span class="preprocessor"></span>
<a name="l07587"></a>07587 <span class="preprocessor">    #define  _TX_ARGUMENT_FAILED( cond )       ( !(cond) &amp;&amp;                                          \</span>
<a name="l07588"></a>07588 <span class="preprocessor">                                                     (SetLastErrorEx (ERROR_BAD_ARGUMENTS, 0), 1) &amp;&amp; \</span>
<a name="l07589"></a>07589 <span class="preprocessor">                                                     (assert (cond), true) )</span>
<a name="l07590"></a>07590 <span class="preprocessor"></span>
<a name="l07591"></a>07591 <span class="preprocessor">    #define  _TX_TXWINDOW_FAILED()             ( !txOK() &amp;&amp;                                          \</span>
<a name="l07592"></a>07592 <span class="preprocessor">                                                     (SetLastErrorEx (ERROR_INVALID_DATA,  0), 1) &amp;&amp; \</span>
<a name="l07593"></a>07593 <span class="preprocessor">                                                     (TX_ERROR (&quot;\a&quot; &quot;Окно рисования не создано или не в порядке.&quot;), 1) )</span>
<a name="l07594"></a>07594 <span class="preprocessor"></span>
<a name="l07595"></a>07595 <span class="preprocessor">    #define  _TX_HDC_FAILED( dc )              ( !Win32::GetObjectType (dc) &amp;&amp;                       \</span>
<a name="l07596"></a>07596 <span class="preprocessor">                                                     (SetLastErrorEx (ERROR_INVALID_DATA,  0), 1) &amp;&amp; \</span>
<a name="l07597"></a>07597 <span class="preprocessor">                                                     (TX_ERROR (&quot;Параметр \&quot;%s\&quot; неверен. Возможно, этот холст не создан, &quot; \</span>
<a name="l07598"></a>07598 <span class="preprocessor">                                                                &quot;или уже уничтожен, или не загрузилась картинка.&quot;, #dc), 1) )</span>
<a name="l07599"></a>07599 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_DEFAULT_HDC_FAILED(dc)         ( (!(dc) &amp;&amp;                                           \</span>
<a name="l07600"></a>07600 <span class="preprocessor">                                                     _TX_TXWINDOW_FAILED()) || _TX_HDC_FAILED (dc) )</span>
<a name="l07601"></a>07601 <span class="preprocessor"></span>
<a name="l07602"></a>07602 <span class="preprocessor">#else</span>
<a name="l07603"></a>07603 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_ARGUMENT_FAILED( cond )       ( !(cond) &amp;&amp;                                          \</span>
<a name="l07604"></a>07604 <span class="preprocessor">                                                     (SetLastErrorEx (ERROR_BAD_ARGUMENTS, 0), 1) )</span>
<a name="l07605"></a>07605 <span class="preprocessor"></span>
<a name="l07606"></a>07606 <span class="preprocessor">    #define  _TX_TXWINDOW_FAILED()             ( !txOK() &amp;&amp;                                          \</span>
<a name="l07607"></a>07607 <span class="preprocessor">                                                     (SetLastErrorEx (ERROR_INVALID_DATA,  0), 1) )</span>
<a name="l07608"></a>07608 <span class="preprocessor"></span>
<a name="l07609"></a>07609 <span class="preprocessor">    #define  _TX_HDC_FAILED( dc )              ( !Win32::GetObjectType (dc) &amp;&amp;                       \</span>
<a name="l07610"></a>07610 <span class="preprocessor">                                                     (SetLastErrorEx (ERROR_INVALID_DATA,  0), 1) )</span>
<a name="l07611"></a>07611 <span class="preprocessor"></span>
<a name="l07612"></a>07612 <span class="preprocessor">    #define _TX_DEFAULT_HDC_FAILED(dc)         ( !(dc) &amp;&amp;                                            \</span>
<a name="l07613"></a>07613 <span class="preprocessor">                                                     (SetLastErrorEx (ERROR_INVALID_DATA,  0), 1) )</span>
<a name="l07614"></a>07614 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l07615"></a>07615 <span class="preprocessor"></span>
<a name="l07616"></a>07616 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07617"></a>07617 <span class="comment">// Take action in debug configuration only.</span>
<a name="l07618"></a>07618 <span class="comment">// Definition ({ expr; }) would be better, but MSVC rejects it. So sad. :&#39;(</span>
<a name="l07619"></a>07619 
<a name="l07620"></a>07620 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l07621"></a>07621 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_ON_DEBUG( code )              { code; }</span>
<a name="l07622"></a>07622 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l07623"></a>07623 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_ON_DEBUG( code )              ;</span>
<a name="l07624"></a>07624 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l07625"></a>07625 <span class="preprocessor"></span>
<a name="l07626"></a>07626 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07627"></a>07627 <span class="comment">// Invokes an error without location information. &quot;$$&quot; restores TX-related call location context</span>
<a name="l07628"></a>07628 
<a name="l07629"></a>07629 <span class="preprocessor">#define _TX_UNEXPECTED( ... )                  $$ _txError (NULL, 0, NULL, 0, ##__VA_ARGS__)</span>
<a name="l07630"></a>07630 <span class="preprocessor"></span>
<a name="l07631"></a>07631 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07632"></a>07632 <span class="comment">// Safe call of a function via its pointer</span>
<a name="l07633"></a>07633 
<a name="l07634"></a>07634 <span class="preprocessor">#define _TX_CALL(  func, param )               ( (func)? ((func) param) :       0 )</span>
<a name="l07635"></a>07635 <span class="preprocessor"></span><span class="preprocessor">#define _TX_CALLv( func, param )               ( (func)? ((func) param) : (void)0 )</span>
<a name="l07636"></a>07636 <span class="preprocessor"></span>
<a name="l07637"></a>07637 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07638"></a>07638 <span class="comment">// This is a macro because cond is an expression and is not always a function. Lack of lambdas in pre-C++0x.</span>
<a name="l07639"></a>07639 
<a name="l07640"></a>07640 <span class="preprocessor">#define      _txWaitFor( cond, time )          { for (DWORD _t = GetTickCount() + (time); \</span>
<a name="l07641"></a>07641 <span class="preprocessor">                                                      !(cond) &amp;&amp; GetTickCount() &lt; _t;     \</span>
<a name="l07642"></a>07642 <span class="preprocessor">                                                      Sleep (_txWindowUpdateInterval)) ;  \</span>
<a name="l07643"></a>07643 <span class="preprocessor">                                                 if  (!(cond))                            \</span>
<a name="l07644"></a>07644 <span class="preprocessor">                                                      _txTrace (__FILE__, __LINE__, NULL, &quot;WARNING: Timeout: &quot; #cond &quot;.&quot;); }</span>
<a name="l07645"></a>07645 <span class="preprocessor"></span><span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07646"></a>07646 <span class="comment">// Detouring in case of SEH mechanism</span>
<a name="l07647"></a>07647 
<a name="l07648"></a>07648 <span class="preprocessor">#define _txSetJmp()                            ( setjmp (_txDumpExceptionObjJmp) == 0 )</span>
<a name="l07649"></a>07649 <span class="preprocessor"></span>
<a name="l07650"></a>07650 <span class="preprocessor">#define _txClearJmp()                          { *(unsigned long long*) _txDumpExceptionObjJmp = 0; }</span>
<a name="l07651"></a>07651 <span class="preprocessor"></span>
<a name="l07653"></a>07653 <span class="comment">//}</span>
<a name="l07654"></a>07654 <span class="comment">//=================================================================================================================</span>
<a name="l07655"></a>07655 
<a name="l07656"></a>07656 <span class="comment">//=================================================================================================================</span>
<a name="l07657"></a>07657 <span class="comment">//{          Internal global data</span>
<a name="l07659"></a>07659 <span class="comment"></span><span class="comment">//</span>
<a name="l07660"></a>07660 <span class="comment">//           Данные не упакованы в структуру или класс, для того, чтобы это сделали Вы сами :)</span>
<a name="l07661"></a>07661 <span class="comment">//</span>
<a name="l07662"></a>07662 <span class="comment">//           Если вы пишете свою библиотеку и используете TXLib.h как пример, не следуйте ему и не делайте так же.</span>
<a name="l07663"></a>07663 <span class="comment">//           Здесь это сделано только в образовательных целях.</span>
<a name="l07664"></a>07664 <span class="comment">//</span>
<a name="l07665"></a>07665 <span class="comment">//           Будьте практичнее, сделайте структуру и глобальную функцию для доступа к ней, или класс.</span>
<a name="l07666"></a>07666 <span class="comment">//=================================================================================================================</span>
<a name="l07668"></a>07668 <span class="comment"></span>
<a name="l07669"></a>07669 <span class="keywordtype">int</span>                          _txInitialized              = <a class="code" href="a00084.htm#gaab281ee20ea6be5eae34d0e15bf03dcf" title="Запрет ранней инициализации TXLib.">_TX_NOINIT</a> || _txInitialize();
<a name="l07670"></a>07670 
<a name="l07671"></a>07671 <span class="keyword">volatile</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span>      _txCanaryFirst              = 0x776F656D; <span class="comment">// A very system value</span>
<a name="l07672"></a>07672 
<a name="l07673"></a>07673 <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span>            _txMainThreadId             = 0;          <span class="comment">// ID потока, где выполняется main()</span>
<a name="l07674"></a>07674 <span class="keyword">volatile</span> HANDLE              _txMainThread               = NULL;       <span class="comment">// Дексриптор этого потока</span>
<a name="l07675"></a>07675 
<a name="l07676"></a>07676 <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span>            _txCanvas_ThreadId          = 0;          <span class="comment">// ID потока, владеющего окном холста TXLib</span>
<a name="l07677"></a>07677 <span class="keyword">volatile</span> HANDLE              _txCanvas_Thread            = NULL;       <span class="comment">// Дексриптор этого потока</span>
<a name="l07678"></a>07678 <span class="keyword">volatile</span> HWND                _txCanvas_Window            = NULL;       <span class="comment">// Дескриптор окна холста TXLib</span>
<a name="l07679"></a>07679 
<a name="l07680"></a>07680 HDC                          _txCanvas_BackBuf[2]        = {NULL,      <span class="comment">// [0] Main TXLib in-memory DC, where user&#39;s pictures lies</span>
<a name="l07681"></a>07681                                                             NULL};     <span class="comment">// [1] Image ready for auto-refresh, see txCanvas_OnPAINT()</span>
<a name="l07682"></a>07682 
<a name="l07683"></a>07683 RGBQUAD*                     _txCanvas_Pixels            = NULL;       <span class="comment">// Memory buffer of _txCanvas_BackBuf[0]</span>
<a name="l07684"></a>07684 
<a name="l07685"></a>07685 HBITMAP                      _txStockBitmap              = NULL;       <span class="comment">// Equivalent of GetStockObject (BITMAP),</span>
<a name="l07686"></a>07686                                                                        <span class="comment">// see https://devblogs.microsoft.com/oldnewthing/20100416-00/?p=14313</span>
<a name="l07687"></a>07687 
<a name="l07688"></a>07688 CRITICAL_SECTION             _txCanvas_LockBackBuf       = {0,-1};     <span class="comment">// Prevent simultaneous access to back buffer, see txLock()</span>
<a name="l07689"></a>07689 
<a name="l07690"></a>07690 UINT_PTR                     _txCanvas_RefreshTimer      = 1;          <span class="comment">// Timer ID to redraw TXLib window</span>
<a name="l07691"></a>07691 <span class="keyword">volatile</span> <span class="keywordtype">int</span>                 _txCanvas_RefreshLock       = 0;          <span class="comment">// Blocks auto on-timer canvas update, see txBegin/txEnd</span>
<a name="l07692"></a>07692 
<a name="l07693"></a>07693 ::std::vector&lt;HDC&gt;*          _txCanvas_UserDCs           = NULL;       <span class="comment">// List of DCs allocated, for auto-free</span>
<a name="l07694"></a>07694 
<a name="l07695"></a>07695 <span class="keyword">volatile</span> <span class="keywordtype">bool</span>                _txConsole_IsBlinking       = <span class="keyword">true</span>;       <span class="comment">// To blink or not to blink, that is the question.</span>
<a name="l07696"></a>07696 
<a name="l07697"></a>07697 <span class="keywordtype">bool</span>                         _txConsole                  = <span class="keyword">false</span>;      <span class="comment">// Only first TXLib module in app can own the console</span>
<a name="l07698"></a>07698 <span class="keywordtype">bool</span>                         _txMain                     = <span class="keyword">false</span>;      <span class="comment">// First TXLib wnd opened (closing it terminates program)</span>
<a name="l07699"></a>07699 <span class="keywordtype">bool</span>                         _txIsDll                    = <span class="keyword">false</span>;      <span class="comment">// TXLib module is in DLL</span>
<a name="l07700"></a>07700 <span class="keyword">volatile</span> <span class="keywordtype">bool</span>                _txRunning                  = <span class="keyword">false</span>;      <span class="comment">// main() is still running</span>
<a name="l07701"></a>07701 <span class="keyword">volatile</span> <span class="keywordtype">bool</span>                _txExit                     = <span class="keyword">false</span>;      <span class="comment">// exit() is active</span>
<a name="l07702"></a>07702 
<a name="l07703"></a>07703 <span class="keyword">volatile</span> POINT               _txMousePos                 = {-1,-1};    <span class="comment">// Ask Captn Obviouos about it. See txCanvas_OnMOUSE()</span>
<a name="l07704"></a>07704 <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span>            _txMouseButtons             = 0;
<a name="l07705"></a>07705 
<a name="l07706"></a>07706 <span class="keyword">volatile</span> WNDPROC             _txAltWndProc               = NULL;       <span class="comment">// Альтернативная оконная функция. См. txSetWindowsHook().</span>
<a name="l07707"></a>07707 
<a name="l07708"></a>07708 _tx_thread _txLoc            _txLoc::Cur                 = {};         <span class="comment">// Execution point tracking and trace state, see &quot;$&quot; macro</span>
<a name="l07709"></a>07709 
<a name="l07710"></a>07710 <span class="keyword">volatile</span> <span class="keywordtype">int</span>                 _txErrors                   = 0;          <span class="comment">// TX_ERROR calls sequental number</span>
<a name="l07711"></a>07711 <span class="keywordtype">int</span>                          _txOGLError                 = 0;          <span class="comment">// Last OpenGL error when using tx_glGetError()</span>
<a name="l07712"></a>07712 <span class="keyword">volatile</span> <span class="keywordtype">long</span>                _txSENumber                 = 0;          <span class="comment">// SEH exceptions sequental number</span>
<a name="l07713"></a>07713 <span class="keyword">volatile</span> <span class="keywordtype">long</span>                _txSEFatalNumber            = 0;          <span class="comment">// SEH fatal exceptions sequental number</span>
<a name="l07714"></a>07714 <span class="keywordtype">char</span>                         _txDumpSE [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>]     = <span class="stringliteral">&quot;&quot;</span>;         <span class="comment">// SEH dump data area</span>
<a name="l07715"></a>07715 <span class="keywordtype">char</span>                         _txTraceSE[<a class="code" href="a00084.htm#ga9982623aefbe28deab03b1252777ec2a" title="Размеры очень больших статических буферов.">_TX_HUGEBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;         <span class="comment">// Stack trace data area</span>
<a name="l07716"></a>07716 
<a name="l07717"></a>07717 LPTOP_LEVEL_EXCEPTION_FILTER _txPrevUEFilter             = NULL;       <span class="comment">// Previous UnhandledExceptionFilter</span>
<a name="l07718"></a>07718 
<a name="l07719"></a>07719 jmp_buf                      _txDumpExceptionObjJmp      = {};         <span class="comment">// Hook for _txDumpExceptionObj</span>
<a name="l07720"></a>07720 
<a name="l07721"></a>07721 <span class="keyword">const</span> <span class="keyword">volatile</span> uintptr_t     _txForceImport[]            = { (uintptr_t) ::TerminateProcess,              (uintptr_t) ::ExitProcess,
<a name="l07722"></a>07722                                                              (uintptr_t) ::FatalExit,                     (uintptr_t) ::FatalAppExitA,
<a name="l07723"></a>07723                                                              (uintptr_t) ::exit,                          (uintptr_t) Win32::_controlfp,
<a name="l07724"></a>07724                                                              (uintptr_t) Win32::Polyline,                 (uintptr_t) Win32::PolyBezier,
<a name="l07725"></a>07725                                                              (uintptr_t) Win32::RoundRect,                (uintptr_t) Win32::RemoveVectoredExceptionHandler,
<a name="l07726"></a>07726                                                              (uintptr_t) Win32::PlgBlt,                   (uintptr_t) Win32::RtlCaptureStackBackTrace,
<a name="l07727"></a>07727                                                              (uintptr_t) Win32::SymInitialize,            (uintptr_t) Win32::MinGW::SymInitialize,
<a name="l07728"></a>07728                                                              (uintptr_t) Win32::SymSetOptions,            (uintptr_t) Win32::MinGW::SymSetOptions,
<a name="l07729"></a>07729                                                              (uintptr_t) Win32::SymGetLineFromAddr64,     (uintptr_t) Win32::MinGW::SymGetLineFromAddr64,
<a name="l07730"></a>07730                                                              (uintptr_t) Win32::SymFromAddr,              (uintptr_t) Win32::MinGW::SymFromAddr,
<a name="l07731"></a>07731                                                              (uintptr_t) Win32::SymCleanup,               (uintptr_t) Win32::MinGW::SymCleanup,
<a name="l07732"></a>07732                                                              (uintptr_t) Win32::SymGetModuleBase64,       (uintptr_t) Win32::MinGW::SymGetModuleBase64,
<a name="l07733"></a>07733                                                              (uintptr_t) Win32::SymFunctionTableAccess64, (uintptr_t) Win32::MinGW::SymFunctionTableAccess64,
<a name="l07734"></a>07734                                                              (uintptr_t) Win32::StackWalk64,              (uintptr_t) Win32::MinGW::StackWalk64,
<a name="l07735"></a>07735                                                              (uintptr_t) Win32::StrStrIA,                 (uintptr_t) Win32::Wow64GetThreadContext };
<a name="l07736"></a>07736 
<a name="l07737"></a>07737 <span class="keyword">volatile</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span>      _txCanaryLast               = 0x5E2E2E5E; <span class="comment">// Another very system value</span>
<a name="l07738"></a>07738 
<a name="l07740"></a>07740 <span class="comment">//}</span>
<a name="l07741"></a>07741 <span class="comment">//=================================================================================================================</span>
<a name="l07742"></a>07742 
<a name="l07743"></a>07743 <span class="comment">//=================================================================================================================</span>
<a name="l07744"></a>07744 <span class="comment">//{          TXLib engine init/check/cleanup</span>
<a name="l07746"></a>07746 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l07748"></a>07748 <span class="comment"></span>
<a name="l07749"></a>07749 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07750"></a>07750 <span class="comment">//{          Early initialization</span>
<a name="l07751"></a>07751 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07752"></a>07752 
<a name="l07753"></a>07753 <span class="keywordtype">int</span> _txInitialize()
<a name="l07754"></a>07754     {
<a name="l07755"></a>07755     <span class="keywordflow">if</span> (_txInitialized) <span class="keywordflow">return</span> 1;
<a name="l07756"></a>07756     _txInitialized = 1;
<a name="l07757"></a>07757 
<a name="l07758"></a>07758 <span class="preprocessor">    #if defined (_TX_ALLOC_BREAK) &amp;&amp; defined (_MSC_VER)  // See http://msdn.microsoft.com/en-us/library/w2fhc9a3%28v=vs.90%29.aspx</span>
<a name="l07759"></a>07759 <span class="preprocessor"></span>    _CrtSetBreakAlloc (_TX_ALLOC_BREAK);                 <span class="comment">// and http://support.microsoft.com/ru-ru/kb/151585</span>
<a name="l07760"></a>07760 <span class="preprocessor">    #endif</span>
<a name="l07761"></a>07761 <span class="preprocessor"></span>
<a name="l07762"></a>07762 <span class="preprocessor">    #if defined (_TX_ALLOW_TRACE)</span>
<a name="l07763"></a>07763 <span class="preprocessor"></span>    _txLocLvlSet (1);
<a name="l07764"></a>07764 <span class="preprocessor">    #endif</span>
<a name="l07765"></a>07765 <span class="preprocessor"></span>
<a name="l07766"></a>07766     _TX_ON_DEBUG (OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l07767"></a>07767                   OutputDebugString (_TX_VERSION <span class="stringliteral">&quot; - The Dumb Artist Library, &quot;</span> _TX_AUTHOR <span class="stringliteral">&quot;: \&quot;&quot;</span> __FILE__ <span class="stringliteral">&quot;\&quot; &quot;</span>
<a name="l07768"></a>07768                                      <span class="stringliteral">&quot;compiled &quot;</span> __DATE__ <span class="stringliteral">&quot; &quot;</span> __TIME__ <span class="stringliteral">&quot;, &quot;</span> <a class="code" href="a00084.htm#ga3e287c38947fea870d01588fbd2a5fc9" title="Имя режима сборки">_TX_BUILDMODE</a> <span class="stringliteral">&quot; mode, module: &quot;</span> <a class="code" href="a00084.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib. Входит в диагностические сообщения.">_TX_MODULE</a> <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l07769"></a>07769                   OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>));
<a name="l07770"></a>07770 
<a name="l07771"></a>07771     _txMainThreadId = GetCurrentThreadId();
<a name="l07772"></a>07772     _txMainThread   = OpenThread (THREAD_ALL_ACCESS, <span class="keyword">false</span>, _txMainThreadId);
<a name="l07773"></a>07773 
<a name="l07774"></a>07774 $3  _txIsDll = _txInDll();
<a name="l07775"></a>07775 
<a name="l07776"></a>07776 $   <span class="keywordflow">if</span> (!_txIsDll)
<a name="l07777"></a>07777         {
<a name="l07778"></a>07778 $       _txConsole = ! FindAtom (<span class="stringliteral">&quot;_txConsole&quot;</span>);
<a name="l07779"></a>07779 $       (void)          AddAtom (<span class="stringliteral">&quot;_txConsole&quot;</span>);
<a name="l07780"></a>07780         }
<a name="l07781"></a>07781 
<a name="l07782"></a>07782 $   <span class="keywordflow">if</span> (_txConsole)
<a name="l07783"></a>07783         {
<a name="l07784"></a>07784 $       _txCheckSourceCP (_TX_CODEPAGE, <span class="keyword">true</span>);
<a name="l07785"></a>07785 
<a name="l07786"></a>07786 $       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> stackSize = <a class="code" href="a00084.htm#ga7b8b43782557dd87528da77b083364ec" title="Минимальный размер стека для потоков программы.">_TX_STACKSIZE</a>;
<a name="l07787"></a>07787 $       _TX_CALL (Win32::SetThreadStackGuarantee, (&amp;stackSize));
<a name="l07788"></a>07788 
<a name="l07789"></a>07789 $       _txOnSignal();
<a name="l07790"></a>07790 
<a name="l07791"></a>07791 $       <span class="keywordflow">if</span> (!*<a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>)
<a name="l07792"></a>07792             {$ _tx_snprintf_s (<a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>, <span class="keyword">sizeof</span> (<a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>) - 1, <span class="stringliteral">&quot;%s.log&quot;</span>, <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a>()); }
<a name="l07793"></a>07793 
<a name="l07794"></a>07794 $       <span class="keywordflow">if</span> (!_txIsDll)
<a name="l07795"></a>07795             {
<a name="l07796"></a>07796 $           _TX_CALL  (Win32::AddVectoredExceptionHandler, (1, (PVECTORED_EXCEPTION_HANDLER)  _txVectoredExceptionHandler));
<a name="l07797"></a>07797 $           _txPrevUEFilter = SetUnhandledExceptionFilter  (   (LPTOP_LEVEL_EXCEPTION_FILTER) _txUnhandledExceptionFilter);
<a name="l07798"></a>07798             }
<a name="l07799"></a>07799 
<a name="l07800"></a>07800 $       ::std::set_terminate             (_txOnTerminate);
<a name="l07801"></a>07801 $       ::std::set_new_handler           (_txOnNewHandlerAnsi);
<a name="l07802"></a>07802 $       _TX_CALL (Win32::set_unexpected, (_txOnUnexpected));
<a name="l07803"></a>07803 
<a name="l07804"></a>07804 <span class="preprocessor">        #if defined (_CLANG_VER) &amp;&amp; !defined (_MSC_VER)</span>
<a name="l07805"></a>07805 <span class="preprocessor"></span>$       ::std::__libcpp_debug_function = _txLibCppDebugFunction;
<a name="l07806"></a>07806 <span class="preprocessor">        #endif</span>
<a name="l07807"></a>07807 <span class="preprocessor"></span>
<a name="l07808"></a>07808 $       SetConsoleCtrlHandler (_txOnConsoleCtrlEvent, <span class="keyword">true</span>);
<a name="l07809"></a>07809 
<a name="l07810"></a>07810 $       SetErrorMode (SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);
<a name="l07811"></a>07811 
<a name="l07812"></a>07812 <span class="preprocessor">        #if defined (_MSC_VER)</span>
<a name="l07813"></a>07813 <span class="preprocessor"></span>
<a name="l07814"></a>07814 $       _set_printf_count_output (1);
<a name="l07815"></a>07815 
<a name="l07816"></a>07816 $       _set_new_handler (_txOnNewHandler);
<a name="l07817"></a>07817 $       _set_new_mode (1);
<a name="l07818"></a>07818 
<a name="l07819"></a>07819 <span class="preprocessor">        #if !defined (_CLANG_VER)</span>
<a name="l07820"></a>07820 <span class="preprocessor"></span>
<a name="l07821"></a>07821 $       _CrtSetDbgFlag (_CRTDBG_ALLOC_MEM_DF | _CRTDBG_CHECK_ALWAYS_DF | _CRTDBG_LEAK_CHECK_DF);
<a name="l07822"></a>07822 $       _CrtSetAllocHook (_txOnAllocHook);
<a name="l07823"></a>07823 
<a name="l07824"></a>07824 $       <span class="keywordtype">unsigned</span> mode = _CRTDBG_MODE_FILE;
<a name="l07825"></a>07825 $       <span class="keywordflow">if</span> (_CrtSetReportHook2 (_CRT_RPTHOOK_INSTALL, (_CRT_REPORT_HOOK) _txOnErrorReport) &gt; 0) mode = 0;
<a name="l07826"></a>07826 
<a name="l07827"></a>07827 $       _CrtSetReportMode (_CRT_WARN,   _CRTDBG_MODE_DEBUG | mode);
<a name="l07828"></a>07828 $       _CrtSetReportMode (_CRT_ERROR,  _CRTDBG_MODE_DEBUG | mode | _CRTDBG_MODE_WNDW);
<a name="l07829"></a>07829 $       _CrtSetReportMode (_CRT_ASSERT, _CRTDBG_MODE_DEBUG | mode | _CRTDBG_MODE_WNDW);
<a name="l07830"></a>07830 $       _CrtSetReportFile (_CRT_WARN,   _CRTDBG_FILE_STDERR);
<a name="l07831"></a>07831 $       _CrtSetReportFile (_CRT_ERROR,  _CRTDBG_FILE_STDERR);
<a name="l07832"></a>07832 $       _CrtSetReportFile (_CRT_ASSERT, _CRTDBG_FILE_STDERR);
<a name="l07833"></a>07833 
<a name="l07834"></a>07834 <span class="preprocessor">        #endif</span>
<a name="l07835"></a>07835 <span class="preprocessor"></span>
<a name="l07836"></a>07836 $       _set_abort_behavior (_WRITE_ABORT_MSG, _WRITE_ABORT_MSG);
<a name="l07837"></a>07837 $       _set_abort_behavior (0,                _CALL_REPORTFAULT);
<a name="l07838"></a>07838 
<a name="l07839"></a>07839 $       _RTC_SetErrorFunc              (_txOnRTCFailure);
<a name="l07840"></a>07840 $       _set_purecall_handler          (_txOnPureCall);
<a name="l07841"></a>07841 $       _set_invalid_parameter_handler (_txOnInvalidParam);
<a name="l07842"></a>07842 
<a name="l07843"></a>07843 <span class="preprocessor">        #endif</span>
<a name="l07844"></a>07844 <span class="preprocessor"></span>
<a name="l07845"></a>07845 <span class="preprocessor">        #if defined (__STDC_LIB_EXT1__)</span>
<a name="l07846"></a>07846 <span class="preprocessor"></span>$       ::std::set_constraint_handler_s (_txOnSecurityErrorAnsi);
<a name="l07847"></a>07847 <span class="preprocessor">        #endif</span>
<a name="l07848"></a>07848 <span class="preprocessor"></span>
<a name="l07849"></a>07849 <span class="preprocessor">        #if !defined (__CYGWIN__) &amp;&amp; defined (_GCC_VER) &amp;&amp; (_GCC_VER &gt;= 530) &amp;&amp; !defined (i386)</span>
<a name="l07850"></a>07850 <span class="preprocessor"></span>$       __setusermatherr (_txOnMatherr);
<a name="l07851"></a>07851 <span class="preprocessor">        #endif</span>
<a name="l07852"></a>07852 <span class="preprocessor"></span>
<a name="l07853"></a>07853 <span class="preprocessor">        #if !defined (__CYGWIN__)</span>
<a name="l07854"></a>07854 <span class="preprocessor"></span>$       _set_error_mode (_OUT_TO_MSGBOX | _OUT_TO_STDERR);
<a name="l07855"></a>07855 <span class="preprocessor">        #endif</span>
<a name="l07856"></a>07856 <span class="preprocessor"></span>
<a name="l07857"></a>07857 $       HWND console = _txConsole_Attach();
<a name="l07858"></a>07858 $       SetWindowTextA (console, <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>));
<a name="l07859"></a>07859         }
<a name="l07860"></a>07860 
<a name="l07861"></a>07861 $   InitializeCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l07862"></a>07862 
<a name="l07863"></a>07863 $   _txSetProcAddress (<span class="stringliteral">&quot;ExitProcess&quot;</span>,                 (uintptr_t) _txOnExitProcess,                 <span class="stringliteral">&quot;KERNEL32.DLL&quot;</span>);
<a name="l07864"></a>07864 $   _txSetProcAddress (<span class="stringliteral">&quot;TerminateProcess&quot;</span>,            (uintptr_t) _txOnTerminateProcess,            <span class="stringliteral">&quot;KERNEL32.DLL&quot;</span>);
<a name="l07865"></a>07865 $   _txSetProcAddress (<span class="stringliteral">&quot;FatalExit&quot;</span>,                   (uintptr_t) _txOnFatalExit,                   <span class="stringliteral">&quot;KERNEL32.DLL&quot;</span>);
<a name="l07866"></a>07866 $   _txSetProcAddress (<span class="stringliteral">&quot;FatalAppExitA&quot;</span>,               (uintptr_t) _txOnFatalAppExitA,               <span class="stringliteral">&quot;KERNEL32.DLL&quot;</span>);
<a name="l07867"></a>07867 $   _txSetProcAddress (<span class="stringliteral">&quot;UnhandledExceptionFilter&quot;</span>,    (uintptr_t) _txUnhandledExceptionFilter,      <span class="stringliteral">&quot;KERNEL32.DLL&quot;</span>, <span class="keyword">true</span>);
<a name="l07868"></a>07868 $   _txSetProcAddress (<span class="stringliteral">&quot;SetUnhandledExceptionFilter&quot;</span>, (uintptr_t) _txOnSetUnhandledExceptionFilter, <span class="stringliteral">&quot;KERNEL32.DLL&quot;</span>);
<a name="l07869"></a>07869 $   _txSetProcAddress (<span class="stringliteral">&quot;exit&quot;</span>,                        (uintptr_t) _txOnExit);
<a name="l07870"></a>07870 $   _txSetProcAddress (<span class="stringliteral">&quot;_cexit&quot;</span>,                      (uintptr_t) _txOnCExit);
<a name="l07871"></a>07871 
<a name="l07872"></a>07872 $   atexit (_txCleanup);
<a name="l07873"></a>07873 
<a name="l07874"></a>07874 $   <span class="keywordflow">if</span> (_txConsole)
<a name="l07875"></a>07875         {
<a name="l07876"></a>07876 $       <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_LIGHTGRAY);
<a name="l07877"></a>07877 
<a name="l07878"></a>07878 $       <a class="code" href="a00080.htm#ga5de732de72c46b992ac2feeac2de7e42" title="Переинициализирует математический сопроцессор">tx_fpreset</a>();
<a name="l07879"></a>07879 
<a name="l07880"></a>07880 $       srand ((<span class="keywordtype">unsigned</span>) time (NULL));
<a name="l07881"></a>07881 
<a name="l07882"></a>07882 $       SetLastError (0);
<a name="l07883"></a>07883 $       errno = 0;
<a name="l07884"></a>07884 
<a name="l07885"></a>07885 <span class="preprocessor">        #if !defined (__CYGWIN__)</span>
<a name="l07886"></a>07886 <span class="preprocessor"></span>$       _doserrno = 0;
<a name="l07887"></a>07887 <span class="preprocessor">        #endif</span>
<a name="l07888"></a>07888 <span class="preprocessor"></span>        }
<a name="l07889"></a>07889 
<a name="l07890"></a>07890 $   HDC dc = Win32::CreateCompatibleDC (NULL); dc <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l07891"></a>07891 $   _txStockBitmap = (HBITMAP) Win32::SelectObject (dc, Win32::CreateCompatibleBitmap (dc, 1, 1)); _txStockBitmap <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l07892"></a>07892 $   Win32::DeleteObject (Win32::SelectObject (dc, _txStockBitmap)) asserted;
<a name="l07893"></a>07893 $   Win32::DeleteDC (dc) asserted;
<a name="l07894"></a>07894 
<a name="l07895"></a>07895 $   return 1;
<a name="l07896"></a>07896     }
<a name="l07897"></a>07897 
<a name="l07898"></a>07898 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07899"></a>07899 
<a name="l07900"></a>07900 <span class="keywordtype">bool</span> _txCheckSourceCP (<span class="keywordtype">int</span> needCP <span class="comment">/*= _TX_CODEPAGE*/</span>, <span class="keywordtype">bool</span> verbose <span class="comment">/*= true*/</span>)
<a name="l07901"></a>07901     {
<a name="l07902"></a>07902 $3  <span class="keyword">const</span> <span class="keywordtype">char</span>* sCodePage = NULL;
<a name="l07903"></a>07903 $   <span class="keywordtype">int</span> codePage = 0;
<a name="l07904"></a>07904 
<a name="l07905"></a>07905 $   <span class="keywordflow">switch</span> (((<span class="keywordtype">unsigned</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*) <span class="stringliteral">&quot;А&quot;</span>) [0])
<a name="l07906"></a>07906         {
<a name="l07907"></a>07907         <span class="keywordflow">case</span> 192: {$ codePage =  1251; sCodePage = <span class="stringliteral">&quot;1251.&quot;</span>;          <span class="keywordflow">break</span>; }
<a name="l07908"></a>07908         <span class="keywordflow">case</span> 208: {$ codePage = 65001; sCodePage = <span class="stringliteral">&quot;UTF-8.&quot;</span>;         <span class="keywordflow">break</span>; }
<a name="l07909"></a>07909         <span class="keywordflow">case</span> 128: {$ codePage =   866; sCodePage = <span class="stringliteral">&quot;866.&quot;</span>;           <span class="keywordflow">break</span>; }
<a name="l07910"></a>07910         <span class="keywordflow">case</span> 225: {$ codePage = 20866; sCodePage = <span class="stringliteral">&quot;KOI-8, waaat?!&quot;</span>; <span class="keywordflow">break</span>; }
<a name="l07911"></a>07911         <span class="keywordflow">default</span>:  {$ codePage =    -1; sCodePage = <span class="stringliteral">&quot;(Unknown)&quot;</span>;      <span class="keywordflow">break</span>; }
<a name="l07912"></a>07912         }
<a name="l07913"></a>07913 
<a name="l07914"></a>07914 $   <span class="keywordflow">if</span> (codePage != needCP &amp;&amp; verbose)
<a name="l07915"></a>07915         {
<a name="l07916"></a>07916 $       *_txTraceSE = <span class="charliteral">&#39; &#39;</span>;  <span class="comment">// No stack trace please</span>
<a name="l07917"></a>07917 
<a name="l07918"></a>07918 $       _TX_UNEXPECTED (<span class="stringliteral">&quot;\v\t&quot;</span> <span class="stringliteral">&quot;\n\n&quot;</span> <span class="stringliteral">&quot;WARNING: CHECK TXLib.h file CODEPAGE. Maybe it is %s It should be %d.\n\n&quot;</span>
<a name="l07919"></a>07919                         <span class="stringliteral">&quot;This is NOT an error of TXLib itself. Please note:\n\n&quot;</span>
<a name="l07920"></a>07920                         <span class="stringliteral">&quot;Do NOT copy-and-paste TXLib.h file contents into a new file and them save it inside your &quot;</span>
<a name="l07921"></a>07921                         <span class="stringliteral">&quot;IDE or editor. This can change original TXLib codepage (%d) to another one. Instead, DO &quot;</span>
<a name="l07922"></a>07922                         <span class="stringliteral">&quot;use copy / move / cut-and-paste operations in Windows Explorer (Far Manager etc) only. &quot;</span>
<a name="l07923"></a>07923                         <span class="stringliteral">&quot;Or, when you see TXLib.h being opened in browser, use &#39;Save as...&#39; (Ctrl+S) command.\n\n&quot;</span>
<a name="l07924"></a>07924                         <span class="stringliteral">&quot;Now you should re-download TXLib.h file from the http://txlib.ru site.\n\n&quot;</span>
<a name="l07925"></a>07925                         <span class="stringliteral">&quot;You can continue, but Russian messages and symbols may appear unreadable.&quot;</span>,
<a name="l07926"></a>07926                         sCodePage, needCP, needCP);
<a name="l07927"></a>07927         }
<a name="l07928"></a>07928 
<a name="l07929"></a>07929 $   <span class="keywordflow">return</span> (codePage == needCP);
<a name="l07930"></a>07930     }
<a name="l07931"></a>07931 
<a name="l07932"></a>07932 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07933"></a>07933 
<a name="l07934"></a>07934 _tx_FARPROC _txDllImport (<span class="keyword">const</span> <span class="keywordtype">char</span> dllFileName[], <span class="keyword">const</span> <span class="keywordtype">char</span> funcName[], <span class="keywordtype">bool</span> required <span class="comment">/*= true*/</span>)
<a name="l07935"></a>07935     {
<a name="l07936"></a>07936     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (dllFileName &amp;&amp; *dllFileName)) <span class="keywordflow">return</span> NULL;
<a name="l07937"></a>07937     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (funcName    &amp;&amp; *funcName))    <span class="keywordflow">return</span> NULL;
<a name="l07938"></a>07938 
<a name="l07939"></a>07939     <span class="keyword">static</span> <span class="keywordtype">char</span> dllPaths [2][MAX_PATH] = {<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;&quot;</span>};
<a name="l07940"></a>07940 
<a name="l07941"></a>07941     <span class="keywordflow">if</span> (!*dllPaths[0])
<a name="l07942"></a>07942         {
<a name="l07943"></a>07943         <span class="keyword">const</span> <span class="keywordtype">char</span> dllDir[]  = <span class="stringliteral">&quot;\\Windows\\&quot;</span>;
<a name="l07944"></a>07944 
<a name="l07945"></a>07945         <span class="comment">// dllPaths[0] is relative to the TX Setup directory stored in the Registry</span>
<a name="l07946"></a>07946 
<a name="l07947"></a>07947         <span class="keywordtype">char</span>* path = dllPaths[0];
<a name="l07948"></a>07948 
<a name="l07949"></a>07949         <a class="code" href="a00080.htm#gad942f797bce07af74cd11c88d50ddd3e" title="Читает информацию из реестра Windows.">txRegQuery</a> (<span class="stringliteral">&quot;HKCU\\Software\\TX Library&quot;</span>, <span class="stringliteral">&quot;ProductDir&quot;</span>, path, MAX_PATH);
<a name="l07950"></a>07950         strncat_s (path, MAX_PATH, dllDir, <span class="keyword">sizeof</span> (dllDir) - 1);
<a name="l07951"></a>07951 
<a name="l07952"></a>07952         <span class="comment">// dllPaths[1] is relative to TXib.h file used in compilation</span>
<a name="l07953"></a>07953 
<a name="l07954"></a>07954         path = dllPaths[1];
<a name="l07955"></a>07955 
<a name="l07956"></a>07956         <span class="keywordflow">if</span> (strchr (__FILE__, <span class="charliteral">&#39;:&#39;</span>))
<a name="l07957"></a>07957             {
<a name="l07958"></a>07958             strncpy_s (path, MAX_PATH, __FILE__, <span class="keyword">sizeof</span> (__FILE__) - 1);
<a name="l07959"></a>07959             }
<a name="l07960"></a>07960         <span class="keywordflow">else</span>
<a name="l07961"></a>07961             {
<a name="l07962"></a>07962             GetCurrentDirectory (MAX_PATH, path);
<a name="l07963"></a>07963             strncat_s (path, MAX_PATH, <span class="stringliteral">&quot;\\&quot;</span> __FILE__, <span class="keyword">sizeof</span> (<span class="stringliteral">&quot;\\&quot;</span> __FILE__) - 1);
<a name="l07964"></a>07964             }
<a name="l07965"></a>07965 
<a name="l07966"></a>07966         <span class="keywordflow">if</span> (<span class="keywordtype">char</span>* dir = strrchr (path, <span class="charliteral">&#39;\\&#39;</span>)) *dir = 0;
<a name="l07967"></a>07967 
<a name="l07968"></a>07968         strncat_s (path, MAX_PATH, dllDir, <span class="keyword">sizeof</span> (dllDir) - 1);
<a name="l07969"></a>07969         }
<a name="l07970"></a>07970 
<a name="l07971"></a>07971     <span class="keywordtype">char</span> dllName[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>, dllArch[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l07972"></a>07972     <span class="keyword">const</span> <span class="keywordtype">char</span>* arch = (dllFileName? strchr (dllFileName, <span class="charliteral">&#39;*&#39;</span>) : NULL);
<a name="l07973"></a>07973 
<a name="l07974"></a>07974     <span class="keywordflow">if</span> (arch)
<a name="l07975"></a>07975         {
<a name="l07976"></a>07976         assert (arch &gt;= dllFileName);
<a name="l07977"></a>07977 
<a name="l07978"></a>07978         strncpy_s (dllName, <span class="keyword">sizeof</span> (dllName), dllFileName, (<span class="keywordtype">size_t</span>) (arch - dllFileName));
<a name="l07979"></a>07979         strncat_s (dllName, <span class="keyword">sizeof</span> (dllName), arch+1, <span class="keyword">sizeof</span> (dllName) - 1 - strlen (dllName));
<a name="l07980"></a>07980 
<a name="l07981"></a>07981         strncpy_s (dllArch, <span class="keyword">sizeof</span> (dllArch), dllFileName, (<span class="keywordtype">size_t</span>) (arch - dllFileName));
<a name="l07982"></a>07982         strncat_s (dllArch, <span class="keyword">sizeof</span> (dllArch), <span class="keyword">sizeof</span> (<span class="keywordtype">void</span>*) == 8? <span class="stringliteral">&quot;64&quot;</span> : <span class="stringliteral">&quot;32&quot;</span>, 3);
<a name="l07983"></a>07983         strncat_s (dllArch, <span class="keyword">sizeof</span> (dllArch), arch+1, <span class="keyword">sizeof</span> (dllArch) - 1 - strlen (dllArch));
<a name="l07984"></a>07984         }
<a name="l07985"></a>07985     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dllFileName)
<a name="l07986"></a>07986         {
<a name="l07987"></a>07987         strncat_s (dllName, <span class="keyword">sizeof</span> (dllName), dllFileName, <span class="keyword">sizeof</span> (dllName) - 1);
<a name="l07988"></a>07988         }
<a name="l07989"></a>07989 
<a name="l07990"></a>07990     HMODULE   dll = GetModuleHandle (dllFileName);
<a name="l07991"></a>07991 
<a name="l07992"></a>07992     <span class="keywordflow">if</span> (!dll) dll = GetModuleHandle (dllArch);
<a name="l07993"></a>07993     <span class="keywordflow">if</span> (!dll) dll = GetModuleHandle (dllName);
<a name="l07994"></a>07994 
<a name="l07995"></a>07995     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; !dll &amp;&amp; i &lt; (int) <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (dllPaths); i++)
<a name="l07996"></a>07996         {
<a name="l07997"></a>07997         <span class="keywordtype">char</span> path [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l07998"></a>07998         strncpy_s (path, <span class="keyword">sizeof</span> (path), dllPaths[i], <span class="keyword">sizeof</span> (dllPaths[i]));
<a name="l07999"></a>07999         <span class="keywordtype">size_t</span> len = strlen (path);
<a name="l08000"></a>08000 
<a name="l08001"></a>08001         strncpy_s (path + len, <span class="keyword">sizeof</span> (path) - len, dllArch, <span class="keyword">sizeof</span> (dllArch));
<a name="l08002"></a>08002         <span class="keywordflow">if</span> (!dll) dll = LoadLibrary (path);
<a name="l08003"></a>08003 
<a name="l08004"></a>08004         strncpy_s (path + len, <span class="keyword">sizeof</span> (path) - len, dllName, <span class="keyword">sizeof</span> (dllName));
<a name="l08005"></a>08005         <span class="keywordflow">if</span> (!dll) dll = LoadLibrary (path);
<a name="l08006"></a>08006         }
<a name="l08007"></a>08007 
<a name="l08008"></a>08008     <span class="keywordflow">if</span> (!dll) dll = LoadLibrary (dllArch);
<a name="l08009"></a>08009     <span class="keywordflow">if</span> (!dll) dll = LoadLibrary (dllName);
<a name="l08010"></a>08010 
<a name="l08011"></a>08011     <span class="keywordflow">if</span> (!dll  &amp;&amp; required) <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot load library \&quot;%s%s%s\&quot;.&quot;</span>,
<a name="l08012"></a>08012                                            dllName, (arch? <span class="stringliteral">&quot;\&quot; / \&quot;&quot;</span> : <span class="stringliteral">&quot;&quot;</span>), dllArch);
<a name="l08013"></a>08013     <span class="keywordflow">if</span> (!dll) <span class="keywordflow">return</span> NULL;
<a name="l08014"></a>08014 
<a name="l08015"></a>08015     _tx_FARPROC addr = (_tx_FARPROC) GetProcAddress (dll, funcName);
<a name="l08016"></a>08016 
<a name="l08017"></a>08017     <span class="keywordflow">if</span> (!addr &amp;&amp; required) <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot import \&quot;%s\&quot; from library \&quot;%s%s%s\&quot;.&quot;</span>,
<a name="l08018"></a>08018                                            funcName, dllName, (arch? <span class="stringliteral">&quot;\&quot; / \&quot;&quot;</span> : <span class="stringliteral">&quot;&quot;</span>), dllArch);
<a name="l08019"></a>08019     <span class="keywordflow">return</span> addr;
<a name="l08020"></a>08020     }
<a name="l08021"></a>08021 
<a name="l08022"></a>08022 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08023"></a>08023 
<a name="l08024"></a>08024 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; (_MSC_VER == 1800) // MSVC 2013</span>
<a name="l08025"></a>08025 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (push)</span>
<a name="l08026"></a>08026 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 6102)          // Использование &#39;name&#39; из завершившегося ошибкой вызова функции</span>
<a name="l08027"></a>08027 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l08028"></a>08028 <span class="preprocessor"></span>
<a name="l08029"></a>08029 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gad942f797bce07af74cd11c88d50ddd3e" title="Читает информацию из реестра Windows.">txRegQuery</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* keyName, <span class="keyword">const</span> <span class="keywordtype">char</span>* valueName, <span class="keywordtype">void</span>* value, <span class="keywordtype">size_t</span> szValue)
<a name="l08030"></a>08030     {
<a name="l08031"></a>08031     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (keyName)) <span class="keywordflow">return</span> 0;
<a name="l08032"></a>08032 
<a name="l08033"></a>08033     HKEY hive = NULL;
<a name="l08034"></a>08034 
<a name="l08035"></a>08035 <span class="preprocessor">    #define EQU_(name1, name2)  ( _strnicmp (keyName, name1 &quot;\\&quot;, sizeof (name1)) == 0 || \</span>
<a name="l08036"></a>08036 <span class="preprocessor">                                  _strnicmp (keyName, name2 &quot;\\&quot;, sizeof (name2)) == 0 )</span>
<a name="l08037"></a>08037 <span class="preprocessor"></span>
<a name="l08038"></a>08038     <span class="keywordflow">if</span>      (EQU_(<span class="stringliteral">&quot;HKLM&quot;</span>, <span class="stringliteral">&quot;HKEY_LOCAL_MACHINE&quot;</span>))  hive = HKEY_LOCAL_MACHINE;
<a name="l08039"></a>08039     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (EQU_(<span class="stringliteral">&quot;HKCU&quot;</span>, <span class="stringliteral">&quot;HKEY_CURRENT_USER&quot;</span>))   hive = HKEY_CURRENT_USER;
<a name="l08040"></a>08040     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (EQU_(<span class="stringliteral">&quot;HKCR&quot;</span>, <span class="stringliteral">&quot;HKEY_CLASSES_ROOT&quot;</span>))   hive = HKEY_CLASSES_ROOT;
<a name="l08041"></a>08041     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (EQU_(<span class="stringliteral">&quot;HKU&quot;</span>,  <span class="stringliteral">&quot;HKEY_USERS&quot;</span>))          hive = HKEY_USERS;
<a name="l08042"></a>08042     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (EQU_(<span class="stringliteral">&quot;HKCC&quot;</span>, <span class="stringliteral">&quot;HKEY_CURRENT_CONFIG&quot;</span>)) hive = HKEY_CURRENT_CONFIG;
<a name="l08043"></a>08043 
<a name="l08044"></a>08044     <span class="keywordflow">else</span> { _TX_ARGUMENT_FAILED ((<span class="stringliteral">&quot;keyName должно начинаться с HKLM\\, HKCU\\, HKCR\\, HKU\\ или HKCC\\ &quot;</span>, hive)); <span class="keywordflow">return</span> 0; }
<a name="l08045"></a>08045 
<a name="l08046"></a>08046 <span class="preprocessor">    #undef EQU_</span>
<a name="l08047"></a>08047 <span class="preprocessor"></span>
<a name="l08048"></a>08048     keyName = strchr (keyName, <span class="charliteral">&#39;\\&#39;</span>) + 1;
<a name="l08049"></a>08049 
<a name="l08050"></a>08050     HKEY  key  = NULL;
<a name="l08051"></a>08051     DWORD size = 0;
<a name="l08052"></a>08052 
<a name="l08053"></a>08053     <span class="keywordtype">bool</span>                               ok  = !!RegOpenKeyEx    (hive, keyName,   0, KEY_QUERY_VALUE, &amp;key)         == ERROR_SUCCESS;
<a name="l08054"></a>08054     <span class="keywordflow">if</span> (ok)                            ok &amp;= !!RegQueryValueEx (key,  valueName, NULL, NULL, NULL,          &amp;size) == ERROR_SUCCESS;
<a name="l08055"></a>08055     <span class="keywordflow">if</span> (ok &amp;&amp; value &amp;&amp; size &lt; szValue) ok &amp;= !!RegQueryValueEx (key,  valueName, NULL, NULL, (BYTE*) value, &amp;size) == ERROR_SUCCESS;
<a name="l08056"></a>08056     <span class="keywordflow">if</span> (key)                           ok &amp;= !!RegCloseKey     (key);
<a name="l08057"></a>08057 
<a name="l08058"></a>08058     <span class="keywordflow">return</span> size;
<a name="l08059"></a>08059     }
<a name="l08060"></a>08060 
<a name="l08061"></a>08061 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; (_MSC_VER == 1800)</span>
<a name="l08062"></a>08062 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (pop)</span>
<a name="l08063"></a>08063 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l08064"></a>08064 <span class="preprocessor"></span>
<a name="l08065"></a>08065 <span class="comment">//}</span>
<a name="l08066"></a>08066 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08067"></a>08067 
<a name="l08068"></a>08068 HWND <a class="code" href="a00081.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, <span class="keywordtype">bool</span> centered <span class="comment">/*= true*/</span>)
<a name="l08069"></a>08069     {
<a name="l08070"></a>08070 $1  <span class="keywordflow">if</span> (!_txInitialized) _txInitialized = _txInitialize();
<a name="l08071"></a>08071 
<a name="l08072"></a>08072 $   <span class="keywordflow">if</span> (HWND wnd = <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>())
<a name="l08073"></a>08073         {
<a name="l08074"></a>08074 $       SetLastErrorEx (ERROR_INVALID_DATA, 0);
<a name="l08075"></a>08075 $       _TX_ON_DEBUG (<a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Окно рисования уже создано!&quot;</span>));
<a name="l08076"></a>08076 $       <span class="keywordflow">return</span> wnd;
<a name="l08077"></a>08077         }
<a name="l08078"></a>08078 
<a name="l08079"></a>08079 $   <span class="keywordflow">if</span> (!_txIsDll)
<a name="l08080"></a>08080         {
<a name="l08081"></a>08081 $       _txMain = ! FindAtom (<span class="stringliteral">&quot;_txMain&quot;</span>);  <span class="comment">// Not a thread-safe</span>
<a name="l08082"></a>08082 $       (void)       AddAtom (<span class="stringliteral">&quot;_txMain&quot;</span>);
<a name="l08083"></a>08083         }
<a name="l08084"></a>08084 
<a name="l08085"></a>08085 $   <span class="keywordflow">if</span> (<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a> &lt; 10) {$ <a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a> = 10; }
<a name="l08086"></a>08086 
<a name="l08087"></a>08087 $   _txRunning = <span class="keyword">false</span>;
<a name="l08088"></a>08088 
<a name="l08089"></a>08089     <span class="comment">// Store the size</span>
<a name="l08090"></a>08090 
<a name="l08091"></a>08091 $   <span class="keyword">static</span> SIZE size = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeX), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeY) };
<a name="l08092"></a>08092 $   <span class="keywordflow">if</span> (centered) { size.cx *= -1; size.cy *= -1; }
<a name="l08093"></a>08093 
<a name="l08094"></a>08094     <span class="comment">// In Thread, where REAL creation lies...</span>
<a name="l08095"></a>08095 
<a name="l08096"></a>08096 $   <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span> = 0;
<a name="l08097"></a>08097 $   _txCanvas_Thread = (HANDLE) Win32::_beginthreadex (NULL, 0, _txCanvas_ThreadProc, &amp;size, 0, &amp;<span class="keywordtype">id</span>);
<a name="l08098"></a>08098 
<a name="l08099"></a>08099 $   <span class="keywordflow">if</span> (!_txCanvas_Thread) <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot start canvas thread.&quot;</span>),  (HWND) NULL;
<a name="l08100"></a>08100 
<a name="l08101"></a>08101 $   _txWaitFor (_txRunning, 10*<a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l08102"></a>08102 
<a name="l08103"></a>08103 $   <span class="keywordflow">if</span> (!_txRunning)       <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot create canvas window.&quot;</span>), (HWND) NULL;
<a name="l08104"></a>08104 $   <span class="keywordflow">if</span> (!<a class="code" href="a00081.htm#ga3291ffa23a348c25985d780ab8f7088b" title="Проверка правильности работы библиотеки">txOK</a>())           <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Canvas window is not OK.&quot;</span>),     (HWND) NULL;
<a name="l08105"></a>08105 
<a name="l08106"></a>08106 $   HWND console = Win32::GetConsoleWindow();
<a name="l08107"></a>08107 
<a name="l08108"></a>08108 $   DWORD proc = 0;
<a name="l08109"></a>08109 $   GetWindowThreadProcessId (console, &amp;proc);
<a name="l08110"></a>08110 
<a name="l08111"></a>08111 $   <span class="keywordflow">if</span> (console &amp;&amp; (proc == GetCurrentProcessId() || _txIsParentWaitable()))
<a name="l08112"></a>08112         {$ ShowWindow (console, <a class="code" href="a00084.htm#ga8a148ac2f04e1f9c7414af69362e0668" title="Режим отображения консольного окна. Допустимы любые флаги функции ShowWindow.">_txConsoleMode</a>); }
<a name="l08113"></a>08113 
<a name="l08114"></a>08114 $   HMENU menu = GetSystemMenu (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), <span class="keyword">false</span>);
<a name="l08115"></a>08115     <span class="keywordflow">if</span> (menu) {$ CheckMenuItem (menu, _TX_IDM_CONSOLE, (console? (IsWindowVisible (console)? MF_CHECKED : 0) : MF_DISABLED)); }
<a name="l08116"></a>08116 
<a name="l08117"></a>08117 $   Win32::GdiSetBatchLimit (1);
<a name="l08118"></a>08118 
<a name="l08119"></a>08119 $   SetLastError (0);
<a name="l08120"></a>08120 
<a name="l08121"></a>08121 $   errno = 0;
<a name="l08122"></a>08122 
<a name="l08123"></a>08123 <span class="preprocessor">    #if !defined (__CYGWIN__)</span>
<a name="l08124"></a>08124 <span class="preprocessor"></span>$   _doserrno = 0;
<a name="l08125"></a>08125 <span class="preprocessor">    #endif</span>
<a name="l08126"></a>08126 <span class="preprocessor"></span>
<a name="l08127"></a>08127 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>();
<a name="l08128"></a>08128     }
<a name="l08129"></a>08129 
<a name="l08130"></a>08130 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08131"></a>08131 
<a name="l08132"></a>08132 HWND txCreateExtraWindow (CREATESTRUCT createData)
<a name="l08133"></a>08133     {
<a name="l08134"></a>08134 $1  <span class="keywordflow">if</span> (_TX_TXWINDOW_FAILED()) <span class="keywordflow">return</span> NULL;
<a name="l08135"></a>08135 
<a name="l08136"></a>08136 $   <span class="keyword">volatile</span> HWND wnd = NULL;
<a name="l08137"></a>08137 $   createData.hInstance = (HINSTANCE)(uintptr_t) &amp;wnd;
<a name="l08138"></a>08138 
<a name="l08139"></a>08139 $   PostMessage (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), _TX_WM_CREATEWND, 0, (LPARAM) &amp;createData) <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l08140"></a>08140 
<a name="l08141"></a>08141 $   _txWaitFor (wnd, 5*<a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l08142"></a>08142 
<a name="l08143"></a>08143 $   <span class="keywordflow">return</span> wnd;
<a name="l08144"></a>08144     }
<a name="l08145"></a>08145 
<a name="l08146"></a>08146 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08147"></a>08147 
<a name="l08148"></a>08148 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaa72c4849ac0c9bf6f95893f4265b9843" title="Установка параметров рисования по умолчанию.">txSetDefaults</a> (HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l08149"></a>08149     {
<a name="l08150"></a>08150 $1  <span class="keywordflow">if</span> (dc == <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>()) <a class="code" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keyword">false</span>);
<a name="l08151"></a>08151 $   <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l08152"></a>08152 
<a name="l08153"></a>08153 $   RECT r = {};
<a name="l08154"></a>08154 $   GetClientRect (Win32::GetConsoleWindow(), &amp;r) asserted;
<a name="l08155"></a>08155 $   SIZE szCon = { r.right - r.left, r.bottom - r.top };
<a name="l08156"></a>08156 
<a name="l08157"></a>08157 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l08158"></a>08158 
<a name="l08159"></a>08159 $   CONSOLE_SCREEN_BUFFER_INFO con = {{80, 25}, {}, 0, {0, 0, 80-1, 25-1}, {80, 25}};
<a name="l08160"></a>08160 $   GetConsoleScreenBufferInfo (out, &amp;con);
<a name="l08161"></a>08161 
<a name="l08162"></a>08162 $   SIZE szTxt = { (short) (con.srWindow.Right  - con.srWindow.Left + 1),
<a name="l08163"></a>08163                    (short) (con.srWindow.Bottom - con.srWindow.Top  + 1) };
<a name="l08164"></a>08164 
<a name="l08165"></a>08165 <span class="comment">//{ Set defaults for graphics layer</span>
<a name="l08166"></a>08166 
<a name="l08167"></a>08167 $   _txBuffer_Select (Win32::GetStockObject (WHITE_PEN),   dc) asserted;
<a name="l08168"></a>08168 $   _txBuffer_Select (Win32::GetStockObject (WHITE_BRUSH), dc) asserted;
<a name="l08169"></a>08169 
<a name="l08170"></a>08170 $   _txBuffer_Select (Win32::CreateFont (szCon.cy/szTxt.cy, szCon.cx/szTxt.cx,
<a name="l08171"></a>08171                                          0, 0, FW_REGULAR, FALSE, FALSE, FALSE,
<a name="l08172"></a>08172                                          RUSSIAN_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l08173"></a>08173                                          DEFAULT_QUALITY, FIXED_PITCH, <a class="code" href="a00084.htm#ga61836072e0c3887ed70841ff2d12c0d9" title="Шрифт консоли">_txConsoleFont</a>),
<a name="l08174"></a>08174                       dc) asserted;
<a name="l08175"></a>08175 
<a name="l08176"></a>08176 $  (Win32::SetTextColor      (dc, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>) != CLR_INVALID) asserted;
<a name="l08177"></a>08177 $   Win32::SetBkMode         (dc, TRANSPARENT)              asserted;
<a name="l08178"></a>08178 
<a name="l08179"></a>08179 $   Win32::SetROP2           (dc, R2_COPYPEN)               asserted;
<a name="l08180"></a>08180 $   Win32::SetStretchBltMode (dc, HALFTONE)                 asserted;
<a name="l08181"></a>08181 
<a name="l08182"></a>08182 <span class="comment">//}</span>
<a name="l08183"></a>08183 
<a name="l08184"></a>08184 $   if (dc != txDC())
<a name="l08185"></a>08185         {$ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l08186"></a>08186 
<a name="l08187"></a>08187 <span class="comment">//{ Set defaults for console  layer</span>
<a name="l08188"></a>08188 
<a name="l08189"></a>08189 $   POINT szCanvas = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (dc);
<a name="l08190"></a>08190 
<a name="l08191"></a>08191 $   HGDIOBJ font = <a class="code" href="a00081.htm#ga794901725b6c4a96f585742b70c0ea05" title="Ищет шрифт по его названию.">txFontExist</a> (<a class="code" href="a00084.htm#ga61836072e0c3887ed70841ff2d12c0d9" title="Шрифт консоли">_txConsoleFont</a>)?
<a name="l08192"></a>08192                        Win32::CreateFont (szCanvas.y/szTxt.cy, szCanvas.x/szTxt.cx,
<a name="l08193"></a>08193                                           0, 0, FW_REGULAR, FALSE, FALSE, FALSE,
<a name="l08194"></a>08194                                           RUSSIAN_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l08195"></a>08195                                           DEFAULT_QUALITY, FIXED_PITCH, <a class="code" href="a00084.htm#ga61836072e0c3887ed70841ff2d12c0d9" title="Шрифт консоли">_txConsoleFont</a>)
<a name="l08196"></a>08196                        :
<a name="l08197"></a>08197                        Win32::GetStockObject (SYSTEM_FIXED_FONT);
<a name="l08198"></a>08198 
<a name="l08199"></a>08199 $   _txBuffer_Select (font, _txCanvas_BackBuf[1]);
<a name="l08200"></a>08200 <span class="comment">//}</span>
<a name="l08201"></a>08201 
<a name="l08202"></a>08202 <span class="comment">//{ Scroll the console for text to go above top of window and don&#39;t mix with graphics</span>
<a name="l08203"></a>08203 
<a name="l08204"></a>08204 $   <span class="keywordflow">if</span> (con.dwCursorPosition.X) _putch (<span class="charliteral">&#39;\n&#39;</span>);
<a name="l08205"></a>08205 
<a name="l08206"></a>08206 $   <span class="keywordtype">short</span> delta = (short) (con.dwCursorPosition.Y - con.srWindow.Top);
<a name="l08207"></a>08207 
<a name="l08208"></a>08208 $   con.srWindow.Top    = (short) (con.srWindow.Top    + delta);
<a name="l08209"></a>08209 $   con.srWindow.Bottom = (short) (con.srWindow.Bottom + delta);
<a name="l08210"></a>08210 
<a name="l08211"></a>08211 $   SMALL_RECT src  = { 0, 0, (short) (con.dwSize.X - 1), (short) (con.dwSize.Y - 1) };
<a name="l08212"></a>08212 $   CHAR_INFO  fill = { {<span class="charliteral">&#39; &#39;</span>}, FOREGROUND_LIGHTGRAY };
<a name="l08213"></a>08213 $   COORD      dest = { 0, (short) -delta };  <span class="comment">// New UL-corner of src, scroll up</span>
<a name="l08214"></a>08214 
<a name="l08215"></a>08215 $   con.dwCursorPosition.X = 0;
<a name="l08216"></a>08216 $   con.dwCursorPosition.Y = (short) (con.dwCursorPosition.Y - delta);
<a name="l08217"></a>08217 
<a name="l08218"></a>08218 $   (con.srWindow.Bottom &lt; con.dwSize.Y &amp;&amp;                        <span class="comment">// Move the &quot;window&quot;</span>
<a name="l08219"></a>08219      SetConsoleWindowInfo      (out, <span class="keyword">true</span>, &amp;con.srWindow))
<a name="l08220"></a>08220     ||
<a name="l08221"></a>08221     (ScrollConsoleScreenBuffer (out, &amp;src, NULL, dest, &amp;fill),    <span class="comment">// Or scroll the buffer</span>
<a name="l08222"></a>08222      SetConsoleCursorPosition  (out, con.dwCursorPosition));
<a name="l08223"></a>08223 <span class="comment">//}</span>
<a name="l08224"></a>08224 
<a name="l08225"></a>08225 $   <a class="code" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keyword">true</span>);
<a name="l08226"></a>08226 
<a name="l08227"></a>08227     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l08228"></a>08228     }
<a name="l08229"></a>08229 
<a name="l08230"></a>08230 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08231"></a>08231 
<a name="l08232"></a>08232 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga3291ffa23a348c25985d780ab8f7088b" title="Проверка правильности работы библиотеки">txOK</a>()
<a name="l08233"></a>08233     {
<a name="l08234"></a>08234     <span class="keywordflow">return</span> (_txCanaryFirst == 0x776F656D &amp;&amp;  <span class="comment">// Too well-known values to use constants. You know these values, don&#39;t you?</span>
<a name="l08235"></a>08235             _txCanaryLast  == 0x5E2E2E5E &amp;&amp;
<a name="l08236"></a>08236             _txCanvas_OK()
<a name="l08237"></a>08237 
<a name="l08238"></a>08238     #<span class="keywordflow">if</span> defined (_MSC_VER)
<a name="l08239"></a>08239          &amp;&amp; _CrtCheckMemory()
<a name="l08240"></a>08240     #endif
<a name="l08241"></a>08241             );
<a name="l08242"></a>08242     }
<a name="l08243"></a>08243 
<a name="l08244"></a>08244 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08245"></a>08245 <span class="comment">//{          Cleanup</span>
<a name="l08246"></a>08246 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08247"></a>08247 
<a name="l08248"></a>08248 <span class="comment">// Implicit std(MSVCRT.dll)::_cexit() call before _txCleanup can lead to hangs in _cexit handlers chain.</span>
<a name="l08249"></a>08249 <span class="comment">// So redefining ::std::_cexit(). Do it dynamically via PE Import Table hook to avoid duplicate symbols</span>
<a name="l08250"></a>08250 <span class="comment">// if several modules linked together include TXLib.h. See _txSetProcAddress() call in _txInitialize().</span>
<a name="l08251"></a>08251 
<a name="l08252"></a>08252 <span class="keywordtype">void</span> _txOnCExit()
<a name="l08253"></a>08253     {
<a name="l08254"></a>08254     OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08255"></a>08255     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s() called\n&quot;</span>, _TX_VERSION, __func__);
<a name="l08256"></a>08256 
<a name="l08257"></a>08257 $5  _txCleanup();
<a name="l08258"></a>08258 
<a name="l08259"></a>08259     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: calling Win32::_cexit()\n&quot;</span>, _TX_VERSION);
<a name="l08260"></a>08260     _TX_CALLv (Win32::_cexit, ());
<a name="l08261"></a>08261     }
<a name="l08262"></a>08262 
<a name="l08263"></a>08263 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08264"></a>08264 
<a name="l08265"></a>08265 <span class="keywordtype">void</span> _txOnExit (<span class="keywordtype">int</span> retcode)
<a name="l08266"></a>08266     {
<a name="l08267"></a>08267     <span class="keywordflow">if</span> (retcode != 0)
<a name="l08268"></a>08268         {
<a name="l08269"></a>08269         OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08270"></a>08270         <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%d) called\n&quot;</span>, _TX_VERSION, __func__, retcode);
<a name="l08271"></a>08271         }
<a name="l08272"></a>08272 
<a name="l08273"></a>08273 $5  _txCleanup();
<a name="l08274"></a>08274 
<a name="l08275"></a>08275     <span class="keywordflow">if</span> (retcode != 0)
<a name="l08276"></a>08276         <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: calling Win32::exit (%d)\n&quot;</span>, _TX_VERSION, retcode);
<a name="l08277"></a>08277 
<a name="l08278"></a>08278     Win32::exit (retcode);
<a name="l08279"></a>08279     }
<a name="l08280"></a>08280 
<a name="l08281"></a>08281 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08282"></a>08282 
<a name="l08283"></a>08283 <span class="keywordtype">void</span> _txOnExitProcess (<span class="keywordtype">unsigned</span> retcode)
<a name="l08284"></a>08284     {
<a name="l08285"></a>08285     <span class="keywordflow">if</span> (retcode != 0)
<a name="l08286"></a>08286         {
<a name="l08287"></a>08287         OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08288"></a>08288         <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%u) called\n&quot;</span>, _TX_VERSION, __func__, retcode);
<a name="l08289"></a>08289         }
<a name="l08290"></a>08290 
<a name="l08291"></a>08291 $5  _txCleanup();
<a name="l08292"></a>08292 
<a name="l08293"></a>08293     <span class="keywordflow">if</span> (retcode != 0)
<a name="l08294"></a>08294         <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: calling Win32::ExitProcess (%u)\n&quot;</span>, _TX_VERSION, retcode);
<a name="l08295"></a>08295 
<a name="l08296"></a>08296     Win32::ExitProcess (retcode);
<a name="l08297"></a>08297     }
<a name="l08298"></a>08298 
<a name="l08299"></a>08299 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08300"></a>08300 
<a name="l08301"></a>08301 <span class="keywordtype">bool</span> _txOnTerminateProcess (HANDLE process, <span class="keywordtype">unsigned</span> retcode)
<a name="l08302"></a>08302     {
<a name="l08303"></a>08303     <span class="keywordflow">if</span> (retcode != 0)
<a name="l08304"></a>08304         {
<a name="l08305"></a>08305         OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08306"></a>08306         <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (0x%p, %u) called\n&quot;</span>, _TX_VERSION, __func__, process, retcode);
<a name="l08307"></a>08307         }
<a name="l08308"></a>08308 
<a name="l08309"></a>08309 $5  _txCleanup();
<a name="l08310"></a>08310 
<a name="l08311"></a>08311     <span class="keywordflow">if</span> (retcode != 0)
<a name="l08312"></a>08312         <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: calling Win32::TerminateProcess (0x%p, %u)\n&quot;</span>, _TX_VERSION, process, retcode);
<a name="l08313"></a>08313 
<a name="l08314"></a>08314     <span class="keywordflow">return</span> Win32::TerminateProcess (process, retcode);
<a name="l08315"></a>08315     }
<a name="l08316"></a>08316 
<a name="l08317"></a>08317 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08318"></a>08318 
<a name="l08319"></a>08319 <span class="keywordtype">void</span> _txOnFatalExit (<span class="keywordtype">int</span> retcode)
<a name="l08320"></a>08320     {
<a name="l08321"></a>08321     OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08322"></a>08322     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%d) called\n&quot;</span>, _TX_VERSION, __func__, retcode);
<a name="l08323"></a>08323 
<a name="l08324"></a>08324 $5  _txCleanup();
<a name="l08325"></a>08325 
<a name="l08326"></a>08326     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: calling Win32::FatalExit (%d)\n&quot;</span>, _TX_VERSION, retcode);
<a name="l08327"></a>08327     _TX_CALLv (Win32::FatalExit, (retcode));
<a name="l08328"></a>08328 
<a name="l08329"></a>08329     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: Win32::FatalExit() failure, calling Win32::TerminateProcess (%d)\n&quot;</span>, _TX_VERSION, retcode);
<a name="l08330"></a>08330     Win32::TerminateProcess (GetCurrentProcess(), retcode);
<a name="l08331"></a>08331     }
<a name="l08332"></a>08332 
<a name="l08333"></a>08333 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08334"></a>08334 
<a name="l08335"></a>08335 <span class="keywordtype">void</span> _txOnFatalAppExitA (<span class="keywordtype">unsigned</span> action, <span class="keyword">const</span> <span class="keywordtype">char</span> message[])
<a name="l08336"></a>08336     {
<a name="l08337"></a>08337     OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08338"></a>08338     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%u, \&quot;%s\&quot;) called\n&quot;</span>, _TX_VERSION, __func__, action, message);
<a name="l08339"></a>08339 
<a name="l08340"></a>08340 $5  _txCleanup();
<a name="l08341"></a>08341 
<a name="l08342"></a>08342     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: calling Win32::FatalAppExitA (%u, %s)\n&quot;</span>, _TX_VERSION, action, message);
<a name="l08343"></a>08343     _TX_CALLv (Win32::FatalAppExitA, (action, message));
<a name="l08344"></a>08344 
<a name="l08345"></a>08345     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: Win32::FatalExit() failure, calling Win32::TerminateProcess (EXIT_FAILURE)\n&quot;</span>, _TX_VERSION);
<a name="l08346"></a>08346     Win32::TerminateProcess (GetCurrentProcess(), EXIT_FAILURE);
<a name="l08347"></a>08347     }
<a name="l08348"></a>08348 
<a name="l08349"></a>08349 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08350"></a>08350 
<a name="l08351"></a>08351 BOOL WINAPI _txOnConsoleCtrlEvent (DWORD type)
<a name="l08352"></a>08352     {
<a name="l08353"></a>08353     OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08354"></a>08354     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (0x%04lX) called\n&quot;</span>, _TX_VERSION, __func__, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) type);
<a name="l08355"></a>08355 
<a name="l08356"></a>08356 $5  <span class="keywordflow">switch</span> (type)
<a name="l08357"></a>08357         {
<a name="l08358"></a>08358         <span class="keywordflow">case</span> CTRL_LOGOFF_EVENT:
<a name="l08359"></a>08359         <span class="keywordflow">case</span> CTRL_SHUTDOWN_EVENT: $ _txExit = <span class="keyword">true</span>;
<a name="l08360"></a>08360                                   $ _txCleanup();
<a name="l08361"></a>08361         <span class="keywordflow">case</span> CTRL_C_EVENT:
<a name="l08362"></a>08362         <span class="keywordflow">case</span> CTRL_CLOSE_EVENT:
<a name="l08363"></a>08363         <span class="keywordflow">case</span> CTRL_BREAK_EVENT:
<a name="l08364"></a>08364 
<a name="l08365"></a>08365         <span class="keywordflow">default</span>:                  <span class="keywordflow">break</span>;
<a name="l08366"></a>08366         }
<a name="l08367"></a>08367 
<a name="l08368"></a>08368 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l08369"></a>08369     }
<a name="l08370"></a>08370 
<a name="l08371"></a>08371 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08372"></a>08372 
<a name="l08373"></a>08373 <span class="keywordtype">void</span> _txCleanup()
<a name="l08374"></a>08374     {
<a name="l08375"></a>08375     <span class="keywordflow">if</span> (!_txInitialized) <span class="keywordflow">return</span>;
<a name="l08376"></a>08376     <span class="keywordflow">else</span> _txInitialized = <span class="keyword">false</span>;
<a name="l08377"></a>08377 
<a name="l08378"></a>08378 $3  _txRunning = <span class="keyword">false</span>;
<a name="l08379"></a>08379 $   _txConsole_IsBlinking = <span class="keyword">false</span>;
<a name="l08380"></a>08380 
<a name="l08381"></a>08381 $   HWND canvas     = <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>();
<a name="l08382"></a>08382 $   HWND console    = Win32::GetConsoleWindow();
<a name="l08383"></a>08383 $   <span class="keywordtype">unsigned</span> thread = GetCurrentThreadId();
<a name="l08384"></a>08384 
<a name="l08385"></a>08385 $   HWND wnd        = (canvas)? canvas : console;
<a name="l08386"></a>08386 
<a name="l08387"></a>08387 $   <span class="keywordtype">bool</span> externTerm = (thread != _txMainThreadId &amp;&amp;
<a name="l08388"></a>08388                        thread != _txCanvas_ThreadId);
<a name="l08389"></a>08389 $   DWORD parent = 0;
<a name="l08390"></a>08390 $   <span class="keywordtype">int</span>  isParentWaitable = _txIsParentWaitable (&amp;parent);
<a name="l08391"></a>08391 $   <span class="keywordtype">bool</span> waitableParent   = !externTerm &amp;&amp; isParentWaitable;
<a name="l08392"></a>08392 
<a name="l08393"></a>08393 $   <span class="keywordflow">if</span> (canvas)
<a name="l08394"></a>08394         {$ <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (5*<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>); }
<a name="l08395"></a>08395 
<a name="l08396"></a>08396 $   <span class="keywordflow">if</span> (_txConsole)
<a name="l08397"></a>08397         {
<a name="l08398"></a>08398 $       <span class="keywordflow">if</span> (_txMain) <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_LIGHTGRAY);
<a name="l08399"></a>08399 $       <span class="keywordflow">if</span> (console) EnableWindow (console, <span class="keyword">true</span>);
<a name="l08400"></a>08400         }
<a name="l08401"></a>08401 
<a name="l08402"></a>08402 $   <span class="keywordflow">if</span> (_txMain &amp;&amp; !externTerm &amp;&amp; wnd != NULL)
<a name="l08403"></a>08403         {$ _txSetFinishedText (wnd); }
<a name="l08404"></a>08404 
<a name="l08405"></a>08405 $   _flushall();
<a name="l08406"></a>08406 
<a name="l08407"></a>08407 $   <span class="keywordtype">bool</span> paused = <span class="keyword">false</span>;
<a name="l08408"></a>08408 $   <span class="keywordflow">if</span> (((canvas? _txMain : _txConsole) &amp;&amp; !_txExit) || (_txErrors &amp;&amp; thread == _txMainThreadId))
<a name="l08409"></a>08409         {
<a name="l08410"></a>08410 $       <span class="keywordflow">if</span> (wnd)
<a name="l08411"></a>08411             {
<a name="l08412"></a>08412             <span class="keywordflow">if</span> (isParentWaitable &gt;= 0) {$ SetWindowPos (wnd, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW); }
<a name="l08413"></a>08413 $           EnableWindow (wnd, <span class="keyword">true</span>);
<a name="l08414"></a>08414             }
<a name="l08415"></a>08415 
<a name="l08416"></a>08416 $       <span class="keywordflow">if</span> (console &amp;&amp; isParentWaitable &gt;= 0)
<a name="l08417"></a>08417             {
<a name="l08418"></a>08418 $           _txPauseBeforeTermination (canvas);
<a name="l08419"></a>08419 $           paused = <span class="keyword">true</span>;
<a name="l08420"></a>08420             }
<a name="l08421"></a>08421         }
<a name="l08422"></a>08422 
<a name="l08423"></a>08423 $   <span class="keywordflow">if</span> (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>())
<a name="l08424"></a>08424         {$ SendNotifyMessage (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), WM_DESTROY, 0, 0); }
<a name="l08425"></a>08425 
<a name="l08426"></a>08426 $   _txWaitFor (!<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), 5*<a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l08427"></a>08427 
<a name="l08428"></a>08428 $   <a class="code" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &amp;nbsp; мысли &amp;nbsp; текст вслух.">txSpeak</a>     (NULL);
<a name="l08429"></a>08429 $   <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (NULL);
<a name="l08430"></a>08430 
<a name="l08431"></a>08431 $   <span class="keywordflow">if</span> (GetCurrentThreadId() != _txMainThreadId)
<a name="l08432"></a>08432         {$ SuspendThread (_txMainThread);    }
<a name="l08433"></a>08433 $   <span class="keywordflow">if</span> (GetCurrentThreadId() != _txCanvas_ThreadId)
<a name="l08434"></a>08434         {$ SuspendThread (_txCanvas_Thread); }
<a name="l08435"></a>08435 
<a name="l08436"></a>08436 $   <span class="keywordflow">if</span> (_txMainThread)
<a name="l08437"></a>08437         {$ CloseHandle (_txMainThread)    asserted; _txMainThread    = NULL; }
<a name="l08438"></a>08438 $   if (_txCanvas_Thread)
<a name="l08439"></a>08439         {$ CloseHandle (_txCanvas_Thread) asserted; _txCanvas_Thread = NULL; }
<a name="l08440"></a>08440 
<a name="l08441"></a>08441 $   if (!txWindow())
<a name="l08442"></a>08442         {$ DeleteCriticalSection (&amp;_txCanvas_LockBackBuf); CRITICAL_SECTION zero = {0, -1}; _txCanvas_LockBackBuf = zero; }
<a name="l08443"></a>08443 
<a name="l08444"></a>08444 $   console = Win32::GetConsoleWindow();
<a name="l08445"></a>08445 
<a name="l08446"></a>08446 $   <span class="keywordflow">if</span> (_txMain &amp;&amp; _txConsole)
<a name="l08447"></a>08447         {$ _txConsole_Detach (waitableParent &amp;&amp; !externTerm); }
<a name="l08448"></a>08448 
<a name="l08449"></a>08449 $   <span class="keywordtype">bool</span> parentKilled = <span class="keyword">false</span>;
<a name="l08450"></a>08450 $   <span class="keywordflow">if</span> (waitableParent &amp;&amp; paused &amp;&amp; _txNOP (<a class="code" href="a00084.htm#ga9a495d013c6f08cd50220aca99ca56c2" title="Разрешать принудительное завершение вызывающих программ, ждущих нажатия клавиш после завершения TXLib...">_TX_ALLOW_KILL_PARENT</a>))
<a name="l08451"></a>08451         {
<a name="l08452"></a>08452 $       parentKilled = _txKillProcess (parent);
<a name="l08453"></a>08453 
<a name="l08454"></a>08454 $       parent = 0;
<a name="l08455"></a>08455 $       <span class="keywordflow">if</span> (!parentKilled || _txIsParentWaitable (&amp;parent))
<a name="l08456"></a>08456             {$ PostMessage (console, WM_CHAR, <span class="charliteral">&#39;\n&#39;</span>, 0); }
<a name="l08457"></a>08457         }
<a name="l08458"></a>08458 
<a name="l08459"></a>08459 $   std::cout.flush();
<a name="l08460"></a>08460 $   std::cerr.flush();
<a name="l08461"></a>08461 $   std::clog.flush();
<a name="l08462"></a>08462 $   _flushall();
<a name="l08463"></a>08463 
<a name="l08464"></a>08464 $   _txSymGetFromAddr (NULL);
<a name="l08465"></a>08465 
<a name="l08466"></a>08466     _TX_ON_DEBUG (OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08467"></a>08467                   OutputDebugString (_TX_VERSION <span class="stringliteral">&quot; - FINISHED: &quot;</span> <a class="code" href="a00084.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib. Входит в диагностические сообщения.">_TX_MODULE</a> <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08468"></a>08468                   OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>));
<a name="l08469"></a>08469 
<a name="l08470"></a>08470 $   <span class="keywordflow">if</span> (parentKilled &amp;&amp; <a class="code" href="a00084.htm#ga181143543b3883cf8570f80da3ad7fcc" title="Лимит времени на завершение программы, начиная от завершения функции main() или от вызова exit()...">_txWatchdogTimeout</a> &gt;= 0)
<a name="l08471"></a>08471         {$ Win32::_beginthread (_txWatchdogTerminator, 0, &amp;<a class="code" href="a00084.htm#ga181143543b3883cf8570f80da3ad7fcc" title="Лимит времени на завершение программы, начиная от завершения функции main() или от вызова exit()...">_txWatchdogTimeout</a>); }
<a name="l08472"></a>08472     }
<a name="l08473"></a>08473 
<a name="l08474"></a>08474 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08475"></a>08475 
<a name="l08476"></a>08476 <span class="keywordtype">int</span> _txSetFinishedText (HWND wnd)
<a name="l08477"></a>08477     {
<a name="l08478"></a>08478     <span class="keyword">struct </span>tools
<a name="l08479"></a>08479         {
<a name="l08480"></a>08480         <span class="keyword">static</span> LRESULT getWindowText (HWND window, <span class="keywordtype">wchar_t</span> text[], <span class="keywordtype">size_t</span> size)
<a name="l08481"></a>08481             {
<a name="l08482"></a>08482 $3          memset (text, 0, size * <span class="keyword">sizeof</span> (*text));
<a name="l08483"></a>08483 
<a name="l08484"></a>08484 $           <span class="keywordflow">return</span> SendMessageTimeoutW (window, WM_GETTEXT, (WPARAM) size, (LPARAM) text, SMTO_BLOCK | SMTO_ABORTIFHUNG, <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>, NULL);
<a name="l08485"></a>08485             }
<a name="l08486"></a>08486 
<a name="l08487"></a>08487         <span class="keyword">static</span> LRESULT setWindowText (HWND window, <span class="keywordtype">wchar_t</span> text[])
<a name="l08488"></a>08488             {
<a name="l08489"></a>08489 $1          <span class="keywordflow">return</span> SendMessageTimeoutW (window, WM_SETTEXT, 0,             (LPARAM) text, SMTO_BLOCK | SMTO_ABORTIFHUNG, <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>, NULL);
<a name="l08490"></a>08490             }
<a name="l08491"></a>08491         };
<a name="l08492"></a>08492 
<a name="l08493"></a>08493 $1  <span class="keyword">static</span> <span class="keywordtype">wchar_t</span> title [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>+15] = L<span class="stringliteral">&quot;TXLib&quot;</span>;
<a name="l08494"></a>08494 
<a name="l08495"></a>08495 $   tools::getWindowText (wnd, title, <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1);
<a name="l08496"></a>08496 $   <span class="keywordtype">int</span> len = (int) wcslen (title); <span class="keywordflow">if</span> (len &gt;= (<span class="keywordtype">int</span>)<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>) len = <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1;
<a name="l08497"></a>08497 
<a name="l08498"></a>08498 $   MultiByteToWideChar (_TX_CODEPAGE, 0, <span class="stringliteral">&quot; [ЗАВЕРШЕНО]&quot;</span>, -1, title + len, (<span class="keywordtype">int</span>)<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> - len);
<a name="l08499"></a>08499 
<a name="l08500"></a>08500 $   tools::setWindowText (wnd, title);
<a name="l08501"></a>08501 $   tools::getWindowText (wnd, title, <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1);
<a name="l08502"></a>08502 $   <span class="keywordflow">if</span> (len &lt;= (<span class="keywordtype">int</span>)<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1-2 &amp;&amp; title [len+2] == (<span class="keywordtype">wchar_t</span>) 0x0417 <span class="comment">/* &#39;З&#39; */</span>) <span class="keywordflow">return</span> 0;
<a name="l08503"></a>08503 
<a name="l08504"></a>08504 $   MultiByteToWideChar (_TX_CODEPAGE, 0, <span class="stringliteral">&quot; [FINISHED]&quot;</span>,  -1, title + len, (<span class="keywordtype">int</span>)<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> - len);
<a name="l08505"></a>08505 
<a name="l08506"></a>08506 $   tools::setWindowText (wnd, title);
<a name="l08507"></a>08507 $   tools::getWindowText (wnd, title, <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1);
<a name="l08508"></a>08508 $   <span class="keywordflow">if</span> (len &lt;= (<span class="keywordtype">int</span>)<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1-2 &amp;&amp; title [len+2] == <span class="comment">/* &#39;F&#39; */</span> (<span class="keywordtype">wchar_t</span>) 0x0046) <span class="keywordflow">return</span> 1;
<a name="l08509"></a>08509 
<a name="l08510"></a>08510 $   <span class="keywordflow">return</span> 2;
<a name="l08511"></a>08511     }
<a name="l08512"></a>08512 
<a name="l08513"></a>08513 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08514"></a>08514 
<a name="l08515"></a>08515 <span class="keywordtype">void</span> _txPauseBeforeTermination (HWND canvas)
<a name="l08516"></a>08516     {
<a name="l08517"></a>08517 $3  <span class="keywordflow">while</span> (_kbhit()) (void)_getch();
<a name="l08518"></a>08518 
<a name="l08519"></a>08519 $   CONSOLE_SCREEN_BUFFER_INFO con = {};
<a name="l08520"></a>08520 $   <span class="keywordtype">bool</span> kbRedir = !GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con);
<a name="l08521"></a>08521 $   <span class="keywordtype">bool</span> kbWait  = (_txGetInput() == EOF);
<a name="l08522"></a>08522 $   <span class="keywordtype">bool</span> wine    = !!Win32::wine_get_version;
<a name="l08523"></a>08523 
<a name="l08524"></a>08524 $   <span class="keywordflow">if</span> (kbWait &amp;&amp; !canvas &amp;&amp; !kbRedir &amp;&amp; !wine)
<a name="l08525"></a>08525         {
<a name="l08526"></a>08526 $       <a class="code" href="a00080.htm#ga6122d52806d23ff6bd480a0f07b75f2b" title="Смена кодовой страницы консоли и локали стандартной библиотеки С++.">txSetLocale</a>();
<a name="l08527"></a>08527 
<a name="l08528"></a>08528 $       fprintf (stderr, (!_txErrors? <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;[Нажмите любую клавишу для завершения]&quot;</span> :
<a name="l08529"></a>08529                                       <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;[Press F to Pay Respects...]&quot;</span>));  <span class="comment">// https://knowyourmeme.com/memes/press-f-to-pay-respects</span>
<a name="l08530"></a>08530 $       fflush  (stderr);
<a name="l08531"></a>08531         }
<a name="l08532"></a>08532 
<a name="l08533"></a>08533 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; ; i++)
<a name="l08534"></a>08534         {
<a name="l08535"></a>08535 $       Sleep (<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>);
<a name="l08536"></a>08536 
<a name="l08537"></a>08537         <span class="keywordflow">if</span> (!kbWait || (kbRedir &amp;&amp; !canvas)) {$ <span class="keywordflow">break</span>; }  <span class="comment">// No need to run and hide</span>
<a name="l08538"></a>08538 
<a name="l08539"></a>08539         <span class="keywordflow">if</span> (!wine &amp;&amp; _txGetInput() != EOF)   {$ <span class="keywordflow">break</span>; }  <span class="comment">// Somebody hit something.</span>
<a name="l08540"></a>08540 
<a name="l08541"></a>08541         <span class="keywordflow">if</span> (canvas &amp;&amp; !_txCanvas_ThreadId)   {$ <span class="keywordflow">break</span>; }  <span class="comment">// There was a window, and now there is not.</span>
<a name="l08542"></a>08542 
<a name="l08543"></a>08543         <span class="keywordflow">if</span> (!Win32::GetConsoleWindow())      {$ <span class="keywordflow">break</span>; }  <span class="comment">// Console was destroyed</span>
<a name="l08544"></a>08544 
<a name="l08545"></a>08545         <span class="keywordflow">if</span> (_TX_CALL (Win32::GhostWindowFromHungWindow, (canvas)))
<a name="l08546"></a>08546             {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Программа зависла и будет завершена.&quot;</span>); <span class="keywordflow">break</span>; }
<a name="l08547"></a>08547 
<a name="l08548"></a>08548         <span class="keywordflow">if</span> (canvas &amp;&amp; _TX_CALL (Win32::IsHungAppWindow, (canvas)))
<a name="l08549"></a>08549             {$ _txTrace (__FILE__, __LINE__, NULL, <span class="stringliteral">&quot;WARNING: Программа-таки зависла и будет завершена.&quot;</span>); <span class="keywordflow">break</span>; }
<a name="l08550"></a>08550 
<a name="l08551"></a>08551         <span class="keywordflow">if</span> (canvas &amp;&amp; !SendMessageTimeout (canvas, WM_NULL, 0,0, SMTO_BLOCK | SMTO_ABORTIFHUNG, <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>, NULL))
<a name="l08552"></a>08552             {$ _txTrace (__FILE__, __LINE__, NULL, <span class="stringliteral">&quot;WARNING: Программа не отвечает и будет завершена.&quot;</span>);  <span class="keywordflow">break</span>; }
<a name="l08553"></a>08553 
<a name="l08554"></a>08554         <span class="keywordflow">if</span> (!wine &amp;&amp; !(i % 100500))
<a name="l08555"></a>08555             {$ fprintf (stderr, <span class="stringliteral">&quot;\r&quot;</span> <span class="stringliteral">&quot;[Так нажмите же какую-нибудь клавишу для моего завершения]&quot;</span>); }
<a name="l08556"></a>08556         }
<a name="l08557"></a>08557 
<a name="l08558"></a>08558 $   <span class="keywordflow">while</span> (!wine &amp;&amp; _kbhit()) (void)_getch();
<a name="l08559"></a>08559 
<a name="l08560"></a>08560 $   fprintf (stderr, <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08561"></a>08561     }
<a name="l08562"></a>08562 
<a name="l08563"></a>08563 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08564"></a>08564 
<a name="l08565"></a>08565 <span class="keywordtype">int</span> _txGetInput()
<a name="l08566"></a>08566     {
<a name="l08567"></a>08567 $4  HANDLE con = GetStdHandle (STD_INPUT_HANDLE);
<a name="l08568"></a>08568 
<a name="l08569"></a>08569 $   DWORD nChars = 0;
<a name="l08570"></a>08570 $   <span class="keywordflow">if</span> (GetConsoleMode (con, &amp;nChars) == 0 &amp;&amp;
<a name="l08571"></a>08571         PeekNamedPipe  (con, NULL, 0, NULL, &amp;nChars, NULL))
<a name="l08572"></a>08572         {
<a name="l08573"></a>08573 $       <span class="keywordflow">return</span> (nChars)? fgetc (stdin) : EOF;
<a name="l08574"></a>08574         }
<a name="l08575"></a>08575 
<a name="l08576"></a>08576 $   <span class="keywordflow">if</span> (_kbhit())
<a name="l08577"></a>08577         {
<a name="l08578"></a>08578 $       <span class="keywordflow">return</span> _getch();
<a name="l08579"></a>08579         }
<a name="l08580"></a>08580 
<a name="l08581"></a>08581 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1700)</span>
<a name="l08582"></a>08582 <span class="preprocessor"></span>
<a name="l08583"></a>08583 $   <span class="keywordflow">if</span> (fseek (stdin, 1, SEEK_CUR) != EOF)
<a name="l08584"></a>08584         {
<a name="l08585"></a>08585 $       (void) fseek (stdin, -1, SEEK_CUR);
<a name="l08586"></a>08586 $       <span class="keywordflow">return</span> fgetc (stdin);                              <span class="comment">// This causes blocking in MSVC 2011 beta</span>
<a name="l08587"></a>08587         }
<a name="l08588"></a>08588 
<a name="l08589"></a>08589 <span class="preprocessor">#endif</span>
<a name="l08590"></a>08590 <span class="preprocessor"></span>
<a name="l08591"></a>08591 $   <span class="keywordflow">return</span> EOF;
<a name="l08592"></a>08592     }
<a name="l08593"></a>08593 
<a name="l08594"></a>08594 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08595"></a>08595 
<a name="l08596"></a>08596 <span class="keywordtype">int</span> _txIsParentWaitable (DWORD* parentPID <span class="comment">/*= NULL*/</span>)
<a name="l08597"></a>08597     {
<a name="l08598"></a>08598 $4  PROCESSENTRY32* info = _txFindProcess();
<a name="l08599"></a>08599 $   <span class="keywordflow">if</span> (!info) <span class="keywordflow">return</span> 0;
<a name="l08600"></a>08600 
<a name="l08601"></a>08601 $   info = _txFindProcess (info-&gt;th32ParentProcessID);
<a name="l08602"></a>08602 $   <span class="keywordflow">if</span> (!info) <span class="keywordflow">return</span> 0;
<a name="l08603"></a>08603 
<a name="l08604"></a>08604 $   <span class="keywordtype">char</span> parent [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l08605"></a>08605 $   strncpy_s (parent, <span class="keyword">sizeof</span> (parent), info-&gt;szExeFile, sizeof (parent) - 1);
<a name="l08606"></a>08606 $   <span class="keywordflow">if</span> (parentPID) *parentPID = info-&gt;th32ProcessID;
<a name="l08607"></a>08607 
<a name="l08608"></a>08608 $   info = _txFindProcess (info-&gt;th32ParentProcessID);          <span class="comment">// info: grandparent</span>
<a name="l08609"></a>08609 
<a name="l08610"></a>08610 $   <span class="keywordtype">char</span> list[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <a class="code" href="a00084.htm#ga2c0a4fe0612f109c5c88d6d55a061db5" title="Список запускающих программ, которые ждут нажатия клавиши после завершения процесса TXLib...">_TX_WAITABLE_PARENTS</a>;
<a name="l08611"></a>08611 $   <span class="keywordtype">char</span>* ctx = NULL;
<a name="l08612"></a>08612 
<a name="l08613"></a>08613 $   <span class="keywordflow">for</span> (<span class="keywordtype">char</span>* p = strtok_s (list, <span class="stringliteral">&quot;, &quot;</span>, &amp;ctx); p; p = strtok_s (NULL, <span class="stringliteral">&quot;, &quot;</span>, &amp;ctx))
<a name="l08614"></a>08614         {
<a name="l08615"></a>08615 $       <span class="keywordtype">char</span>* gp = strchr (p, <span class="charliteral">&#39;:&#39;</span>);
<a name="l08616"></a>08616 
<a name="l08617"></a>08617 $       <span class="keywordflow">if</span> (gp)
<a name="l08618"></a>08618             {
<a name="l08619"></a>08619 $           *gp++ = 0;
<a name="l08620"></a>08620 
<a name="l08621"></a>08621 $           <span class="keywordflow">if</span> (_stricmp (p, parent) != 0) { <span class="keywordflow">continue</span>; }
<a name="l08622"></a>08622 
<a name="l08623"></a>08623 $           <span class="keywordflow">if</span> (info) <span class="keywordflow">if</span> (_stricmp (gp, info-&gt;szExeFile) == 0)  <span class="comment">// Was &amp;&amp;, but MSVC /analyze is so paranoid</span>
<a name="l08624"></a>08624                 {$ <span class="keywordflow">return</span> islower ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) *gp)? +1 : -1; }
<a name="l08625"></a>08625             }
<a name="l08626"></a>08626         <span class="keywordflow">else</span>
<a name="l08627"></a>08627             {
<a name="l08628"></a>08628 $           <span class="keywordflow">if</span> (_stricmp (p, parent) == 0)
<a name="l08629"></a>08629                 {$ <span class="keywordflow">return</span> islower ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)  *p)? +1 : -1; }
<a name="l08630"></a>08630             }
<a name="l08631"></a>08631         }
<a name="l08632"></a>08632 
<a name="l08633"></a>08633 $   <span class="keywordflow">return</span> 0;
<a name="l08634"></a>08634     }
<a name="l08635"></a>08635 
<a name="l08636"></a>08636 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08637"></a>08637 
<a name="l08638"></a>08638 <span class="keywordtype">void</span> _txWatchdogTerminator (<span class="keywordtype">void</span>* timeout)  <span class="comment">// Or Watchcat? Possibly will change in future versions</span>
<a name="l08639"></a>08639     {
<a name="l08640"></a>08640 $3  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (timeout)) <span class="keywordflow">return</span>;
<a name="l08641"></a>08641 
<a name="l08642"></a>08642 $   Sleep (*(<span class="keywordtype">int</span>*) timeout);
<a name="l08643"></a>08643 
<a name="l08644"></a>08644 $   OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l08645"></a>08645     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s(): Timeout (%d) expired, activating. %s\n&quot;</span>,  <span class="comment">// Kinda static reflection...</span>
<a name="l08646"></a>08646                          _TX_VERSION, __func__, *(<span class="keywordtype">int</span>*) timeout, ((__func__[8] == <span class="charliteral">&#39;d&#39;</span>)? <span class="stringliteral">&quot;Bark, bark&quot;</span> : <span class="stringliteral">&quot;Meow, meow&quot;</span>));
<a name="l08647"></a>08647 $   DWORD parent = 0;
<a name="l08648"></a>08648 $   <span class="keywordflow">if</span> (_txIsParentWaitable (&amp;parent))
<a name="l08649"></a>08649         {
<a name="l08650"></a>08650         <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s(): Calling _txKillProcess (0x%04lu)\n&quot;</span>,
<a name="l08651"></a>08651                              _TX_VERSION, __func__, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) parent);
<a name="l08652"></a>08652 
<a name="l08653"></a>08653 $       _txKillProcess (parent);
<a name="l08654"></a>08654 
<a name="l08655"></a>08655 $       PostMessage (GetConsoleWindow(), WM_CHAR, <span class="charliteral">&#39;\n&#39;</span>, 0);
<a name="l08656"></a>08656         }
<a name="l08657"></a>08657 
<a name="l08658"></a>08658     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s(): Calling Win32::TerminateProcess (EXIT_FAILURE)\n&quot;</span>, _TX_VERSION, __func__);
<a name="l08659"></a>08659 $   Win32::TerminateProcess (GetCurrentProcess(), EXIT_FAILURE);
<a name="l08660"></a>08660     }
<a name="l08661"></a>08661 
<a name="l08662"></a>08662 <span class="comment">//}</span>
<a name="l08663"></a>08663 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08664"></a>08664 
<a name="l08665"></a>08665 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08666"></a>08666 <span class="comment">//{          Tools</span>
<a name="l08667"></a>08667 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08668"></a>08668 
<a name="l08669"></a>08669 PROCESSENTRY32* _txFindProcess (<span class="keywordtype">unsigned</span> pid <span class="comment">/*= GetCurrentProcessId()*/</span>)
<a name="l08670"></a>08670     {
<a name="l08671"></a>08671 $4  <span class="keyword">static</span> PROCESSENTRY32 info = { <span class="keyword">sizeof</span> (info) };
<a name="l08672"></a>08672 $   <span class="keywordflow">if</span> (!pid) <span class="keywordflow">return</span> &amp;info;
<a name="l08673"></a>08673 
<a name="l08674"></a>08674 $   HANDLE sshot = CreateToolhelp32Snapshot (TH32CS_SNAPPROCESS, 0);
<a name="l08675"></a>08675 $   assert (sshot); <span class="keywordflow">if</span> (!sshot) <span class="keywordflow">return</span> NULL;
<a name="l08676"></a>08676 
<a name="l08677"></a>08677 $   <span class="keywordflow">for</span> (<span class="keywordtype">bool</span> ok = !!Process32First (sshot, &amp;info); ok; ok = !!Process32Next (sshot, &amp;info))
<a name="l08678"></a>08678         <span class="keywordflow">if</span> (info.th32ProcessID == pid) <span class="keywordflow">break</span>;
<a name="l08679"></a>08679 
<a name="l08680"></a>08680 $   CloseHandle (sshot);
<a name="l08681"></a>08681 
<a name="l08682"></a>08682 $   <span class="keywordflow">return</span> &amp;info;
<a name="l08683"></a>08683     }
<a name="l08684"></a>08684 
<a name="l08685"></a>08685 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08686"></a>08686 
<a name="l08687"></a>08687 <span class="comment">// You are here, little hacker?</span>
<a name="l08688"></a>08688 
<a name="l08689"></a>08689 <span class="keywordtype">bool</span> _txKillProcess (DWORD pid)
<a name="l08690"></a>08690     {
<a name="l08691"></a>08691 $3  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (pid)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l08692"></a>08692 
<a name="l08693"></a>08693 $   HANDLE token = INVALID_HANDLE_VALUE;
<a name="l08694"></a>08694 $   OpenProcessToken (GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;token) asserted;
<a name="l08695"></a>08695 
<a name="l08696"></a>08696 $   LUID luid = {};
<a name="l08697"></a>08697 $   LookupPrivilegeValue (NULL, SE_DEBUG_NAME, &amp;luid) asserted;
<a name="l08698"></a>08698 
<a name="l08699"></a>08699 $   TOKEN_PRIVILEGES priv = { 1, {{{ luid.LowPart, luid.HighPart}, SE_PRIVILEGE_ENABLED }}};
<a name="l08700"></a>08700 $   TOKEN_PRIVILEGES old  = {};
<a name="l08701"></a>08701 
<a name="l08702"></a>08702 $   DWORD oldSz = 0;
<a name="l08703"></a>08703 $   AdjustTokenPrivileges (token, <span class="keyword">false</span>, &amp;priv, <span class="keyword">sizeof</span> (priv), &amp;old, &amp;oldSz) asserted;
<a name="l08704"></a>08704 
<a name="l08705"></a>08705 $   HANDLE proc = OpenProcess (PROCESS_ALL_ACCESS, 0, pid);
<a name="l08706"></a>08706 $   if (!proc) return false;
<a name="l08707"></a>08707 
<a name="l08708"></a>08708 $   <span class="keywordtype">bool</span> ok = !!Win32::TerminateProcess (proc, 0);
<a name="l08709"></a>08709 $   CloseHandle (proc);
<a name="l08710"></a>08710 
<a name="l08711"></a>08711 $   return ok;
<a name="l08712"></a>08712     }
<a name="l08713"></a>08713 
<a name="l08714"></a>08714 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08715"></a>08715 
<a name="l08716"></a>08716 <span class="keywordtype">int</span> txTaskKill (const <span class="keywordtype">char</span> i[] <span class="comment">/*= NULL*/</span>,
<a name="l08717"></a>08717                 const <span class="keywordtype">char</span> doYouWantToFindSomethingInTheCommandLineIDidSomethingForYouToFindSomethingInTheCommandLineMaybeYouWillFindSomeInterestingInTheCommandLineSoIDidSomethingForYouInTheCommandLine[] <span class="comment">/*= NULL*/</span>,
<a name="l08718"></a>08718                 <span class="keywordtype">unsigned</span>   x   <span class="comment">/*= 0*/</span>)
<a name="l08719"></a>08719     {
<a name="l08720"></a>08720     <span class="comment">// ...so tired of it already...</span>
<a name="l08721"></a>08721 
<a name="l08722"></a>08722 <span class="preprocessor">    #define name          i  // Great name!</span>
<a name="l08723"></a>08723 <span class="preprocessor"></span><span class="preprocessor">    #define cmdLineSubstr doYouWantToFindSomethingInTheCommandLineIDidSomethingForYouToFindSomethingInTheCommandLineMaybeYouWillFindSomeInterestingInTheCommandLineSoIDidSomethingForYouInTheCommandLine</span>
<a name="l08724"></a>08724 <span class="preprocessor"></span><span class="preprocessor">    #define pid           x  // Another great name, isn&#39;t it?</span>
<a name="l08725"></a>08725 <span class="preprocessor"></span>
<a name="l08726"></a>08726 $3  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED ((name || cmdLineSubstr || pid) &amp;&amp; <span class="stringliteral">&quot;Вот такие тут интересные имена встречаются...&quot;</span>)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l08727"></a>08727 
<a name="l08728"></a>08728 $   <span class="keywordtype">wchar_t</span> cmdLineSubstrW[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = L<span class="stringliteral">&quot;&quot;</span>;
<a name="l08729"></a>08729     <span class="keywordflow">if</span> (cmdLineSubstr) {$ MultiByteToWideChar (_TX_CODEPAGE, 0, cmdLineSubstr, -1, cmdLineSubstrW, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (cmdLineSubstrW)); }
<a name="l08730"></a>08730 
<a name="l08731"></a>08731 $   HANDLE sshot = CreateToolhelp32Snapshot (TH32CS_SNAPPROCESS, 0);
<a name="l08732"></a>08732 $   assert (sshot); <span class="keywordflow">if</span> (!sshot) <span class="keywordflow">return</span> 0;
<a name="l08733"></a>08733 
<a name="l08734"></a>08734 $   <span class="keywordtype">int</span> killed = 0;
<a name="l08735"></a>08735 
<a name="l08736"></a>08736 $   PROCESSENTRY32 info = { <span class="keyword">sizeof</span> (info) };
<a name="l08737"></a>08737 $   <span class="keywordflow">for</span> (<span class="keywordtype">bool</span> ok = !!Process32First (sshot, &amp;info); ok; ok = !!Process32Next (sshot, &amp;info))
<a name="l08738"></a>08738         {
<a name="l08739"></a>08739         <span class="keywordtype">bool</span> kill = <span class="keyword">false</span>;
<a name="l08740"></a>08740 
<a name="l08741"></a>08741         <span class="keywordflow">if</span> (!kill &amp;&amp; pid  &amp;&amp; info.th32ParentProcessID        == pid) {$ kill = <span class="keyword">true</span>; }
<a name="l08742"></a>08742 
<a name="l08743"></a>08743         <span class="keywordflow">if</span> (!kill &amp;&amp; name &amp;&amp; _stricmp (info.szExeFile, name) == 0)   {$ kill = <span class="keyword">true</span>; }
<a name="l08744"></a>08744 
<a name="l08745"></a>08745         <span class="keywordflow">if</span> (!kill)
<a name="l08746"></a>08746             {
<a name="l08747"></a>08747             <span class="keywordtype">wchar_t</span> cmdLineW[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = L<span class="stringliteral">&quot;&quot;</span>;
<a name="l08748"></a>08748             <span class="keywordflow">if</span> (!_txGetCommandLine (cmdLineW, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (cmdLineW), info.th32ProcessID)) { <span class="keywordflow">continue</span>; }
<a name="l08749"></a>08749 
<a name="l08750"></a>08750             <span class="keywordflow">if</span> (*cmdLineW &amp;&amp; stristrw (cmdLineW, cmdLineSubstrW))    {$ kill = <span class="keyword">true</span>; }
<a name="l08751"></a>08751             }
<a name="l08752"></a>08752 
<a name="l08753"></a>08753         <span class="keywordflow">if</span> (kill)
<a name="l08754"></a>08754             {
<a name="l08755"></a>08755 $           <span class="keywordflow">if</span> (_txKillProcess (info.th32ProcessID))
<a name="l08756"></a>08756                 {$ killed++; }
<a name="l08757"></a>08757             }
<a name="l08758"></a>08758         }
<a name="l08759"></a>08759 
<a name="l08760"></a>08760 $   CloseHandle (sshot);
<a name="l08761"></a>08761 
<a name="l08762"></a>08762 $   <span class="keywordflow">return</span> killed;
<a name="l08763"></a>08763 
<a name="l08764"></a>08764 <span class="preprocessor">    #undef name</span>
<a name="l08765"></a>08765 <span class="preprocessor"></span><span class="preprocessor">    #undef cmdLine</span>
<a name="l08766"></a>08766 <span class="preprocessor"></span><span class="preprocessor">    #undef pid</span>
<a name="l08767"></a>08767 <span class="preprocessor"></span>    }
<a name="l08768"></a>08768 
<a name="l08769"></a>08769 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08770"></a>08770 
<a name="l08771"></a>08771 <span class="keywordtype">bool</span> _txGetCommandLine (<span class="keywordtype">wchar_t</span> cmdLine[], <span class="keywordtype">size_t</span> szCmdLine, <span class="keywordtype">unsigned</span> pid <span class="comment">/*= _getpid()*/</span>)
<a name="l08772"></a>08772     {
<a name="l08773"></a>08773 $4  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (cmdLine))        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l08774"></a>08774 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (szCmdLine &gt;= 2)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l08775"></a>08775 
<a name="l08776"></a>08776 $   <span class="keywordflow">if</span> (pid == (<span class="keywordtype">unsigned</span>) _getpid())
<a name="l08777"></a>08777         {
<a name="l08778"></a>08778 $       wcsncpy_s (cmdLine, szCmdLine, GetCommandLineW(), szCmdLine-1);
<a name="l08779"></a>08779 $       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l08780"></a>08780         }
<a name="l08781"></a>08781 
<a name="l08782"></a>08782 $   HANDLE proc = OpenProcess (PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, <span class="keyword">false</span>, pid);
<a name="l08783"></a>08783     <span class="keywordflow">if</span> (!proc) {$ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l08784"></a>08784 
<a name="l08785"></a>08785 $   Win32::PROCESS_BASIC_INFORMATION pbi = {};
<a name="l08786"></a>08786 $   Win32::NtQueryInformationProcess (proc, 0 <span class="comment">/*ProcessBasicInformation*/</span>, &amp;pbi, <span class="keyword">sizeof</span> (pbi), NULL) == 0 <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l08787"></a>08787 
<a name="l08788"></a>08788     <span class="comment">// Should use ReadProcessMemory() because the info is actually in another address space</span>
<a name="l08789"></a>08789 
<a name="l08790"></a>08790 $   <span class="keywordtype">bool</span> ok = <span class="keyword">true</span>;
<a name="l08791"></a>08791 
<a name="l08792"></a>08792 $   Win32::PEB peb = {};
<a name="l08793"></a>08793     <span class="keywordflow">if</span> (ok &amp;&amp; pbi.PebBaseAddress)        {$ ok &amp;= !!ReadProcessMemory (proc, pbi.PebBaseAddress,        &amp;peb,    sizeof (peb),    NULL); }
<a name="l08794"></a>08794 
<a name="l08795"></a>08795 $   Win32::RTL_USER_PROCESS_PARAMETERS params = {};
<a name="l08796"></a>08796     <span class="keywordflow">if</span> (ok &amp;&amp; peb.ProcessParameters)     {$ ok &amp;= !!ReadProcessMemory (proc, peb.ProcessParameters,     &amp;params, sizeof (params), NULL); }
<a name="l08797"></a>08797 
<a name="l08798"></a>08798 $   *cmdLine = 0;
<a name="l08799"></a>08799     <span class="keywordflow">if</span> (ok &amp;&amp; params.CommandLine.Buffer) {$ ok &amp;= !!ReadProcessMemory (proc, params.CommandLine.Buffer, cmdLine,
<a name="l08800"></a>08800                                                                        <a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a>  (params.CommandLine.Length + 2, (<span class="keywordtype">int</span>) (szCmdLine * sizeof (*cmdLine)) - 2),
<a name="l08801"></a>08801                                                                        NULL); }
<a name="l08802"></a>08802 $   CloseHandle (proc) asserted;
<a name="l08803"></a>08803 
<a name="l08804"></a>08804 $   return ok;
<a name="l08805"></a>08805     }
<a name="l08806"></a>08806 
<a name="l08807"></a>08807 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08808"></a>08808 
<a name="l08809"></a>08809 <span class="preprocessor">#define RVA_(type, module, addr)  ( (type) ((uintptr_t) (module) + (uintptr_t) (addr)) )</span>
<a name="l08810"></a>08810 <span class="preprocessor"></span>
<a name="l08811"></a>08811 IMAGE_NT_HEADERS* _txGetNtHeaders (HMODULE module <span class="comment">/*= GetModuleHandle (NULL)*/</span>)
<a name="l08812"></a>08812     {
<a name="l08813"></a>08813 $4  assert (module);
<a name="l08814"></a>08814 
<a name="l08815"></a>08815 $   IMAGE_DOS_HEADER* dosHdr = RVA_ (IMAGE_DOS_HEADER*, module, 0);
<a name="l08816"></a>08816 $   IMAGE_NT_HEADERS* ntHdr  = RVA_ (IMAGE_NT_HEADERS*, module, dosHdr-&gt;e_lfanew);
<a name="l08817"></a>08817 
<a name="l08818"></a>08818 $   <span class="keywordflow">return</span> (dosHdr-&gt;e_magic  == IMAGE_DOS_SIGNATURE &amp;&amp;
<a name="l08819"></a>08819             ntHdr-&gt;Signature == IMAGE_NT_SIGNATURE)? ntHdr : NULL;
<a name="l08820"></a>08820     }
<a name="l08821"></a>08821 
<a name="l08822"></a>08822 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08823"></a>08823 
<a name="l08824"></a>08824 <span class="comment">// TXLib continues to hack the reality to make your life better, sweeter and easier</span>
<a name="l08825"></a>08825 
<a name="l08826"></a>08826 uintptr_t _txSetProcAddress (<span class="keyword">const</span> <span class="keywordtype">char</span> funcName[], uintptr_t newFunc, <span class="keyword">const</span> <span class="keywordtype">char</span> dllName[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> useHotPatching <span class="comment">/*= false*/</span>,
<a name="l08827"></a>08827                              HMODULE module <span class="comment">/*= NULL*/</span>, <span class="keywordtype">bool</span> debug <span class="comment">/*= false*/</span>)
<a name="l08828"></a>08828     {
<a name="l08829"></a>08829 $4  <span class="keywordflow">if</span> (debug) <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;_txSetProcAddress (%s, 0x%p, %s, 0x%p):\n&quot;</span>, funcName, (<span class="keywordtype">void</span>*) newFunc, dllName, module);
<a name="l08830"></a>08830 
<a name="l08831"></a>08831 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (funcName)) <span class="keywordflow">return</span> 0;
<a name="l08832"></a>08832 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (newFunc))  <span class="keywordflow">return</span> 0;
<a name="l08833"></a>08833 
<a name="l08834"></a>08834 $   <span class="keywordflow">if</span> (!module) module = GetModuleHandle (NULL);
<a name="l08835"></a>08835 $   <span class="keywordflow">if</span> (!module) <span class="keywordflow">return</span> 0;
<a name="l08836"></a>08836 
<a name="l08837"></a>08837 $   HMODULE dll     = (dllName)? GetModuleHandle (dllName)       : NULL;
<a name="l08838"></a>08838 $   PROC    oldFunc = (dll)?     GetProcAddress  (dll, funcName) : NULL;
<a name="l08839"></a>08839 
<a name="l08840"></a>08840 $   <span class="keywordflow">if</span> (useHotPatching &amp;&amp; oldFunc)
<a name="l08841"></a>08841         {
<a name="l08842"></a>08842 $       <span class="keyword">const</span> <span class="keywordtype">size_t</span> jmpSz = 1 + <span class="keyword">sizeof</span> (DWORD);  <span class="comment">// sizeof (JMP rel instruction)</span>
<a name="l08843"></a>08843 
<a name="l08844"></a>08844 $       DWORD oldRights = 0;
<a name="l08845"></a>08845 $       <span class="keywordflow">if</span> (!VirtualProtect ((<span class="keywordtype">void</span>*)(uintptr_t) oldFunc, jmpSz, PAGE_EXECUTE_READWRITE, &amp;oldRights)) <span class="keywordflow">return</span> 0;
<a name="l08846"></a>08846 
<a name="l08847"></a>08847         <span class="comment">// Overwrite oldFunc prolog with JMP trampoline to newFunc.</span>
<a name="l08848"></a>08848         <span class="comment">// Calling oldFunc from any location will lead to newFunc call anyway.</span>
<a name="l08849"></a>08849 
<a name="l08850"></a>08850 $       *(BYTE*)  ((<span class="keywordtype">char</span>*)(uintptr_t) oldFunc + 0) = 0xE9;  <span class="comment">// JMP rel</span>
<a name="l08851"></a>08851 $       *(DWORD*) ((<span class="keywordtype">char</span>*)(uintptr_t) oldFunc + 1) = ((<span class="keywordtype">char</span>*)(uintptr_t) newFunc - (<span class="keywordtype">char</span>*)(uintptr_t) oldFunc - jmpSz) &amp; 0xFFFFFFFF;
<a name="l08852"></a>08852 
<a name="l08853"></a>08853 $       FlushInstructionCache (GetCurrentProcess(), (<span class="keywordtype">void</span>*)(uintptr_t) oldFunc, jmpSz);
<a name="l08854"></a>08854 
<a name="l08855"></a>08855 $       VirtualProtect ((<span class="keywordtype">void</span>*)(uintptr_t) oldFunc, jmpSz, oldRights, &amp;oldRights);
<a name="l08856"></a>08856 
<a name="l08857"></a>08857 $       return (uintptr_t) oldFunc;
<a name="l08858"></a>08858         }
<a name="l08859"></a>08859 
<a name="l08860"></a>08860 <span class="comment">//  For PE structure and Import Table format, e.g. see https://books.google.ru/books?id=ifQPC86G66sC&amp;pg=PA255</span>
<a name="l08861"></a>08861 <span class="comment">//  and below through Figure 5-5, and/or http://www.brokenthorn.com/Resources/OSDevPE.html.</span>
<a name="l08862"></a>08862 
<a name="l08863"></a>08863 $   IMAGE_NT_HEADERS* ntHdr = _txGetNtHeaders (module);
<a name="l08864"></a>08864     if (!ntHdr || (ntHdr -&gt;OptionalHeader.Magic != IMAGE_NT_OPTIONAL_HDR_MAGIC)) {$ <span class="keywordflow">return</span> 0; }
<a name="l08865"></a>08865 
<a name="l08866"></a>08866 $   DWORD impOffset = ntHdr-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress;
<a name="l08867"></a>08867 $   IMAGE_IMPORT_DESCRIPTOR* desc = RVA_ (IMAGE_IMPORT_DESCRIPTOR*, module, impOffset);
<a name="l08868"></a>08868 
<a name="l08869"></a>08869 $   <span class="keywordflow">if</span> (desc == (IMAGE_IMPORT_DESCRIPTOR*) ntHdr) <span class="keywordflow">return</span> 0;
<a name="l08870"></a>08870 
<a name="l08871"></a>08871 $   IMAGE_THUNK_DATA* thunk0 = NULL, * thunk1 = NULL;
<a name="l08872"></a>08872 $   <span class="keywordtype">char</span>*  impDll  = NULL;
<a name="l08873"></a>08873 $   <span class="keywordtype">char</span>*  impName = NULL;
<a name="l08874"></a>08874 $   <span class="keywordtype">void</span>** impPtr  = NULL;
<a name="l08875"></a>08875 $   <span class="keywordtype">bool</span>   found   = <span class="keyword">false</span>;
<a name="l08876"></a>08876 
<a name="l08877"></a>08877     <span class="keywordflow">for</span> (; desc-&gt;Name; desc++)
<a name="l08878"></a>08878         {
<a name="l08879"></a>08879 $       impDll = RVA_ (<span class="keywordtype">char</span>*, module, desc-&gt;Name);
<a name="l08880"></a>08880 $       <span class="keywordflow">if</span> (dllName &amp;&amp; _stricmp (impDll, dllName) != 0) <span class="keywordflow">continue</span>;
<a name="l08881"></a>08881 
<a name="l08882"></a>08882 $       <span class="keywordflow">for</span> (thunk0 = RVA_ (IMAGE_THUNK_DATA*, module, desc-&gt;OriginalFirstThunk),
<a name="l08883"></a>08883              thunk1 = RVA_ (IMAGE_THUNK_DATA*, module, desc-&gt;FirstThunk);
<a name="l08884"></a>08884 
<a name="l08885"></a>08885              thunk0 &amp;&amp; thunk1 &amp;&amp; thunk1-&gt;u1.Function;
<a name="l08886"></a>08886 
<a name="l08887"></a>08887              thunk0++,
<a name="l08888"></a>08888              thunk1++)
<a name="l08889"></a>08889             {
<a name="l08890"></a>08890             impName = (<span class="keywordtype">char</span>*) RVA_ (IMAGE_IMPORT_BY_NAME*, module, thunk0-&gt;u1.AddressOfData) -&gt; Name;
<a name="l08891"></a>08891             impPtr  = (<span class="keywordtype">void</span>**)(uintptr_t)                         &amp;thunk1-&gt;u1.Function;  <span class="comment">// Should change it, so this is ptr</span>
<a name="l08892"></a>08892 
<a name="l08893"></a>08893             <span class="keywordflow">if</span> (debug) <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;[0x%p] %s!%s\n&quot;</span>, *impPtr, impDll, impName);
<a name="l08894"></a>08894 
<a name="l08895"></a>08895             <span class="keywordflow">if</span> ((oldFunc &amp;&amp; (uintptr_t) oldFunc == (uintptr_t) *impPtr) ||
<a name="l08896"></a>08896                 (impName &amp;&amp; _stricmp (funcName, impName) == 0))
<a name="l08897"></a>08897                 {
<a name="l08898"></a>08898                 found = <span class="keyword">true</span>;
<a name="l08899"></a>08899                 <span class="keywordflow">break</span>;
<a name="l08900"></a>08900                 }
<a name="l08901"></a>08901             }
<a name="l08902"></a>08902 
<a name="l08903"></a>08903 $       <span class="keywordflow">if</span> (found) <span class="keywordflow">break</span>;
<a name="l08904"></a>08904         }
<a name="l08905"></a>08905 
<a name="l08906"></a>08906     <span class="keywordflow">if</span> (debug) <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;_txSetProcAddress (%s, 0x%p, %s, 0x%p): %s\n\n&quot;</span>,
<a name="l08907"></a>08907                                     funcName, (<span class="keywordtype">void</span>*) newFunc, dllName, module, (found? <span class="stringliteral">&quot;FOUND&quot;</span> : <span class="stringliteral">&quot;NOT found&quot;</span>));
<a name="l08908"></a>08908 $   <span class="keywordflow">if</span> (!found) <span class="keywordflow">return</span> 0;
<a name="l08909"></a>08909 
<a name="l08910"></a>08910 $   DWORD rights = PAGE_READWRITE;
<a name="l08911"></a>08911 $   <span class="keywordflow">if</span> (!VirtualProtect (impPtr, <span class="keyword">sizeof</span> (*impPtr), rights, &amp;rights)) <span class="keywordflow">return</span> 0;
<a name="l08912"></a>08912 
<a name="l08913"></a>08913 $   *(uintptr_t*) impPtr = newFunc;
<a name="l08914"></a>08914 
<a name="l08915"></a>08915 $   VirtualProtect (impPtr, <span class="keyword">sizeof</span> (*impPtr), rights, &amp;rights);
<a name="l08916"></a>08916 
<a name="l08917"></a>08917 $   <span class="keywordflow">return</span> (uintptr_t) oldFunc;
<a name="l08918"></a>08918     }
<a name="l08919"></a>08919 
<a name="l08920"></a>08920 <span class="preprocessor">#undef RVA_</span>
<a name="l08921"></a>08921 <span class="preprocessor"></span>
<a name="l08922"></a>08922 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08923"></a>08923 
<a name="l08924"></a>08924 <span class="keywordtype">bool</span> _txInDll()
<a name="l08925"></a>08925     {
<a name="l08926"></a>08926 $4  MODULEENTRY32 mod = { <span class="keyword">sizeof</span> (mod) };
<a name="l08927"></a>08927 
<a name="l08928"></a>08928 $   HANDLE sshot = CreateToolhelp32Snapshot (TH32CS_SNAPMODULE, 0);
<a name="l08929"></a>08929 $   assert (sshot); <span class="keywordflow">if</span> (!sshot) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l08930"></a>08930 
<a name="l08931"></a>08931 $   <span class="keywordtype">bool</span> inDll = <span class="keyword">false</span>;
<a name="l08932"></a>08932 
<a name="l08933"></a>08933 $   <span class="keywordflow">for</span> (<span class="keywordtype">bool</span> ok = !!Module32First (sshot, &amp;mod); ok; ok = !!Module32Next (sshot, &amp;mod))
<a name="l08934"></a>08934         {
<a name="l08935"></a>08935 $       <span class="keywordflow">if</span> (!mod.modBaseAddr) <span class="keywordflow">continue</span>;
<a name="l08936"></a>08936 
<a name="l08937"></a>08937 $       IMAGE_NT_HEADERS* ntHdr = _txGetNtHeaders ((HMODULE) mod.modBaseAddr);
<a name="l08938"></a>08938 
<a name="l08939"></a>08939 $       inDll = ntHdr &amp;&amp; ((ntHdr-&gt;FileHeader.Characteristics &amp; IMAGE_FILE_DLL) != 0);
<a name="l08940"></a>08940 
<a name="l08941"></a>08941 $       <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, (BYTE*)(uintptr_t)_txInDll, mod.modBaseAddr, mod.modBaseAddr + mod.modBaseSize))
<a name="l08942"></a>08942             {$ <span class="keywordflow">break</span>; }
<a name="l08943"></a>08943         }
<a name="l08944"></a>08944 
<a name="l08945"></a>08945 $   CloseHandle (sshot);
<a name="l08946"></a>08946 $   <span class="keywordflow">return</span> inDll;
<a name="l08947"></a>08947     }
<a name="l08948"></a>08948 
<a name="l08949"></a>08949 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08950"></a>08950 
<a name="l08951"></a>08951 <span class="keywordtype">bool</span> _txIsConsoleSubsystem()
<a name="l08952"></a>08952     {
<a name="l08953"></a>08953 $4  IMAGE_NT_HEADERS* ntHdr = _txGetNtHeaders();
<a name="l08954"></a>08954 
<a name="l08955"></a>08955 $   <span class="keywordflow">return</span>  ntHdr &amp;&amp;
<a name="l08956"></a>08956             ntHdr -&gt;OptionalHeader.Magic == IMAGE_NT_OPTIONAL_HDR_MAGIC &amp;&amp;
<a name="l08957"></a>08957 
<a name="l08958"></a>08958            (ntHdr -&gt;OptionalHeader.Subsystem == IMAGE_SUBSYSTEM_WINDOWS_CUI ||
<a name="l08959"></a>08959             ntHdr -&gt;OptionalHeader.Subsystem == IMAGE_SUBSYSTEM_POSIX_CUI);
<a name="l08960"></a>08960     }
<a name="l08961"></a>08961 
<a name="l08962"></a>08962 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08963"></a>08963 
<a name="l08964"></a>08964 <span class="keywordtype">bool</span> _txIsBadReadPtr (<span class="keyword">const</span> <span class="keywordtype">void</span>* address)
<a name="l08965"></a>08965     {
<a name="l08966"></a>08966     MEMORY_BASIC_INFORMATION mbi = {};
<a name="l08967"></a>08967     <span class="keywordflow">if</span> (!VirtualQuery (address, &amp;mbi, <span class="keyword">sizeof</span> (mbi))) <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l08968"></a>08968 
<a name="l08969"></a>08969     <span class="keywordflow">if</span> (mbi.Protect &amp; (PAGE_GUARD | PAGE_NOACCESS))  <span class="keywordflow">return</span> <span class="keyword">true</span>;  <span class="comment">// Guard page -&gt; bad ptr</span>
<a name="l08970"></a>08970 
<a name="l08971"></a>08971     DWORD readRights = PAGE_READONLY | PAGE_READWRITE | PAGE_WRITECOPY | PAGE_EXECUTE_READ | PAGE_EXECUTE_READWRITE | PAGE_EXECUTE_WRITECOPY;
<a name="l08972"></a>08972 
<a name="l08973"></a>08973     <span class="keywordflow">return</span> !(mbi.Protect &amp; readRights);
<a name="l08974"></a>08974     }
<a name="l08975"></a>08975 
<a name="l08976"></a>08976 <span class="comment">//}</span>
<a name="l08977"></a>08977 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08978"></a>08978 
<a name="l08980"></a>08980 <span class="comment">//}</span>
<a name="l08981"></a>08981 <span class="comment">//=================================================================================================================</span>
<a name="l08982"></a>08982 
<a name="l08983"></a>08983 <span class="comment">//=================================================================================================================</span>
<a name="l08984"></a>08984 <span class="comment">//{          Internal TXLib window functions     (_txCanvas...)</span>
<a name="l08986"></a>08986 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l08987"></a>08987 
<a name="l08988"></a>08988 <span class="keywordtype">unsigned</span> WINAPI _txCanvas_ThreadProc (<span class="keywordtype">void</span>* data)
<a name="l08989"></a>08989     {
<a name="l08990"></a>08990 <span class="preprocessor">    #define SetClassLong_  SetClassLongPtr</span>
<a name="l08991"></a>08991 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HICON_     GCLP_HICON</span>
<a name="l08992"></a>08992 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HICONSM_   GCLP_HICONSM</span>
<a name="l08993"></a>08993 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HCURSOR_   GCLP_HCURSOR</span>
<a name="l08994"></a>08994 <span class="preprocessor"></span>
<a name="l08995"></a>08995 $8  _txCanvas_ThreadId = GetCurrentThreadId();
<a name="l08996"></a>08996 
<a name="l08997"></a>08997 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (data)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l08998"></a>08998 
<a name="l08999"></a>08999 $   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> stackSize = <a class="code" href="a00084.htm#ga7b8b43782557dd87528da77b083364ec" title="Минимальный размер стека для потоков программы.">_TX_STACKSIZE</a>;
<a name="l09000"></a>09000 $   _TX_CALL (Win32::SetThreadStackGuarantee, (&amp;stackSize));
<a name="l09001"></a>09001 
<a name="l09002"></a>09002 $   HWND wnd = _txCanvas_CreateWindow ((SIZE*) data);
<a name="l09003"></a>09003 $   <span class="keywordflow">if</span> (!<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>()) <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot create canvas!&quot;</span>), 0;
<a name="l09004"></a>09004 
<a name="l09005"></a>09005 $   HICON   icon32 = LoadIcon         (NULL, <span class="stringliteral">&quot;_TX_ICON&quot;</span>);
<a name="l09006"></a>09006 $   HICON   icon16 = LoadIcon         (NULL, <span class="stringliteral">&quot;_TX_ICONSM&quot;</span>);
<a name="l09007"></a>09007 $   HCURSOR cursor = LoadCursor       (NULL, <span class="stringliteral">&quot;_TX_CURSOR&quot;</span>);
<a name="l09008"></a>09008 $   HMENU   menu   = LoadMenu         (NULL, <span class="stringliteral">&quot;_TX_MENU&quot;</span>);
<a name="l09009"></a>09009 $   HACCEL  accel  = LoadAccelerators (NULL, <span class="stringliteral">&quot;_TX_ACCELERATORS&quot;</span>);
<a name="l09010"></a>09010 
<a name="l09011"></a>09011 $   SetClassLong_ (wnd, GCL_HICON_,   (LONG_PTR) (icon32? icon32 : _txCreateTXIcon (32)));
<a name="l09012"></a>09012 $   SetClassLong_ (wnd, GCL_HICONSM_, (LONG_PTR) (icon16? icon16 : _txCreateTXIcon (16)));
<a name="l09013"></a>09013 $   SetClassLong_ (wnd, GCL_HCURSOR_, (LONG_PTR) (cursor? cursor : LoadCursor (NULL, IDC_ARROW)));
<a name="l09014"></a>09014 
<a name="l09015"></a>09015     <span class="keywordflow">if</span> (menu) {$ SetMenu (wnd, menu); DrawMenuBar (wnd); }
<a name="l09016"></a>09016 
<a name="l09017"></a>09017 $   Win32::GdiSetBatchLimit (1);
<a name="l09018"></a>09018 
<a name="l09019"></a>09019     _TX_ON_DEBUG (OutputDebugString (_TX_VERSION <span class="stringliteral">&quot; - STARTED: &quot;</span> <a class="code" href="a00084.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib. Входит в диагностические сообщения.">_TX_MODULE</a> <span class="stringliteral">&quot;\n&quot;</span>));
<a name="l09020"></a>09020 
<a name="l09021"></a>09021 $   SetForegroundWindow (wnd);
<a name="l09022"></a>09022 
<a name="l09023"></a>09023 $   ShowWindow          (wnd, SW_SHOW);
<a name="l09024"></a>09024 $   UpdateWindow        (wnd);
<a name="l09025"></a>09025 
<a name="l09026"></a>09026 $   _txRunning = <span class="keyword">true</span>;
<a name="l09027"></a>09027 
<a name="l09028"></a>09028 $   MSG msg = {};
<a name="l09029"></a>09029 $   <span class="keywordflow">while</span> (GetMessage (&amp;msg, NULL, 0, 0))
<a name="l09030"></a>09030         {
<a name="l09031"></a>09031         <span class="keywordflow">if</span> (!msg.hwnd) {$ <span class="keywordflow">continue</span>; }
<a name="l09032"></a>09032 
<a name="l09033"></a>09033         <span class="keywordflow">if</span> (accel &amp;&amp; TranslateAccelerator (wnd, accel, &amp;msg)) {$ <span class="keywordflow">continue</span>; }
<a name="l09034"></a>09034 
<a name="l09035"></a>09035 $       TranslateMessage (&amp;msg);
<a name="l09036"></a>09036 $       DispatchMessage  (&amp;msg);
<a name="l09037"></a>09037 
<a name="l09038"></a>09038 $       Sleep (0);
<a name="l09039"></a>09039         }
<a name="l09040"></a>09040 
<a name="l09041"></a>09041 $   <span class="keywordflow">if</span> (icon16) DestroyIcon (icon16);  <span class="comment">// If Explorer is displaying Tray Notification, these</span>
<a name="l09042"></a>09042 $   <span class="keywordflow">if</span> (icon32) DestroyIcon (icon32);  <span class="comment">// calls will possibly fail, and we&#39;ll get resource leak.</span>
<a name="l09043"></a>09043 
<a name="l09044"></a>09044 $   LeaveCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l09045"></a>09045 
<a name="l09046"></a>09046     _TX_ON_DEBUG (OutputDebugString (_TX_VERSION <span class="stringliteral">&quot; - STOPPED: &quot;</span> <a class="code" href="a00084.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib. Входит в диагностические сообщения.">_TX_MODULE</a> <span class="stringliteral">&quot;\n&quot;</span>));
<a name="l09047"></a>09047 
<a name="l09048"></a>09048 $   <span class="keywordflow">if</span> (<a class="code" href="a00084.htm#ga181143543b3883cf8570f80da3ad7fcc" title="Лимит времени на завершение программы, начиная от завершения функции main() или от вызова exit()...">_txWatchdogTimeout</a> &gt;= 0)
<a name="l09049"></a>09049         {$ Win32::_beginthread (_txWatchdogTerminator, 0, &amp;<a class="code" href="a00084.htm#ga181143543b3883cf8570f80da3ad7fcc" title="Лимит времени на завершение программы, начиная от завершения функции main() или от вызова exit()...">_txWatchdogTimeout</a>); }
<a name="l09050"></a>09050 
<a name="l09051"></a>09051 $   <span class="keywordflow">if</span> (_txRunning &amp;&amp; _txMain)         <span class="comment">// Main window is destroyed but main() is still running.</span>
<a name="l09052"></a>09052         {                              <span class="comment">// No chances for good termination, so use exit().</span>
<a name="l09053"></a>09053 $       _txCleanup();
<a name="l09054"></a>09054 $       ::exit ((int) msg.wParam);
<a name="l09055"></a>09055         }
<a name="l09056"></a>09056 
<a name="l09057"></a>09057 $   _txCanvas_ThreadId = 0;
<a name="l09058"></a>09058 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09059"></a>09059 
<a name="l09060"></a>09060 <span class="preprocessor">    #undef SetClassLong</span>
<a name="l09061"></a>09061 <span class="preprocessor"></span><span class="preprocessor">    #undef GCL_HICON_</span>
<a name="l09062"></a>09062 <span class="preprocessor"></span><span class="preprocessor">    #undef GCL_HICONSM_</span>
<a name="l09063"></a>09063 <span class="preprocessor"></span><span class="preprocessor">    #undef GCL_HCURSOR_</span>
<a name="l09064"></a>09064 <span class="preprocessor"></span>    }
<a name="l09065"></a>09065 
<a name="l09066"></a>09066 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09067"></a>09067 
<a name="l09068"></a>09068 HWND _txCanvas_CreateWindow (<span class="keyword">const</span> SIZE* sizePtr)
<a name="l09069"></a>09069     {
<a name="l09070"></a>09070 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (sizePtr)) <span class="keywordflow">return</span> NULL;
<a name="l09071"></a>09071 
<a name="l09072"></a>09072 $   <span class="keywordtype">bool</span> centered = <span class="keyword">false</span>;
<a name="l09073"></a>09073     <span class="keywordflow">if</span> (sizePtr-&gt;cx &lt; 0 &amp;&amp; sizePtr-&gt;cy &lt; 0) {$ centered = <span class="keyword">true</span>; }
<a name="l09074"></a>09074 
<a name="l09075"></a>09075 $   SIZE screen = { GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN) };
<a name="l09076"></a>09076 $   RECT rect   = { 0, 0, abs (sizePtr-&gt;cx), abs (sizePtr-&gt;cy) }; AdjustWindowRect (&amp;rect, <a class="code" href="a00084.htm#ga4ddb32d7a8a676537014da7aea7bf273" title="Стиль графического окна библиотеки.">_txWindowStyle</a>, <span class="keyword">false</span>);
<a name="l09077"></a>09077 $   SIZE size   = { rect.right - rect.left, rect.bottom - rect.top };
<a name="l09078"></a>09078 
<a name="l09079"></a>09079 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* wndClass = txRegisterClass (<span class="stringliteral">&quot;MAIN&quot;</span>, _txCanvas_WndProc, CS_HREDRAW | CS_VREDRAW | CS_OWNDC, BLACK_BRUSH, 0);
<a name="l09080"></a>09080 $   <span class="keywordflow">if</span> (!wndClass) <span class="keywordflow">return</span> (HWND) NULL;
<a name="l09081"></a>09081 
<a name="l09082"></a>09082 $   HWND wnd = CreateWindowEx (WS_EX_APPWINDOW, wndClass, <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>), <a class="code" href="a00084.htm#ga4ddb32d7a8a676537014da7aea7bf273" title="Стиль графического окна библиотеки.">_txWindowStyle</a> | WS_CLIPCHILDREN,
<a name="l09083"></a>09083                                centered? screen.cx/2 - size.cx/2 : CW_USEDEFAULT,
<a name="l09084"></a>09084                                centered? screen.cy/2 - size.cy/2 : CW_USEDEFAULT,
<a name="l09085"></a>09085                                size.cx, size.cy, NULL, NULL, NULL, NULL);
<a name="l09086"></a>09086 $   <span class="keywordflow">if</span> (!wnd || !<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>())
<a name="l09087"></a>09087         {$ <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create canvas: CreateWindowEx() failed&quot;</span>), (HWND) NULL; }
<a name="l09088"></a>09088 
<a name="l09089"></a>09089 $   HMENU menu = GetSystemMenu (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), <span class="keyword">false</span>);
<a name="l09090"></a>09090     <span class="keywordflow">if</span> (!menu) {$ <span class="keywordflow">return</span> <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(); }
<a name="l09091"></a>09091 
<a name="l09092"></a>09092 $   AppendMenu (menu, MF_SEPARATOR, 0, NULL)                       asserted;
<a name="l09093"></a>09093 $   AppendMenu (menu, MF_STRING, _TX_IDM_CONSOLE, &quot;Show &amp;Console&quot;) asserted;
<a name="l09094"></a>09094 $   AppendMenu (menu, MF_STRING, _TX_IDM_ABOUT,   &quot;&amp;About...&quot;)     asserted;
<a name="l09095"></a>09095 
<a name="l09096"></a>09096 $   return txWindow();
<a name="l09097"></a>09097     }
<a name="l09098"></a>09098 
<a name="l09099"></a>09099 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09100"></a>09100 
<a name="l09101"></a>09101 const <span class="keywordtype">char</span>* txRegisterClass (const <span class="keywordtype">char</span> classId[], WNDPROC wndProc, <span class="keywordtype">unsigned</span> style, <span class="keywordtype">int</span> backBrush, <span class="keywordtype">int</span> wndExtra)
<a name="l09102"></a>09102     {
<a name="l09103"></a>09103 $8  assert (classId);
<a name="l09104"></a>09104 $   assert (wndProc);
<a name="l09105"></a>09105 
<a name="l09106"></a>09106 $   <span class="keyword">static</span> <span class="keywordtype">char</span> name[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l09107"></a>09107 $   _tx_snprintf_s (name, <span class="keyword">sizeof</span> (name) - 1, <span class="stringliteral">&quot;/*---[TXLib]-[%s]------------ &quot;</span>
<a name="l09108"></a>09108                                              _TX_VERSION <span class="stringliteral">&quot;  &quot;</span> __FILE__ <span class="stringliteral">&quot;  WndClass %08lX &quot;</span>
<a name="l09109"></a>09109                                              <span class="stringliteral">&quot;-------------[%s]-[TXLib]---*/&quot;</span>,
<a name="l09110"></a>09110                                              classId, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) GetTickCount(), classId);
<a name="l09111"></a>09111 $   WNDCLASS wc      = { <span class="keyword">sizeof</span> (wc) };
<a name="l09112"></a>09112 
<a name="l09113"></a>09113 $   wc.lpszClassName = name;
<a name="l09114"></a>09114 $   wc.lpfnWndProc   = wndProc;
<a name="l09115"></a>09115 $   wc.style         = style;
<a name="l09116"></a>09116 $   wc.cbWndExtra    = (wndExtra + 1) * (<span class="keywordtype">int</span>) <span class="keyword">sizeof</span> (long);
<a name="l09117"></a>09117 
<a name="l09118"></a>09118 $   wc.hCursor       = LoadCursor (NULL, IDC_ARROW);
<a name="l09119"></a>09119 $   wc.hbrBackground = (HBRUSH) Win32::GetStockObject (backBrush);
<a name="l09120"></a>09120 
<a name="l09121"></a>09121 $   ATOM atom = RegisterClass (&amp;wc);
<a name="l09122"></a>09122     <span class="keywordflow">if</span> (!atom) {$ <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;RegisterClass (\&quot;%s\&quot;) failed&quot;</span>, name); <span class="keywordflow">return</span> 0; }
<a name="l09123"></a>09123 
<a name="l09124"></a>09124 $   <span class="keywordflow">return</span> (<span class="keyword">const</span> <span class="keywordtype">char</span>*)(uintptr_t) atom;
<a name="l09125"></a>09125     }
<a name="l09126"></a>09126 
<a name="l09127"></a>09127 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09128"></a>09128 
<a name="l09129"></a>09129 <span class="keyword">inline</span> <span class="keywordtype">bool</span> _txCanvas_OK()
<a name="l09130"></a>09130     {
<a name="l09131"></a>09131     <span class="keywordflow">return</span> _txCanvas_ThreadId   &amp;&amp;
<a name="l09132"></a>09132            _txCanvas_Window     &amp;&amp;
<a name="l09133"></a>09133            _txCanvas_BackBuf[0] &amp;&amp;
<a name="l09134"></a>09134            _txCanvas_BackBuf[1] &amp;&amp;
<a name="l09135"></a>09135            _txCanvas_Pixels;
<a name="l09136"></a>09136     }
<a name="l09137"></a>09137 
<a name="l09138"></a>09138 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09139"></a>09139 
<a name="l09140"></a>09140 <span class="keywordtype">int</span> _txCanvas_SetRefreshLock (<span class="keywordtype">int</span> count)
<a name="l09141"></a>09141     {
<a name="l09142"></a>09142 $8  <span class="keywordtype">int</span> oldCount = _txCanvas_RefreshLock;
<a name="l09143"></a>09143 
<a name="l09144"></a>09144 $   _txCanvas_RefreshLock = count;
<a name="l09145"></a>09145 
<a name="l09146"></a>09146 $   HWND wnd = <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>();
<a name="l09147"></a>09147 
<a name="l09148"></a>09148 $   <span class="keywordflow">if</span> ((_txCanvas_RefreshLock &lt;= 0 || oldCount &lt;= 0) &amp;&amp; wnd)
<a name="l09149"></a>09149         {$ RedrawWindow (wnd, NULL, NULL, RDW_INVALIDATE | RDW_INTERNALPAINT | RDW_UPDATENOW); }
<a name="l09150"></a>09150 
<a name="l09151"></a>09151 $   <span class="keywordflow">return</span> oldCount;
<a name="l09152"></a>09152     }
<a name="l09153"></a>09153 
<a name="l09154"></a>09154 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09155"></a>09155 
<a name="l09156"></a>09156 HICON _txCreateTXIcon (<span class="keywordtype">int</span> size)
<a name="l09157"></a>09157     {
<a name="l09158"></a>09158 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (size == 32 || size == 16)) <span class="keywordflow">return</span> NULL;
<a name="l09159"></a>09159 
<a name="l09160"></a>09160 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> image32 [32*32+1] =
<a name="l09161"></a>09161         <span class="stringliteral">&quot;00000000000000000000000000000000&quot;</span><span class="stringliteral">&quot;0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0&quot;</span><span class="stringliteral">&quot;0F0000000000000000000000000000F0&quot;</span><span class="stringliteral">&quot;0F0000000000000000000000000000F0&quot;</span>
<a name="l09162"></a>09162         <span class="stringliteral">&quot;0F0000000000000099999999999900F0&quot;</span><span class="stringliteral">&quot;0F0000000000000090300333330900F0&quot;</span><span class="stringliteral">&quot;0F0000000990000090000000000900F0&quot;</span><span class="stringliteral">&quot;0F00000099990000900BB000000900F0&quot;</span>
<a name="l09163"></a>09163         <span class="stringliteral">&quot;0F0000039999000090B00090900900F0&quot;</span><span class="stringliteral">&quot;0F0000009999000090B00999990900F0&quot;</span><span class="stringliteral">&quot;0F00000009903799900BB090900900F0&quot;</span><span class="stringliteral">&quot;0F000000009BB70090000010000900F0&quot;</span>
<a name="l09164"></a>09164         <span class="stringliteral">&quot;0F0000000B90000090000000000900F0&quot;</span><span class="stringliteral">&quot;0F000000B0B0000099999999999900F0&quot;</span><span class="stringliteral">&quot;0F00007B30B0000090000000000000F0&quot;</span><span class="stringliteral">&quot;0F00007300B0000090000000000000F0&quot;</span>
<a name="l09165"></a>09165         <span class="stringliteral">&quot;0F00000000B3000090000000000000F0&quot;</span><span class="stringliteral">&quot;0F0000000B0B000090000000000000F0&quot;</span><span class="stringliteral">&quot;0F000000B303B00090000000000000F0&quot;</span><span class="stringliteral">&quot;0F000003B000B00090000000000000F0&quot;</span>
<a name="l09166"></a>09166         <span class="stringliteral">&quot;0F00003B00003B0090000000000000F0&quot;</span><span class="stringliteral">&quot;0F0000300000030090000000000000F0&quot;</span><span class="stringliteral">&quot;0F0000000448888888888844000000F0&quot;</span><span class="stringliteral">&quot;0F00004886E6E6E60E66E6EEEE4400F0&quot;</span>
<a name="l09167"></a>09167         <span class="stringliteral">&quot;0F4488866E0E60E00660E06E66EEE4F0&quot;</span><span class="stringliteral">&quot;0F868806E06E06E666E66E00E06EE6F0&quot;</span><span class="stringliteral">&quot;0F08606E66E0066000E006E66E00E6F0&quot;</span><span class="stringliteral">&quot;0F8666E006600E00006600E006E00EF0&quot;</span>
<a name="l09168"></a>09168         <span class="stringliteral">&quot;0F000E066888888888888888606660F0&quot;</span><span class="stringliteral">&quot;0F66EEE6EE000E00000E00086EEEE6F0&quot;</span><span class="stringliteral">&quot;0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0&quot;</span><span class="stringliteral">&quot;00000000000000000000000000000000&quot;</span>;
<a name="l09169"></a>09169 
<a name="l09170"></a>09170 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> image16 [16*16+1] =
<a name="l09171"></a>09171         <span class="stringliteral">&quot;0000000000000000&quot;</span><span class="stringliteral">&quot;0000000999999990&quot;</span><span class="stringliteral">&quot;0009000900000090&quot;</span><span class="stringliteral">&quot;0099900909973090&quot;</span><span class="stringliteral">&quot;0059700909009390&quot;</span><span class="stringliteral">&quot;0009799909973090&quot;</span><span class="stringliteral">&quot;0099000900000090&quot;</span><span class="stringliteral">&quot;0959330999999990&quot;</span>
<a name="l09172"></a>09172         <span class="stringliteral">&quot;0709500900000000&quot;</span><span class="stringliteral">&quot;0095930900000000&quot;</span><span class="stringliteral">&quot;0090393900000000&quot;</span><span class="stringliteral">&quot;0790073900000000&quot;</span><span class="stringliteral">&quot;0900000900000000&quot;</span><span class="stringliteral">&quot;000EE6E6E6E6E000&quot;</span><span class="stringliteral">&quot;0EE6E6E6E6E6EEE0&quot;</span><span class="stringliteral">&quot;0000000000000000&quot;</span>;
<a name="l09173"></a>09173 
<a name="l09174"></a>09174 $   <span class="keyword">const</span> COLORREF pal[<span class="charliteral">&#39;F&#39;</span>-<span class="charliteral">&#39;0&#39;</span>+1] = { 0x000000, 0x002b2b, 0x555500, 0x005555, 0x808000, 0x008080, 0xaaaa00, 0x00aaaa, 0xd5d500, 0x00d5d5, 0,0,0,0,0,0,0,
<a name="l09175"></a>09175                                       0xffff00, 0x00ffff, 0xffffaa, 0xaaffff, 0xd5d500, 0xffffff };
<a name="l09176"></a>09176 
<a name="l09177"></a>09177 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* image = (size == 32)? image32 : image16;
<a name="l09178"></a>09178 
<a name="l09179"></a>09179 $   POINT sz = { size, size };
<a name="l09180"></a>09180 $   HDC dcMask  = _txBuffer_Create (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), &amp;sz); assert (dcMask);
<a name="l09181"></a>09181 $   HDC dcColor = _txBuffer_Create (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), &amp;sz); assert (dcColor);
<a name="l09182"></a>09182 
<a name="l09183"></a>09183 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size*size; i++)
<a name="l09184"></a>09184         {
<a name="l09185"></a>09185         assert (<a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, image[i], <span class="charliteral">&#39;0&#39;</span>, <span class="charliteral">&#39;9&#39;</span>) ||
<a name="l09186"></a>09186                 <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, image[i], <span class="charliteral">&#39;A&#39;</span>, <span class="charliteral">&#39;F&#39;</span>));
<a name="l09187"></a>09187 
<a name="l09188"></a>09188         Win32::SetPixel (dcColor, i % size, i / size, pal [image[i] - <span class="charliteral">&#39;0&#39;</span>]);
<a name="l09189"></a>09189         }
<a name="l09190"></a>09190 
<a name="l09191"></a>09191 $   ICONINFO info = { <span class="keyword">true</span>, 0, 0, (HBITMAP) Win32::GetCurrentObject (dcMask,  OBJ_BITMAP),
<a name="l09192"></a>09192                                   (HBITMAP) Win32::GetCurrentObject (dcColor, OBJ_BITMAP) };
<a name="l09193"></a>09193 
<a name="l09194"></a>09194 $   HICON icon = CreateIconIndirect (&amp;info);
<a name="l09195"></a>09195 $   assert (icon);
<a name="l09196"></a>09196 
<a name="l09197"></a>09197 $   _txBuffer_Delete (&amp;dcMask)  asserted;
<a name="l09198"></a>09198 $   _txBuffer_Delete (&amp;dcColor) asserted;
<a name="l09199"></a>09199 
<a name="l09200"></a>09200 $   return icon;
<a name="l09201"></a>09201     }
<a name="l09202"></a>09202 
<a name="l09203"></a>09203 <span class="comment">//}</span>
<a name="l09204"></a>09204 <span class="comment">//=================================================================================================================</span>
<a name="l09205"></a>09205 
<a name="l09206"></a>09206 <span class="comment">//=================================================================================================================</span>
<a name="l09207"></a>09207 <span class="comment">//{          Main window event handlers          (_txCanvas_On...)</span>
<a name="l09209"></a>09209 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l09211"></a>09211 <span class="comment"></span>
<a name="l09212"></a>09212 LRESULT CALLBACK _txCanvas_WndProc (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar)
<a name="l09213"></a>09213     {
<a name="l09214"></a>09214 <span class="preprocessor">#if defined (_TX_ALLOW_TRACE)</span>
<a name="l09215"></a>09215 <span class="preprocessor"></span>
<a name="l09216"></a>09216     <span class="keywordtype">int</span> inTX = _txLoc::Cur.inTX++;
<a name="l09217"></a>09217 
<a name="l09218"></a>09218     <span class="keywordflow">if</span> (_txLoc::Cur.trace) _txTrace (__FILE__, __LINE__, <a class="code" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a>, <span class="stringliteral">&quot;%*s&quot;</span> <span class="stringliteral">&quot;0x%X &lt;- 0x%03X (0x%08X, 0x%08lX)&quot;</span>,
<a name="l09219"></a>09219                                      2 * (_txLoc::Cur.inTX - 1), <span class="stringliteral">&quot;&quot;</span>, wnd, msg, wpar, lpar);
<a name="l09220"></a>09220     _txLoc::Cur.inTX = inTX;
<a name="l09221"></a>09221 
<a name="l09222"></a>09222 <span class="preprocessor">#endif</span>
<a name="l09223"></a>09223 <span class="preprocessor"></span>
<a name="l09224"></a>09224 $8  <span class="keywordflow">if</span> (msg == WM_KEYDOWN &amp;&amp; wpar == VK_F12 &amp;&amp;
<a name="l09225"></a>09225         GetKeyState (VK_SHIFT) &amp;&amp; GetKeyState (VK_CONTROL) &amp;&amp; GetKeyState (VK_MENU))
<a name="l09226"></a>09226         {
<a name="l09227"></a>09227 $       _txCanvas_OnCmdABOUT (wnd,      wpar);
<a name="l09228"></a>09228 $       <span class="keywordflow">return</span> DefWindowProc (wnd, msg, wpar, lpar);
<a name="l09229"></a>09229         }
<a name="l09230"></a>09230 
<a name="l09231"></a>09231     WNDPROC altWndProc = _txAltWndProc;  <span class="comment">// Cache to prevent change from main thread</span>
<a name="l09232"></a>09232     <span class="keywordflow">if</span> (altWndProc)
<a name="l09233"></a>09233         {
<a name="l09234"></a>09234 $       LRESULT res = altWndProc (wnd, msg, wpar, lpar);
<a name="l09235"></a>09235 $       <span class="keywordflow">if</span> (res) <span class="keywordflow">return</span> res;
<a name="l09236"></a>09236         }
<a name="l09237"></a>09237 
<a name="l09238"></a>09238     <span class="keyword">static</span> <span class="keywordtype">bool</span> bkErased = <span class="keyword">false</span>;
<a name="l09239"></a>09239 
<a name="l09240"></a>09240     <span class="keywordflow">switch</span> (msg)
<a name="l09241"></a>09241         {
<a name="l09242"></a>09242         <span class="keywordflow">case</span> WM_CREATE:         {$     _txCanvas_OnCREATE     (wnd);                <span class="keywordflow">return</span> 0; }
<a name="l09243"></a>09243 
<a name="l09244"></a>09244         <span class="keywordflow">case</span> WM_CLOSE:          {$ <span class="keywordflow">if</span> (_txCanvas_OnCLOSE      (wnd))  <span class="keywordflow">break</span>;   <span class="keywordflow">else</span> <span class="keywordflow">return</span> 0; }
<a name="l09245"></a>09245         <span class="keywordflow">case</span> WM_DESTROY:        {$     _txCanvas_OnDESTROY    (wnd);                <span class="keywordflow">return</span> 0; }
<a name="l09246"></a>09246 
<a name="l09247"></a>09247         <span class="keywordflow">case</span> WM_ERASEBKGND:     {$ <span class="keywordflow">if</span> (!bkErased) { bkErased = <span class="keyword">true</span>;  <span class="keywordflow">break</span>; } <span class="keywordflow">else</span> <span class="keywordflow">return</span> 1; }
<a name="l09248"></a>09248         <span class="keywordflow">case</span> WM_SIZE:           {$                  bkErased = <span class="keyword">false</span>; <span class="keywordflow">break</span>;                  }
<a name="l09249"></a>09249 
<a name="l09250"></a>09250         <span class="keywordflow">case</span> WM_PAINT:          {$     _txCanvas_OnPAINT      (wnd);                <span class="keywordflow">return</span> 0; }
<a name="l09251"></a>09251 
<a name="l09252"></a>09252         <span class="keywordflow">case</span> WM_TIMER:          {$     _txCanvas_OnTIMER      (wnd, wpar);          <span class="keywordflow">return</span> 0; }
<a name="l09253"></a>09253 
<a name="l09254"></a>09254         <span class="keywordflow">case</span> WM_KEYDOWN:        {$     _txCanvas_OnKEYDOWN    (wnd, wpar, lpar);    <span class="keywordflow">return</span> 0; }
<a name="l09255"></a>09255         <span class="keywordflow">case</span> WM_CHAR:           {$     _txCanvas_OnCHAR       (wnd, wpar, lpar);    <span class="keywordflow">return</span> 0; }
<a name="l09256"></a>09256 
<a name="l09257"></a>09257         <span class="keywordflow">case</span> WM_LBUTTONUP:
<a name="l09258"></a>09258         <span class="keywordflow">case</span> WM_LBUTTONDOWN:
<a name="l09259"></a>09259         <span class="keywordflow">case</span> WM_RBUTTONUP:
<a name="l09260"></a>09260         <span class="keywordflow">case</span> WM_RBUTTONDOWN:
<a name="l09261"></a>09261         <span class="keywordflow">case</span> WM_MBUTTONUP:
<a name="l09262"></a>09262         <span class="keywordflow">case</span> WM_MBUTTONDOWN:
<a name="l09263"></a>09263         <span class="keywordflow">case</span> WM_MOUSEMOVE:      {$     _txCanvas_OnMOUSEMOVE  (wnd, wpar, lpar);    <span class="keywordflow">return</span> 0; }
<a name="l09264"></a>09264 
<a name="l09265"></a>09265         <span class="keywordflow">case</span> WM_MOUSELEAVE:     {$     _txCanvas_OnMOUSELEAVE (wnd);                <span class="keywordflow">return</span> 0; }
<a name="l09266"></a>09266 
<a name="l09267"></a>09267         <span class="keywordflow">case</span> _TX_WM_CREATEWND:  {$     _txCanvas_OnCREATEWND  (wnd, wpar, lpar);    <span class="keywordflow">return</span> 0; }
<a name="l09268"></a>09268         <span class="keywordflow">case</span> _TX_WM_DESTROYWND: {$     _txCanvas_OnDESTROYWND (wnd, wpar, lpar);    <span class="keywordflow">return</span> 0; }
<a name="l09269"></a>09269 
<a name="l09270"></a>09270         <span class="keywordflow">default</span>: <span class="keywordflow">break</span>;
<a name="l09271"></a>09271         }
<a name="l09272"></a>09272 
<a name="l09273"></a>09273     <span class="keywordflow">if</span> (msg == WM_SYSCOMMAND) <span class="keywordflow">switch</span> (wpar)
<a name="l09274"></a>09274         {
<a name="l09275"></a>09275         <span class="keywordflow">case</span> _TX_IDM_ABOUT:     {$       _txCanvas_OnCmdABOUT   (wnd, wpar);        <span class="keywordflow">return</span> 0; }
<a name="l09276"></a>09276         <span class="keywordflow">case</span> _TX_IDM_CONSOLE:   {$       _txCanvas_OnCmdCONSOLE (wnd, wpar);        <span class="keywordflow">return</span> 0; }
<a name="l09277"></a>09277 
<a name="l09278"></a>09278         <span class="keywordflow">default</span>: <span class="keywordflow">break</span>;
<a name="l09279"></a>09279         }
<a name="l09280"></a>09280 
<a name="l09281"></a>09281 $   <span class="keywordflow">return</span> DefWindowProc (wnd, msg, wpar, lpar);
<a name="l09282"></a>09282     }
<a name="l09283"></a>09283 
<a name="l09284"></a>09284 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09285"></a>09285 
<a name="l09286"></a>09286 <span class="keywordtype">bool</span> _txCanvas_OnCREATE (HWND wnd)
<a name="l09287"></a>09287     {
<a name="l09288"></a>09288 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (wnd)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09289"></a>09289 
<a name="l09290"></a>09290 $   _txCanvas_BackBuf[0] = _txBuffer_Create (wnd, NULL, NULL, &amp;_txCanvas_Pixels); assert (_txCanvas_BackBuf[0]);
<a name="l09291"></a>09291 $   _txCanvas_BackBuf[1] = _txBuffer_Create (wnd, NULL, NULL, NULL);              assert (_txCanvas_BackBuf[1]);
<a name="l09292"></a>09292 
<a name="l09293"></a>09293 $   <span class="keywordflow">if</span> (!SetTimer (wnd, _txCanvas_RefreshTimer, <a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>, NULL)) _txCanvas_RefreshTimer = 0;
<a name="l09294"></a>09294 $   assert (_txCanvas_RefreshTimer);
<a name="l09295"></a>09295 
<a name="l09296"></a>09296 $   _txCanvas_UserDCs = new ::std::vector &lt;HDC&gt;;
<a name="l09297"></a>09297 
<a name="l09298"></a>09298 $   _txCanvas_Window = wnd;
<a name="l09299"></a>09299 
<a name="l09300"></a>09300 $   <a class="code" href="a00081.htm#gaa72c4849ac0c9bf6f95893f4265b9843" title="Установка параметров рисования по умолчанию.">txSetDefaults</a>();
<a name="l09301"></a>09301 
<a name="l09302"></a>09302 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09303"></a>09303     }
<a name="l09304"></a>09304 
<a name="l09305"></a>09305 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09306"></a>09306 
<a name="l09307"></a>09307 <span class="keywordtype">bool</span> _txCanvas_OnDESTROY (HWND wnd)
<a name="l09308"></a>09308     {
<a name="l09309"></a>09309 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (wnd)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09310"></a>09310 
<a name="l09311"></a>09311     <span class="comment">// Инициируем остановку цикла сообщений</span>
<a name="l09312"></a>09312 
<a name="l09313"></a>09313 $   PostQuitMessage (_txRunning? WM_DESTROY : EXIT_SUCCESS);
<a name="l09314"></a>09314 
<a name="l09315"></a>09315 $   <span class="keywordflow">if</span> (!_txCanvas_Window) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09316"></a>09316 
<a name="l09317"></a>09317     <span class="comment">// Indicate that we are about to manually terminate</span>
<a name="l09318"></a>09318 
<a name="l09319"></a>09319 $   _txExit = <span class="keyword">true</span>;
<a name="l09320"></a>09320 
<a name="l09321"></a>09321     <span class="comment">// Lock GDI resources</span>
<a name="l09322"></a>09322 
<a name="l09323"></a>09323 $   <span class="keywordtype">bool</span> locked = <span class="keyword">false</span>;
<a name="l09324"></a>09324 $   _txWaitFor ((locked = <a class="code" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keyword">false</span>), locked), <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l09325"></a>09325 $   <span class="keywordflow">if</span> (!locked) <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot lock GDI to free resources&quot;</span>);
<a name="l09326"></a>09326 
<a name="l09327"></a>09327     <span class="comment">// Освобождаем пользовательские ресурсы</span>
<a name="l09328"></a>09328 
<a name="l09329"></a>09329 $   <span class="keywordflow">if</span> (_txCanvas_UserDCs &amp;&amp; !_txCanvas_UserDCs-&gt;empty())
<a name="l09330"></a>09330         {
<a name="l09331"></a>09331 $       <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_ERROR, NULL, <span class="stringliteral">&quot;Вы забыли освободить %d HDC.&quot;</span>, (<span class="keywordtype">int</span>) _txCanvas_UserDCs-&gt;size());
<a name="l09332"></a>09332 $       Sleep (<a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l09333"></a>09333 
<a name="l09334"></a>09334 $       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; _txCanvas_UserDCs-&gt;size(); i++) _txBuffer_Delete (&amp;_txCanvas_UserDCs-&gt;at (i));
<a name="l09335"></a>09335 $       _txCanvas_UserDCs-&gt;clear();
<a name="l09336"></a>09336         }
<a name="l09337"></a>09337 
<a name="l09338"></a>09338 $   <span class="keyword">delete</span> _txCanvas_UserDCs; _txCanvas_UserDCs = NULL;
<a name="l09339"></a>09339 
<a name="l09340"></a>09340     <span class="comment">// Освобождаем ресурсы, связанные с окном</span>
<a name="l09341"></a>09341 
<a name="l09342"></a>09342 $   <span class="keywordflow">if</span> (_txCanvas_RefreshTimer) KillTimer (wnd, _txCanvas_RefreshTimer) asserted;
<a name="l09343"></a>09343 
<a name="l09344"></a>09344 $   if (_txCanvas_BackBuf[1]) _txBuffer_Delete (&amp;_txCanvas_BackBuf[1])  asserted;
<a name="l09345"></a>09345 $   if (_txCanvas_BackBuf[0]) _txBuffer_Delete (&amp;_txCanvas_BackBuf[0])  asserted;
<a name="l09346"></a>09346 $   _txCanvas_Pixels = NULL;
<a name="l09347"></a>09347 
<a name="l09348"></a>09348 $   <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l09349"></a>09349 
<a name="l09350"></a>09350     <span class="comment">// Indicate that we are destroyed</span>
<a name="l09351"></a>09351 
<a name="l09352"></a>09352 $   _txCanvas_Window = NULL;
<a name="l09353"></a>09353 
<a name="l09354"></a>09354 $   return true;
<a name="l09355"></a>09355     }
<a name="l09356"></a>09356 
<a name="l09357"></a>09357 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09358"></a>09358 
<a name="l09359"></a>09359 <span class="keywordtype">bool</span> _txCanvas_OnCLOSE (HWND wnd)
<a name="l09360"></a>09360     {
<a name="l09361"></a>09361 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (wnd)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09362"></a>09362 $   <span class="keywordflow">if</span> (!_txCanvas_OK())           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09363"></a>09363 
<a name="l09364"></a>09364 $   <span class="keywordflow">if</span> (_txMain &amp;&amp; _txRunning &amp;&amp;
<a name="l09365"></a>09365         <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Функция main() не завершена. Программа все еще работает. Прервать аварийно?\n\n&quot;</span>
<a name="l09366"></a>09366                       <span class="stringliteral">&quot;Лучше подождать, когда main() завершится - это отображается в заголовке окна.&quot;</span>,
<a name="l09367"></a>09367                       <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>), MB_YESNOCANCEL | MB_ICONSTOP) != IDYES) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09368"></a>09368 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09369"></a>09369     }
<a name="l09370"></a>09370 
<a name="l09371"></a>09371 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09372"></a>09372 
<a name="l09373"></a>09373 <span class="keywordtype">bool</span> _txCanvas_OnTIMER (HWND wnd, WPARAM)
<a name="l09374"></a>09374     {
<a name="l09375"></a>09375 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (wnd)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09376"></a>09376 
<a name="l09377"></a>09377 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock &gt; 0 || !_txRunning) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09378"></a>09378 
<a name="l09379"></a>09379 $   InvalidateRect (wnd, NULL, <span class="keyword">false</span>) asserted;
<a name="l09380"></a>09380 $   UpdateWindow   (wnd)              asserted;
<a name="l09381"></a>09381 
<a name="l09382"></a>09382 $   return true;
<a name="l09383"></a>09383     }
<a name="l09384"></a>09384 
<a name="l09385"></a>09385 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09386"></a>09386 
<a name="l09387"></a>09387 <span class="keywordtype">bool</span> _txCanvas_OnPAINT (HWND wnd)
<a name="l09388"></a>09388     {
<a name="l09389"></a>09389 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (wnd)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09390"></a>09390 $   <span class="keywordflow">if</span> (!_txCanvas_OK())           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09391"></a>09391 
<a name="l09392"></a>09392 $   <span class="keywordtype">bool</span> forceRedraw = GetAsyncKeyState (VK_MENU)  &amp;&amp; GetAsyncKeyState (VK_CONTROL) &amp;&amp;
<a name="l09393"></a>09393                        GetAsyncKeyState (VK_SHIFT) &amp;&amp; GetAsyncKeyState (VK_SNAPSHOT);
<a name="l09394"></a>09394 
<a name="l09395"></a>09395 $   PAINTSTRUCT ps = {};
<a name="l09396"></a>09396 $   HDC wndDc = BeginPaint (wnd, &amp;ps);
<a name="l09397"></a>09397 $   <span class="keywordflow">if</span> (!wndDc) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09398"></a>09398 
<a name="l09399"></a>09399 $   HDC dc0 = _txCanvas_BackBuf[0],
<a name="l09400"></a>09400         dc1 = _txCanvas_BackBuf[1];
<a name="l09401"></a>09401 
<a name="l09402"></a>09402 $   RECT r = {};
<a name="l09403"></a>09403 $   GetClientRect (wnd, &amp;r) asserted;
<a name="l09404"></a>09404 $   POINT wndSize = { r.right - r.left, r.bottom - r.top };
<a name="l09405"></a>09405 
<a name="l09406"></a>09406 $   POINT dcSize = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (dc1);
<a name="l09407"></a>09407 
<a name="l09408"></a>09408 $   <span class="keywordflow">if</span> ((_txCanvas_RefreshLock &lt;= 0 || forceRedraw) &amp;&amp;
<a name="l09409"></a>09409         <a class="code" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keyword">false</span>))
<a name="l09410"></a>09410         {
<a name="l09411"></a>09411 $       Win32::BitBlt   (dc1, 0, 0, dcSize.x, dcSize.y, dc0, 0, 0, SRCCOPY);
<a name="l09412"></a>09412 
<a name="l09413"></a>09413 $       _txConsole_Draw (dc1);
<a name="l09414"></a>09414 
<a name="l09415"></a>09415 $       <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l09416"></a>09416         }
<a name="l09417"></a>09417 
<a name="l09418"></a>09418     <span class="comment">// Magic 100500 value is used to completely block screen refresh.</span>
<a name="l09419"></a>09419     <span class="comment">// Since no value can be 100500 or above, this condition is always true and the refresh cannot be blocked IRL.</span>
<a name="l09420"></a>09420     <span class="comment">// Do not use 100501 because it may lead to errors on some compilers and possible may crash the compilers</span>
<a name="l09421"></a>09421     <span class="comment">// themselves.</span>
<a name="l09422"></a>09422     <span class="comment">// Yes guys, with all your software installed. :(</span>
<a name="l09423"></a>09423 
<a name="l09424"></a>09424 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock != 100500)
<a name="l09425"></a>09425         {
<a name="l09426"></a>09426         <span class="keywordflow">if</span> (<a class="code" href="a00084.htm#gad85278fd5caaf0ce42e307d6ce8d79c5" title="Указатель на функцию, выводящую изображение непосредственно в окно TXLib во время обработки WM_PAINT...">_txSwapBuffers</a>)
<a name="l09427"></a>09427             {
<a name="l09428"></a>09428 $           <a class="code" href="a00084.htm#gad85278fd5caaf0ce42e307d6ce8d79c5" title="Указатель на функцию, выводящую изображение непосредственно в окно TXLib во время обработки WM_PAINT...">_txSwapBuffers</a>    (wndDc, 0, 0, wndSize.x, wndSize.y, dc1, 0, 0, dcSize.x, dcSize.y, SRCCOPY);
<a name="l09429"></a>09429             }
<a name="l09430"></a>09430         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dcSize.x == wndSize.x &amp;&amp; dcSize.y == wndSize.y)
<a name="l09431"></a>09431             {
<a name="l09432"></a>09432 $           Win32::BitBlt     (wndDc, 0, 0, wndSize.x, wndSize.y, dc1, 0, 0,                     SRCCOPY);
<a name="l09433"></a>09433             }
<a name="l09434"></a>09434         <span class="keywordflow">else</span>
<a name="l09435"></a>09435             {
<a name="l09436"></a>09436 $           Win32::SetStretchBltMode (wndDc, HALFTONE);
<a name="l09437"></a>09437 $           Win32::StretchBlt (wndDc, 0, 0, wndSize.x, wndSize.y, dc1, 0, 0, dcSize.x, dcSize.y, SRCCOPY);
<a name="l09438"></a>09438             }
<a name="l09439"></a>09439         }
<a name="l09440"></a>09440 
<a name="l09441"></a>09441 $   EndPaint (wnd, &amp;ps) asserted;
<a name="l09442"></a>09442 
<a name="l09443"></a>09443 $   return true;
<a name="l09444"></a>09444     }
<a name="l09445"></a>09445 
<a name="l09446"></a>09446 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09447"></a>09447 
<a name="l09448"></a>09448 <span class="keywordtype">bool</span> _txCanvas_OnKEYDOWN (HWND, WPARAM vk, LPARAM info)
<a name="l09449"></a>09449     {
<a name="l09450"></a>09450 $8  INPUT_RECORD evt = {};
<a name="l09451"></a>09451 
<a name="l09452"></a>09452 $   evt.EventType                        = KEY_EVENT;
<a name="l09453"></a>09453 $   evt.Event.KeyEvent.bKeyDown          = <span class="keyword">true</span>;
<a name="l09454"></a>09454 $   evt.Event.KeyEvent.wRepeatCount      = 1;
<a name="l09455"></a>09455 $   evt.Event.KeyEvent.uChar.AsciiChar   = (char)  MapVirtualKey ((WORD) vk, 2);   <span class="comment">// 2 == MAPVK_VK_TO_CHAR</span>
<a name="l09456"></a>09456 $   evt.Event.KeyEvent.wVirtualScanCode  = (WORD)  (info &gt;&gt; 16);
<a name="l09457"></a>09457 $   evt.Event.KeyEvent.wVirtualKeyCode   = (WORD)  vk;
<a name="l09458"></a>09458 $   evt.Event.KeyEvent.dwControlKeyState = (DWORD) (info &amp; (1 &lt;&lt; 24))? ENHANCED_KEY : 0;
<a name="l09459"></a>09459 
<a name="l09460"></a>09460 $   <span class="keywordflow">if</span> (evt.Event.KeyEvent.uChar.AsciiChar) <span class="keywordflow">return</span> <span class="keyword">false</span>;  <span class="comment">// Let TranslateMessage() and WM_CHAR do the job</span>
<a name="l09461"></a>09461 
<a name="l09462"></a>09462 $   DWORD written = 0;
<a name="l09463"></a>09463 $   WriteConsoleInput (GetStdHandle (STD_INPUT_HANDLE), &amp;evt, 1, &amp;written);
<a name="l09464"></a>09464 
<a name="l09465"></a>09465 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09466"></a>09466     }
<a name="l09467"></a>09467 
<a name="l09468"></a>09468 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09469"></a>09469 
<a name="l09470"></a>09470 <span class="keywordtype">bool</span> _txCanvas_OnCHAR (HWND, WPARAM ch, LPARAM info)
<a name="l09471"></a>09471     {
<a name="l09472"></a>09472 $8  INPUT_RECORD evt = {};
<a name="l09473"></a>09473 
<a name="l09474"></a>09474 $   evt.EventType                        = KEY_EVENT;
<a name="l09475"></a>09475 $   evt.Event.KeyEvent.bKeyDown          = <span class="keyword">true</span>;
<a name="l09476"></a>09476 $   evt.Event.KeyEvent.wRepeatCount      = 1;
<a name="l09477"></a>09477 $   evt.Event.KeyEvent.uChar.AsciiChar   = (char) (ch);
<a name="l09478"></a>09478 $   evt.Event.KeyEvent.wVirtualScanCode  = (WORD) (info &gt;&gt; 16);
<a name="l09479"></a>09479 $   evt.Event.KeyEvent.wVirtualKeyCode   = (WORD) MapVirtualKey ((WORD) (info &gt;&gt; 16), 3);  <span class="comment">// 3 == MAPVK_VSC_TO_VK_EX</span>
<a name="l09480"></a>09480 $   evt.Event.KeyEvent.dwControlKeyState = 0;
<a name="l09481"></a>09481 
<a name="l09482"></a>09482 $   DWORD written = 0;
<a name="l09483"></a>09483 $   WriteConsoleInput (GetStdHandle (STD_INPUT_HANDLE), &amp;evt, 1, &amp;written);
<a name="l09484"></a>09484 
<a name="l09485"></a>09485 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09486"></a>09486     }
<a name="l09487"></a>09487 
<a name="l09488"></a>09488 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09489"></a>09489 
<a name="l09490"></a>09490 <span class="keywordtype">bool</span> _txCanvas_OnMOUSEMOVE (HWND wnd, WPARAM buttons, LPARAM coords)
<a name="l09491"></a>09491     {
<a name="l09492"></a>09492 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (wnd)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09493"></a>09493 $   <span class="keywordflow">if</span> (!_txCanvas_OK())           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09494"></a>09494 
<a name="l09495"></a>09495 $   <span class="keywordflow">if</span> (_txMousePos.x == -1 &amp;&amp; _txMousePos.y == -1)
<a name="l09496"></a>09496         {
<a name="l09497"></a>09497 $       TRACKMOUSEEVENT track = { <span class="keyword">sizeof</span> (track), TME_HOVER | TME_LEAVE, wnd, HOVER_DEFAULT };
<a name="l09498"></a>09498 $       TrackMouseEvent (&amp;track);
<a name="l09499"></a>09499         }
<a name="l09500"></a>09500 
<a name="l09501"></a>09501 $   _txMousePos.x   = LOWORD (coords);
<a name="l09502"></a>09502 $   _txMousePos.y   = HIWORD (coords);
<a name="l09503"></a>09503 $   _txMouseButtons = (unsigned) buttons;
<a name="l09504"></a>09504 
<a name="l09505"></a>09505 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09506"></a>09506     }
<a name="l09507"></a>09507 
<a name="l09508"></a>09508 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09509"></a>09509 
<a name="l09510"></a>09510 <span class="keywordtype">bool</span> _txCanvas_OnMOUSELEAVE (HWND)
<a name="l09511"></a>09511     {
<a name="l09512"></a>09512 $8  _txMousePos.x   = -1;
<a name="l09513"></a>09513 $   _txMousePos.y   = -1;
<a name="l09514"></a>09514 $   _txMouseButtons = 0;
<a name="l09515"></a>09515 
<a name="l09516"></a>09516 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09517"></a>09517     }
<a name="l09518"></a>09518 
<a name="l09519"></a>09519 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09520"></a>09520 
<a name="l09521"></a>09521 <span class="keywordtype">bool</span> _txCanvas_OnCREATEWND (HWND, WPARAM, LPARAM lpar)
<a name="l09522"></a>09522     {
<a name="l09523"></a>09523 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (lpar)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09524"></a>09524 
<a name="l09525"></a>09525 $   <span class="keyword">const</span> CREATESTRUCT* create = (CREATESTRUCT*) lpar;
<a name="l09526"></a>09526 
<a name="l09527"></a>09527 $   HWND wnd = CreateWindowEx (create-&gt;dwExStyle, create-&gt;lpszClass, create-&gt;lpszName, create-&gt;style,
<a name="l09528"></a>09528                                create-&gt;x, create-&gt;y, create-&gt;cx, create-&gt;cy,
<a name="l09529"></a>09529                                create-&gt;hwndParent, create-&gt;hMenu, NULL, create-&gt;lpCreateParams);
<a name="l09530"></a>09530 
<a name="l09531"></a>09531 $   *(HWND*) create-&gt;hInstance = wnd;
<a name="l09532"></a>09532 
<a name="l09533"></a>09533 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09534"></a>09534     }
<a name="l09535"></a>09535 
<a name="l09536"></a>09536 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09537"></a>09537 
<a name="l09538"></a>09538 <span class="keywordtype">bool</span> _txCanvas_OnDESTROYWND (HWND, WPARAM, LPARAM lpar)
<a name="l09539"></a>09539     {
<a name="l09540"></a>09540 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (lpar)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09541"></a>09541 
<a name="l09542"></a>09542 $   DestroyWindow ((HWND) lpar);
<a name="l09543"></a>09543 
<a name="l09544"></a>09544 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09545"></a>09545     }
<a name="l09546"></a>09546 
<a name="l09547"></a>09547 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09548"></a>09548 
<a name="l09549"></a>09549 <span class="keywordtype">bool</span> _txCanvas_OnCmdCONSOLE (HWND wnd, WPARAM cmd)
<a name="l09550"></a>09550     {
<a name="l09551"></a>09551 $8  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (wnd)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09552"></a>09552 
<a name="l09553"></a>09553 $   HWND console = Win32::GetConsoleWindow();
<a name="l09554"></a>09554 $   <span class="keywordflow">if</span> (!console) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09555"></a>09555 
<a name="l09556"></a>09556 $   <span class="keywordtype">bool</span> visible = !!IsWindowVisible (console);
<a name="l09557"></a>09557 
<a name="l09558"></a>09558 $   ShowWindow (console, visible? SW_HIDE : SW_SHOW);
<a name="l09559"></a>09559 
<a name="l09560"></a>09560 $   visible = !!IsWindowVisible (console);
<a name="l09561"></a>09561 $   CheckMenuItem (GetSystemMenu (wnd, <span class="keyword">false</span>), (<span class="keywordtype">int</span>) cmd, visible? MF_CHECKED : MF_UNCHECKED);
<a name="l09562"></a>09562 
<a name="l09563"></a>09563 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09564"></a>09564     }
<a name="l09565"></a>09565 
<a name="l09566"></a>09566 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09567"></a>09567 
<a name="l09568"></a>09568 <span class="keywordtype">bool</span> _txCanvas_OnCmdABOUT (HWND, WPARAM)
<a name="l09569"></a>09569     {
<a name="l09570"></a>09570 $8  <span class="comment">//{ Overriding the missing names, if the set is uncomplete</span>
<a name="l09571"></a>09571 
<a name="l09572"></a>09572 <span class="preprocessor">    #if defined (__MODULE)</span>
<a name="l09573"></a>09573 <span class="preprocessor"></span><span class="preprocessor">        #define ABOUT_NAME_    __MODULE</span>
<a name="l09574"></a>09574 <span class="preprocessor"></span><span class="preprocessor">    #else</span>
<a name="l09575"></a>09575 <span class="preprocessor"></span><span class="preprocessor">        #define ABOUT_NAME_    &quot;TXLib&quot;</span>
<a name="l09576"></a>09576 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l09577"></a>09577 <span class="preprocessor"></span>
<a name="l09578"></a>09578 <span class="preprocessor">    #if defined (__MODULE) || defined (__VERSION) || defined (__DESCRIPTION) || defined (__AUTHOR)</span>
<a name="l09579"></a>09579 <span class="preprocessor"></span>
<a name="l09580"></a>09580 <span class="preprocessor">        #ifndef __MODULE</span>
<a name="l09581"></a>09581 <span class="preprocessor"></span><span class="preprocessor">        #define __MODULE       &quot;TXLib&quot;                           &quot;\n&quot;  &quot;#define __MODULE to set the name.\n&quot;</span>
<a name="l09582"></a>09582 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l09583"></a>09583 <span class="preprocessor"></span>
<a name="l09584"></a>09584 <span class="preprocessor">        #ifndef __VERSION</span>
<a name="l09585"></a>09585 <span class="preprocessor"></span><span class="preprocessor">        #define __VERSION      &quot;(0.000000000).&quot;                  &quot;\n&quot; &quot;#define __VERSION to set the string value.\n&quot;</span>
<a name="l09586"></a>09586 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l09587"></a>09587 <span class="preprocessor"></span>
<a name="l09588"></a>09588 <span class="preprocessor">        #ifndef __DESCRIPTION</span>
<a name="l09589"></a>09589 <span class="preprocessor"></span><span class="preprocessor">        #define __DESCRIPTION  &quot;(Да, мне лень задать описание).&quot; &quot;\n&quot; &quot;#define __DESCRIPTION to override project role.\n&quot;</span>
<a name="l09590"></a>09590 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l09591"></a>09591 <span class="preprocessor"></span>
<a name="l09592"></a>09592 <span class="preprocessor">        #ifndef __AUTHOR</span>
<a name="l09593"></a>09593 <span class="preprocessor"></span><span class="preprocessor">        #define __AUTHOR       &quot;(Непонятно кто).&quot;                &quot;\n&quot; &quot;#define __AUTHOR to override this name.&quot;</span>
<a name="l09594"></a>09594 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l09595"></a>09595 <span class="preprocessor"></span>
<a name="l09596"></a>09596 <span class="preprocessor">    #endif</span>
<a name="l09597"></a>09597 <span class="preprocessor"></span>    <span class="comment">//}</span>
<a name="l09598"></a>09598 
<a name="l09599"></a>09599 $   <span class="keyword">static</span> <span class="keywordtype">char</span> text[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l09600"></a>09600 
<a name="l09601"></a>09601 $   _tx_snprintf_s (text, <span class="keyword">sizeof</span> (text) - 1,
<a name="l09602"></a>09602 
<a name="l09603"></a>09603                     <span class="stringliteral">&quot;Application:\n\n&quot;</span>
<a name="l09604"></a>09604 
<a name="l09605"></a>09605                     #<span class="keywordflow">if</span> defined (__MODULE) || defined (__VERSION) || defined (__DESCRIPTION) || defined (__AUTHOR)
<a name="l09606"></a>09606                         __MODULE <span class="stringliteral">&quot; version &quot;</span> __VERSION <span class="stringliteral">&quot;\n&quot;</span> __DESCRIPTION <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Copyright (c) &quot;</span> __AUTHOR <span class="stringliteral">&quot;\n&quot;</span>
<a name="l09607"></a>09607                     #<span class="keywordflow">else</span>
<a name="l09608"></a>09608                         <span class="stringliteral">&quot;Здесь могла бы быть Ваша реклама :)\n&quot;</span>
<a name="l09609"></a>09609                         <span class="stringliteral">&quot;#define __MODULE to \&quot;your program name\&quot; before including TXLib.h to use this billboard...\n&quot;</span>
<a name="l09610"></a>09610                     #endif
<a name="l09611"></a>09611 
<a name="l09612"></a>09612                     <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>, _txAppInfo());
<a name="l09613"></a>09613 
<a name="l09614"></a>09614 $   <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (text, <span class="stringliteral">&quot;About &quot;</span> ABOUT_NAME_, MB_ICONINFORMATION);
<a name="l09615"></a>09615 
<a name="l09616"></a>09616     <span class="comment">// And a bit of HTTP-code in C++ function:</span>
<a name="l09617"></a>09617 
<a name="l09618"></a>09618     <span class="keywordflow">goto</span> http;
<a name="l09619"></a>09619     http:<span class="comment">//sizeof.livejournal.com</span>
<a name="l09620"></a>09620 
<a name="l09621"></a>09621 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l09622"></a>09622 
<a name="l09623"></a>09623 <span class="preprocessor">    #undef ABOUT_NAME_</span>
<a name="l09624"></a>09624 <span class="preprocessor"></span>    }
<a name="l09625"></a>09625 
<a name="l09627"></a>09627 <span class="comment">//}</span>
<a name="l09628"></a>09628 <span class="comment">//=================================================================================================================</span>
<a name="l09629"></a>09629 
<a name="l09630"></a>09630 <span class="comment">//=================================================================================================================</span>
<a name="l09631"></a>09631 <span class="comment">//{          Console-support functions           (_txConsole...)</span>
<a name="l09633"></a>09633 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l09635"></a>09635 <span class="comment"></span>
<a name="l09636"></a>09636 HWND _txConsole_Attach()
<a name="l09637"></a>09637     {
<a name="l09638"></a>09638 $1  HWND console = Win32::GetConsoleWindow();
<a name="l09639"></a>09639 
<a name="l09640"></a>09640 $   <span class="keywordflow">if</span> (!console)
<a name="l09641"></a>09641         {
<a name="l09642"></a>09642 $       FreeConsole();
<a name="l09643"></a>09643 $       AllocConsole();
<a name="l09644"></a>09644         }
<a name="l09645"></a>09645 
<a name="l09646"></a>09646 $   console = Win32::GetConsoleWindow();
<a name="l09647"></a>09647 $   <span class="keywordflow">if</span> (!console) <span class="keywordflow">return</span> NULL;
<a name="l09648"></a>09648 
<a name="l09649"></a>09649 $   <a class="code" href="a00080.htm#ga6122d52806d23ff6bd480a0f07b75f2b" title="Смена кодовой страницы консоли и локали стандартной библиотеки С++.">txSetLocale</a>();                                <span class="comment">// Устанавливаем русскую кодовую страницу для консоли Windows</span>
<a name="l09650"></a>09650 
<a name="l09651"></a>09651 $   <span class="keyword">static</span> <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l09652"></a>09652 $   <span class="keywordflow">if</span> (done) <span class="keywordflow">return</span> console;
<a name="l09653"></a>09653 
<a name="l09654"></a>09654 $   _txConsole_SetUnicodeFont();                  <span class="comment">// Впечатлительным лучше сюда не смотреть.</span>
<a name="l09655"></a>09655 
<a name="l09656"></a>09656 $   <span class="keywordflow">if</span> (!_txIsConsoleSubsystem())
<a name="l09657"></a>09657         {$ txReopenStdio(); }                     <span class="comment">// Переоткрываем потоки ввода-вывода, если subsystem != console</span>
<a name="l09658"></a>09658 
<a name="l09659"></a>09659     <span class="comment">// That&#39;s all, folks</span>
<a name="l09660"></a>09660 
<a name="l09661"></a>09661 $   done = <span class="keyword">true</span>;
<a name="l09662"></a>09662 $   <span class="keywordflow">return</span> console;
<a name="l09663"></a>09663     }
<a name="l09664"></a>09664 
<a name="l09665"></a>09665 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09666"></a>09666 
<a name="l09667"></a>09667 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga6122d52806d23ff6bd480a0f07b75f2b" title="Смена кодовой страницы консоли и локали стандартной библиотеки С++.">txSetLocale</a> (<span class="keywordtype">int</span> codepage <span class="comment">/*= _TX_CODEPAGE*/</span>,
<a name="l09668"></a>09668                  <span class="keyword">const</span> <span class="keywordtype">char</span> locale[] <span class="comment">/*= _TX_LOCALE*/</span>, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> wLocale[] <span class="comment">/*= _TX_WLOCALE*/</span>)
<a name="l09669"></a>09669     {
<a name="l09670"></a>09670 $1  <span class="keywordtype">int</span> oldPage = GetConsoleOutputCP();
<a name="l09671"></a>09671 
<a name="l09672"></a>09672     <span class="comment">// Устанавливаем нужную кодовую страницу для консоли Windows</span>
<a name="l09673"></a>09673 
<a name="l09674"></a>09674 $   <span class="keywordflow">if</span> (codepage)
<a name="l09675"></a>09675         {
<a name="l09676"></a>09676 $       SetConsoleCP       (codepage);
<a name="l09677"></a>09677 $       SetConsoleOutputCP (codepage);
<a name="l09678"></a>09678         }
<a name="l09679"></a>09679 
<a name="l09680"></a>09680     <span class="comment">// Устанавливаем нужную кодовую страницу для стандартной библиотеки, иначе не будут работать Unicode-версии</span>
<a name="l09681"></a>09681     <span class="comment">// функций (wprintf, ...). Если компилите с помощью gcc и собираетесь использовать L&quot;unicode-строки&quot; с определенным</span>
<a name="l09682"></a>09682     <span class="comment">// языком, укажите опции в командной строке компилятора g++: -finput-charset=NNNN -fexec-charset=NNNN, где NNNN -</span>
<a name="l09683"></a>09683     <span class="comment">// обозначение кодовой страницы (например, для русского языка - CP1251).</span>
<a name="l09684"></a>09684 
<a name="l09685"></a>09685 $   <span class="keywordflow">if</span> (locale)
<a name="l09686"></a>09686         {
<a name="l09687"></a>09687 $       setlocale (LC_ALL,     locale);
<a name="l09688"></a>09688 $       setlocale (LC_NUMERIC, <span class="stringliteral">&quot;C&quot;</span>);              <span class="comment">// Return to decimal point (3.14) instead of comma (3,14) in floating numbers</span>
<a name="l09689"></a>09689         }
<a name="l09690"></a>09690 
<a name="l09691"></a>09691 <span class="preprocessor">    #ifndef __CYGWIN__</span>
<a name="l09692"></a>09692 <span class="preprocessor"></span>
<a name="l09693"></a>09693 $   <span class="keyword">const</span> <span class="keywordtype">bool</span> wine = !!Win32::wine_get_version;  <span class="comment">// Linux::Wine v1.2.2+ compatibility.</span>
<a name="l09694"></a>09694 
<a name="l09695"></a>09695 $   <span class="keywordflow">if</span> (wLocale &amp;&amp; !wine)
<a name="l09696"></a>09696         {
<a name="l09697"></a>09697 $       _wsetlocale (LC_ALL,     wLocale);
<a name="l09698"></a>09698 $       _wsetlocale (LC_NUMERIC, L<span class="stringliteral">&quot;C&quot;</span>);           <span class="comment">// L&quot;C&quot; (see above)</span>
<a name="l09699"></a>09699         }
<a name="l09700"></a>09700 
<a name="l09701"></a>09701 <span class="preprocessor">    #endif</span>
<a name="l09702"></a>09702 <span class="preprocessor"></span>
<a name="l09703"></a>09703     (void) wLocale;
<a name="l09704"></a>09704 
<a name="l09705"></a>09705 $   <span class="keywordflow">return</span> oldPage;
<a name="l09706"></a>09706     }
<a name="l09707"></a>09707 
<a name="l09708"></a>09708 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09709"></a>09709 
<a name="l09710"></a>09710 <span class="keywordtype">void</span> txReopenStdio()
<a name="l09711"></a>09711     {
<a name="l09712"></a>09712 $1  <span class="comment">// Переоткрываем заново &lt;s&gt;Америку&lt;/s&gt; потоки ввода-вывода</span>
<a name="l09713"></a>09713 
<a name="l09714"></a>09714 <span class="preprocessor">    #ifndef __CYGWIN__</span>
<a name="l09715"></a>09715 <span class="preprocessor"></span>
<a name="l09716"></a>09716 $   *stdin  =                  *_fdopen (_open_osfhandle ((intptr_t) GetStdHandle (STD_INPUT_HANDLE),  _O_TEXT), <span class="stringliteral">&quot;r&quot;</span>);
<a name="l09717"></a>09717 $   fflush (stdout); *stdout = *_fdopen (_open_osfhandle ((intptr_t) GetStdHandle (STD_OUTPUT_HANDLE), _O_TEXT), <span class="stringliteral">&quot;w&quot;</span>);
<a name="l09718"></a>09718 $   fflush (stderr); *stderr = *_fdopen (_open_osfhandle ((intptr_t) GetStdHandle (STD_ERROR_HANDLE),  _O_TEXT), <span class="stringliteral">&quot;w&quot;</span>);
<a name="l09719"></a>09719 
<a name="l09720"></a>09720 <span class="preprocessor">    #else</span>
<a name="l09721"></a>09721 <span class="preprocessor"></span>$                    *stdin  = *_fdopen (STDIN_FILENO,  <span class="stringliteral">&quot;r&quot;</span>);
<a name="l09722"></a>09722 $   fflush (stdout); *stdout = *_fdopen (STDOUT_FILENO, <span class="stringliteral">&quot;w&quot;</span>);
<a name="l09723"></a>09723 $   fflush (stderr); *stderr = *_fdopen (STDERR_FILENO, <span class="stringliteral">&quot;w&quot;</span>);
<a name="l09724"></a>09724 
<a name="l09725"></a>09725 <span class="preprocessor">    #endif</span>
<a name="l09726"></a>09726 <span class="preprocessor"></span>
<a name="l09727"></a>09727 $   setvbuf (stdin,  NULL, _IONBF, 0);
<a name="l09728"></a>09728 $   setvbuf (stdout, NULL, _IONBF, 0);
<a name="l09729"></a>09729 $   setvbuf (stderr, NULL, _IONBF, 0);
<a name="l09730"></a>09730 
<a name="l09731"></a>09731 $   ::std::ios::sync_with_stdio();
<a name="l09732"></a>09732     }
<a name="l09733"></a>09733 
<a name="l09734"></a>09734 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09735"></a>09735 
<a name="l09736"></a>09736 <span class="keyword">inline</span> <span class="keywordtype">bool</span> _txConsole_OK()
<a name="l09737"></a>09737     {
<a name="l09738"></a>09738     <span class="keywordflow">return</span> Win32::GetConsoleWindow() != NULL;
<a name="l09739"></a>09739     }
<a name="l09740"></a>09740 
<a name="l09741"></a>09741 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09742"></a>09742 
<a name="l09743"></a>09743 <span class="keywordtype">bool</span> _txConsole_Detach (<span class="keywordtype">bool</span> activate)
<a name="l09744"></a>09744     {
<a name="l09745"></a>09745 $1  HWND console = Win32::GetConsoleWindow();
<a name="l09746"></a>09746 $   <span class="keywordflow">if</span> (!console) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09747"></a>09747 
<a name="l09748"></a>09748 $   EnableWindow (console, <span class="keyword">true</span>);
<a name="l09749"></a>09749 $   ShowWindow   (console, SW_SHOW);
<a name="l09750"></a>09750 
<a name="l09751"></a>09751 $   <span class="keywordflow">if</span> (activate)
<a name="l09752"></a>09752         {
<a name="l09753"></a>09753 $       SetForegroundWindow (console);
<a name="l09754"></a>09754 $       BringWindowToTop    (console);
<a name="l09755"></a>09755         }
<a name="l09756"></a>09756 
<a name="l09757"></a>09757 $   <span class="keywordflow">return</span> !!FreeConsole();
<a name="l09758"></a>09758     }
<a name="l09759"></a>09759 
<a name="l09760"></a>09760 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09761"></a>09761 
<a name="l09762"></a>09762 <span class="keywordtype">bool</span> _txConsole_Draw (HDC dc)
<a name="l09763"></a>09763     {
<a name="l09764"></a>09764 $8  <span class="keywordflow">if</span> (_TX_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09765"></a>09765 
<a name="l09766"></a>09766 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l09767"></a>09767 
<a name="l09768"></a>09768 $   CONSOLE_SCREEN_BUFFER_INFO con = {};
<a name="l09769"></a>09769 $   BOOL ok = GetConsoleScreenBufferInfo (out, &amp;con);
<a name="l09770"></a>09770 $   <span class="keywordflow">if</span> (!ok) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09771"></a>09771 
<a name="l09772"></a>09772 $   POINT size = { con.srWindow.Right  - con.srWindow.Left + 1,
<a name="l09773"></a>09773                    con.srWindow.Bottom - con.srWindow.Top  + 1 };
<a name="l09774"></a>09774 
<a name="l09775"></a>09775 $   SIZE fontSz = { 12, 16 };
<a name="l09776"></a>09776 $   Win32::GetTextExtentPoint32 (dc, <span class="stringliteral">&quot;W&quot;</span>, 1, &amp;fontSz) asserted;
<a name="l09777"></a>09777 
<a name="l09778"></a>09778 $   COLORREF pal [16] = { 0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xC0C0C0,
<a name="l09779"></a>09779                           0x808080, 0xFF0000, 0x00FF00, 0xFFFF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFFFF };
<a name="l09780"></a>09780 
<a name="l09781"></a>09781 $   <span class="keywordflow">for</span> (<span class="keywordtype">short</span> y = 0; y &lt; size.y; y++)
<a name="l09782"></a>09782         {
<a name="l09783"></a>09783         <span class="keyword">static</span> <span class="keywordtype">char</span> chr [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> + 1] = <span class="stringliteral">&quot;&quot;</span>;  <span class="comment">// [con.dwSize.X + 1]; maybe will be truncated</span>
<a name="l09784"></a>09784         <span class="keyword">static</span> WORD atr [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> + 1] = {}; <span class="comment">// [con.dwSize.X + 1]; maybe will be truncated</span>
<a name="l09785"></a>09785         COORD coord = { (short) (con.srWindow.Left), (short) (y + con.srWindow.Top) };
<a name="l09786"></a>09786         DWORD read  = 0;
<a name="l09787"></a>09787 
<a name="l09788"></a>09788         <span class="keywordflow">if</span> (!ReadConsoleOutputCharacter (out, chr, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (chr) - 1, coord, &amp;read)) <span class="keywordflow">continue</span>;
<a name="l09789"></a>09789         <span class="keywordflow">if</span> (!ReadConsoleOutputAttribute (out, atr, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (atr) - 1, coord, &amp;read)) <span class="keywordflow">continue</span>;
<a name="l09790"></a>09790 
<a name="l09791"></a>09791         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0, xEnd = size.x; x &lt; size.x; x = xEnd)
<a name="l09792"></a>09792             {
<a name="l09793"></a>09793             Win32::SetTextColor (dc, pal [ atr[x]       &amp; 0x0F]);
<a name="l09794"></a>09794             Win32::SetBkColor   (dc, pal [(atr[x] &gt;&gt; 4) &amp; 0x0F]);
<a name="l09795"></a>09795             Win32::SetBkMode    (dc,      (atr[x]       &amp; 0xF0)? OPAQUE : TRANSPARENT);
<a name="l09796"></a>09796 
<a name="l09797"></a>09797             <span class="keywordflow">for</span> (xEnd = x+1; xEnd &lt; size.x &amp;&amp; atr[xEnd] == atr[x]; xEnd++) {;}
<a name="l09798"></a>09798 
<a name="l09799"></a>09799             Win32::TextOut (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cx * (x + con.srWindow.Left)),
<a name="l09800"></a>09800                                 <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cy *  y), chr + x, xEnd - x) asserted;
<a name="l09801"></a>09801             }
<a name="l09802"></a>09802         }
<a name="l09803"></a>09803 
<a name="l09804"></a>09804 $   Win32::SetTextColor (dc, pal [ con.wAttributes       &amp; 0x0F]);
<a name="l09805"></a>09805 $   Win32::SetBkColor   (dc, pal [(con.wAttributes &gt;&gt; 4) &amp; 0x0F]);
<a name="l09806"></a>09806 $   Win32::SetBkMode    (dc, TRANSPARENT);
<a name="l09807"></a>09807 
<a name="l09808"></a>09808 $   if (_txConsole_IsBlinking &amp;&amp;
<a name="l09809"></a>09809         <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (con.dwCursorPosition, con.srWindow) &amp;&amp;
<a name="l09810"></a>09810         GetTickCount() % <a class="code" href="a00084.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3" title="Интервал мигания курсора консоли (мс)">_txCursorBlinkInterval</a>*2 &gt; <a class="code" href="a00084.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3" title="Интервал мигания курсора консоли (мс)">_txCursorBlinkInterval</a> &amp;&amp;
<a name="l09811"></a>09811         GetForegroundWindow() == txWindow())
<a name="l09812"></a>09812         {
<a name="l09813"></a>09813 $       Win32::TextOut (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cx * (con.dwCursorPosition.X - con.srWindow.Left)),
<a name="l09814"></a>09814                             <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cy * (con.dwCursorPosition.Y - con.srWindow.Top)) + 1,
<a name="l09815"></a>09815                             <span class="stringliteral">&quot;_&quot;</span>, 1) asserted;
<a name="l09816"></a>09816         }
<a name="l09817"></a>09817 
<a name="l09818"></a>09818 $   return true;
<a name="l09819"></a>09819     }
<a name="l09820"></a>09820 
<a name="l09821"></a>09821 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09822"></a>09822 <span class="comment">//{          Welcome to the Duck Side! Together we will rule the Bathroom!</span>
<a name="l09823"></a>09823 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09824"></a>09824 
<a name="l09825"></a>09825 <span class="keywordtype">bool</span> _txConsole_SetUnicodeFont()
<a name="l09826"></a>09826     {
<a name="l09827"></a>09827 $   <span class="keyword">const</span> <span class="keywordtype">bool</span> wine = !!Win32::wine_get_version;  <span class="comment">// Linux::Wine v1.2.2+ compatibility.</span>
<a name="l09828"></a>09828                                                   <span class="comment">// Beer compatibility may be added in future versions...</span>
<a name="l09829"></a>09829 $   <span class="keywordflow">if</span> (wine)                                     <span class="comment">// Минздрав РФ предупреждает: чрезмерное употребление wine</span>
<a name="l09830"></a>09830         {                                         <span class="comment">// вредит Вашему здоровью.</span>
<a name="l09831"></a>09831 $       Win32::GetNumberOfConsoleFonts = NULL;
<a name="l09832"></a>09832 $       Win32::GetCurrentConsoleFont   = NULL;
<a name="l09833"></a>09833 $       Win32::SetConsoleFont          = NULL;
<a name="l09834"></a>09834 
<a name="l09835"></a>09835 $       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09836"></a>09836         }
<a name="l09837"></a>09837 
<a name="l09838"></a>09838     <span class="comment">// Начиная с Висты все хорошо...</span>
<a name="l09839"></a>09839 
<a name="l09840"></a>09840 $1  <span class="keywordflow">if</span> (Win32::GetCurrentConsoleFontEx &amp;&amp; Win32::SetCurrentConsoleFontEx)
<a name="l09841"></a>09841         {
<a name="l09842"></a>09842 $       HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l09843"></a>09843 
<a name="l09844"></a>09844 $       Win32::CONSOLE_FONT_INFOEX info = { <span class="keyword">sizeof</span> (info) };
<a name="l09845"></a>09845 $       <span class="keywordflow">if</span> (!Win32::GetCurrentConsoleFontEx (out, <span class="keyword">false</span>, &amp;info)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09846"></a>09846 
<a name="l09847"></a>09847 $       info.FontFamily = 0x36;                                                    <span class="comment">// Unicode fixed-pitch</span>
<a name="l09848"></a>09848 $       <span class="keywordflow">if</span> (!*info.FaceName) info.dwFontSize.Y = (SHORT) (info.dwFontSize.Y + 2);  <span class="comment">// Terminal font is too small</span>
<a name="l09849"></a>09849 
<a name="l09850"></a>09850 $       <span class="keywordflow">if</span> (wcsncmp (info.FaceName, L<span class="stringliteral">&quot;Consolas&quot;</span>, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (info.FaceName)) != 0)    <span class="comment">// Consolas is allowed too</span>
<a name="l09851"></a>09851             {$ wcsncpy_s (info.FaceName, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (info.FaceName), L<span class="stringliteral">&quot;Lucida Console&quot;</span>, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (info.FaceName)); }
<a name="l09852"></a>09852 
<a name="l09853"></a>09853 $       <span class="keywordflow">return</span> !!Win32::SetCurrentConsoleFontEx (out, <span class="keyword">false</span>, &amp;info);
<a name="l09854"></a>09854         }
<a name="l09855"></a>09855 
<a name="l09856"></a>09856     <span class="comment">// ...а до этого все не так сладко</span>
<a name="l09857"></a>09857 
<a name="l09858"></a>09858 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> uniFont = 10;                  <span class="comment">// The Internet and W2K sources know this magic number</span>
<a name="l09859"></a>09859 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> uniSize = 20;                  <span class="comment">// Size of the font desired, should be &gt; max # of Raster Fonts</span>
<a name="l09860"></a>09860 $   <span class="keywordtype">bool</span> ok = <span class="keyword">true</span>;
<a name="l09861"></a>09861 
<a name="l09862"></a>09862     <span class="comment">// Force Windows to use Unicode font by creating and run the console shortcut tuned to use that font.</span>
<a name="l09863"></a>09863 
<a name="l09864"></a>09864 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l09865"></a>09865 
<a name="l09866"></a>09866 $   <span class="keywordtype">unsigned</span> fonts = _TX_CALL (Win32::GetNumberOfConsoleFonts, ());
<a name="l09867"></a>09867 $   <span class="keywordflow">if</span> (fonts &amp;&amp; fonts &lt;= uniFont)
<a name="l09868"></a>09868         {
<a name="l09869"></a>09869 $       HRESULT init = Win32::CoInitialize (NULL);
<a name="l09870"></a>09870 $       <span class="keywordtype">size_t</span> sz = 0;
<a name="l09871"></a>09871 
<a name="l09872"></a>09872 $       <span class="keywordtype">char</span> link [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l09873"></a>09873 $       getenv_s (&amp;sz, link, <span class="keyword">sizeof</span> (link) - 1, <span class="stringliteral">&quot;TEMP&quot;</span>);
<a name="l09874"></a>09874 $       strncat_s (link, <span class="keyword">sizeof</span> (link), <span class="stringliteral">&quot;\\~txLink.lnk&quot;</span>, <span class="keyword">sizeof</span> (link) - 1);
<a name="l09875"></a>09875 
<a name="l09876"></a>09876 $       <span class="keywordtype">char</span> comspec [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l09877"></a>09877 $       getenv_s (&amp;sz, comspec, <span class="keyword">sizeof</span> (comspec), <span class="stringliteral">&quot;COMSPEC&quot;</span>);
<a name="l09878"></a>09878 
<a name="l09879"></a>09879 $       (void) _unlink (link);
<a name="l09880"></a>09880 
<a name="l09881"></a>09881 $       _txCreateShortcut (link, comspec, <span class="stringliteral">&quot;/c exit&quot;</span>, NULL, NULL, SW_SHOWMINNOACTIVE, NULL, 0, uniSize) asserted;
<a name="l09882"></a>09882 
<a name="l09883"></a>09883 $       ok = (Win32::ShellExecuteA (NULL, NULL, link, NULL, NULL, SW_SHOWMINNOACTIVE) &gt; (<span class="keywordtype">void</span>*)32);  <span class="comment">// Sic!</span>
<a name="l09884"></a>09884         if (ok) {$ _txWaitFor (FindWindow (NULL, <span class="stringliteral">&quot;~txLink&quot;</span>), <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>); }
<a name="l09885"></a>09885 
<a name="l09886"></a>09886 $       (void) _unlink (link);
<a name="l09887"></a>09887 
<a name="l09888"></a>09888 $       <span class="keywordflow">if</span> (init == S_OK) Win32::CoUninitialize();
<a name="l09889"></a>09889         }
<a name="l09890"></a>09890 
<a name="l09891"></a>09891     <span class="comment">// If Unicode font is not already set, do set it.</span>
<a name="l09892"></a>09892 
<a name="l09893"></a>09893 $   Win32::CONSOLE_FONT_INFO cur = {};
<a name="l09894"></a>09894 $   _TX_CALL (Win32::GetCurrentConsoleFont, (out, <span class="keyword">false</span>, &amp;cur));
<a name="l09895"></a>09895 
<a name="l09896"></a>09896 $   ok &amp;= (cur.nFont &gt;= uniFont);
<a name="l09897"></a>09897     <span class="keywordflow">if</span> (!ok) {$ ok &amp;= _TX_CALL (Win32::SetConsoleFont, (out, uniFont)); }
<a name="l09898"></a>09898 
<a name="l09899"></a>09899 $   HWND console = Win32::GetConsoleWindow();
<a name="l09900"></a>09900 $   InvalidateRect (console, NULL, <span class="keyword">false</span>);
<a name="l09901"></a>09901 $   UpdateWindow   (console);
<a name="l09902"></a>09902 
<a name="l09903"></a>09903 $   <span class="keywordflow">return</span> ok;
<a name="l09904"></a>09904     }
<a name="l09905"></a>09905 
<a name="l09906"></a>09906 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09907"></a>09907 <span class="comment">//{          The assistants to the nightmare. You can use it freely to make your own nightmare sweet.</span>
<a name="l09908"></a>09908 
<a name="l09909"></a>09909 <span class="preprocessor">#define      _TX_TRY                { goto __tx_try; } __tx_try: { int __tx_error = S_OK; (void)__tx_error;</span>
<a name="l09910"></a>09910 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_CHECKED( cmd )     { if (FAILED (__tx_error = (cmd))) goto __tx_catch; }</span>
<a name="l09911"></a>09911 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_FAIL               { __tx_error = E_FAIL; goto __tx_catch; }</span>
<a name="l09912"></a>09912 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_RETRY              { __tx_error = S_OK;   goto __tx_try;   }</span>
<a name="l09913"></a>09913 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_OK                 ( SUCCEEDED (__tx_error) )</span>
<a name="l09914"></a>09914 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_CATCH              goto __tx_finally; __tx_catch:</span>
<a name="l09915"></a>09915 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_RETURN             goto __tx_finally;</span>
<a name="l09916"></a>09916 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_FINALLY            __tx_finally:</span>
<a name="l09917"></a>09917 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_ENDTRY             }</span>
<a name="l09918"></a>09918 <span class="preprocessor"></span>
<a name="l09919"></a>09919 <span class="comment">//}</span>
<a name="l09920"></a>09920 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09921"></a>09921 
<a name="l09922"></a>09922 <span class="comment">// Мало не покажется</span>
<a name="l09923"></a>09923 
<a name="l09924"></a>09924 <span class="keywordtype">bool</span> _txCreateShortcut (<span class="keyword">const</span> <span class="keywordtype">char</span> shortcutName[],
<a name="l09925"></a>09925                         <span class="keyword">const</span> <span class="keywordtype">char</span> fileToLink[], <span class="keyword">const</span> <span class="keywordtype">char</span> args[] <span class="comment">/*= NULL*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> workDir[] <span class="comment">/*= NULL*/</span>,
<a name="l09926"></a>09926                         <span class="keyword">const</span> <span class="keywordtype">char</span> description[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> cmdShow <span class="comment">/*= SW_SHOWNORMAL*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> iconFile[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> iconIndex <span class="comment">/*= 0*/</span>,
<a name="l09927"></a>09927                         <span class="keywordtype">int</span> fontSize <span class="comment">/*= 0*/</span>, COORD bufSize <span class="comment">/*= ZERO (COORD)*/</span>, COORD wndSize <span class="comment">/*= ZERO (COORD)*/</span>, COORD wndOrg <span class="comment">/*=ZERO (COORD)*/</span>)
<a name="l09928"></a>09928     {
<a name="l09929"></a>09929 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (shortcutName &amp;&amp; *shortcutName)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09930"></a>09930 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (fileToLink   &amp;&amp; *fileToLink))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l09931"></a>09931 
<a name="l09932"></a>09932 $   IShellLink* shellLink = NULL;
<a name="l09933"></a>09933 $   Win32::IShellLinkDataList* dataList = NULL;
<a name="l09934"></a>09934 $   IPersistFile* file = NULL;
<a name="l09935"></a>09935 
<a name="l09936"></a>09936 $   HRESULT init = Win32::CoInitialize (NULL);
<a name="l09937"></a>09937 
<a name="l09938"></a>09938     _TX_TRY
<a name="l09939"></a>09939         {
<a name="l09940"></a>09940 $       _TX_CHECKED (Win32::CoCreateInstance (CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, Win32::IID_IShellLink, (<span class="keywordtype">void</span>**) &amp;shellLink));
<a name="l09941"></a>09941 $       <span class="keywordflow">if</span> (!shellLink) _TX_FAIL;
<a name="l09942"></a>09942 
<a name="l09943"></a>09943 $       shellLink-&gt;SetPath (fileToLink);
<a name="l09944"></a>09944 $       shellLink-&gt;SetArguments (args);
<a name="l09945"></a>09945 $       shellLink-&gt;SetWorkingDirectory (workDir);
<a name="l09946"></a>09946 $       shellLink-&gt;SetDescription (description);
<a name="l09947"></a>09947 $       shellLink-&gt;SetShowCmd (cmdShow);
<a name="l09948"></a>09948 $       shellLink-&gt;SetIconLocation (iconFile, iconIndex);
<a name="l09949"></a>09949 
<a name="l09950"></a>09950 $       _TX_CHECKED (shellLink-&gt;QueryInterface (Win32::IID_IShellLinkDataList, (<span class="keywordtype">void</span>**) &amp;dataList));
<a name="l09951"></a>09951 $       <span class="keywordflow">if</span> (!dataList) _TX_FAIL;
<a name="l09952"></a>09952 
<a name="l09953"></a>09953 $       Win32::NT_CONSOLE_PROPS props =
<a name="l09954"></a>09954           {{<span class="keyword">sizeof</span> (props), NT_CONSOLE_PROPS_SIG},
<a name="l09955"></a>09955 
<a name="l09956"></a>09956             FOREGROUND_LIGHTGRAY,                       <span class="comment">// wFillAttribute</span>
<a name="l09957"></a>09957             FOREGROUND_MAGENTA | BACKGROUND_WHITE,      <span class="comment">// wPopupFillAttribute</span>
<a name="l09958"></a>09958            {bufSize.X, bufSize.Y},                      <span class="comment">// dwScreenBufferSize</span>
<a name="l09959"></a>09959            {wndSize.X, wndSize.Y},                      <span class="comment">// dwWindowSize</span>
<a name="l09960"></a>09960            {wndOrg.X,  wndOrg.Y},                       <span class="comment">// dwWindowOrigin</span>
<a name="l09961"></a>09961             0,                                          <span class="comment">// nFont</span>
<a name="l09962"></a>09962             0,                                          <span class="comment">// nInputBufferSize</span>
<a name="l09963"></a>09963            {0, (short) fontSize},                       <span class="comment">// dwFontSize</span>
<a name="l09964"></a>09964             0x36, 400, L<span class="stringliteral">&quot;Lucida Console&quot;</span>,               <span class="comment">// uFontFamily, uFontWeight, FaceName. We&#39;re dancing for this!</span>
<a name="l09965"></a>09965             15,                                         <span class="comment">// uCursorSize</span>
<a name="l09966"></a>09966             0,  1, 1, 0,                                <span class="comment">// bFullScreen, bQuickEdit, bInsertMode, bAutoPosition</span>
<a name="l09967"></a>09967             50, 4, 0,                                   <span class="comment">// uHistoryBufferSize, uNumberOfHistoryBuffers, bHistoryNoDup</span>
<a name="l09968"></a>09968 
<a name="l09969"></a>09969            {0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xC0C0C0,  <span class="comment">// Palette</span>
<a name="l09970"></a>09970             0x808080, 0xFF0000, 0x00FF00, 0xFFFF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFFFF}
<a name="l09971"></a>09971             };
<a name="l09972"></a>09972 
<a name="l09973"></a>09973 $       _TX_CHECKED (dataList-&gt;AddDataBlock (&amp;props));
<a name="l09974"></a>09974 
<a name="l09975"></a>09975 $       _TX_CHECKED (shellLink-&gt;QueryInterface (Win32::IID_IPersistFile, (<span class="keywordtype">void</span>**) &amp;file));
<a name="l09976"></a>09976 $       <span class="keywordflow">if</span> (!file) _TX_FAIL;
<a name="l09977"></a>09977 
<a name="l09978"></a>09978 $       <span class="keywordtype">wchar_t</span> wName[MAX_PATH] = L<span class="stringliteral">&quot;&quot;</span>;
<a name="l09979"></a>09979 $       MultiByteToWideChar (_TX_CODEPAGE, 0, shortcutName, -1, wName, MAX_PATH) || ZeroMemory (wName, <span class="keyword">sizeof</span> (wName));
<a name="l09980"></a>09980 
<a name="l09981"></a>09981 $       _TX_CHECKED (file-&gt;Save (wName, <span class="keyword">true</span>));
<a name="l09982"></a>09982         }
<a name="l09983"></a>09983 
<a name="l09984"></a>09984 $   _TX_CATCH
<a name="l09985"></a>09985 $   _TX_FINALLY
<a name="l09986"></a>09986 
<a name="l09987"></a>09987 $   <span class="keywordflow">if</span> (file)      file     -&gt;Release();
<a name="l09988"></a>09988 $   <span class="keywordflow">if</span> (dataList)  dataList -&gt;Release();
<a name="l09989"></a>09989 $   <span class="keywordflow">if</span> (shellLink) shellLink-&gt;Release();
<a name="l09990"></a>09990 
<a name="l09991"></a>09991 $   <span class="keywordflow">if</span> (init == S_OK) Win32::CoUninitialize();
<a name="l09992"></a>09992 
<a name="l09993"></a>09993 $   <span class="keywordflow">return</span> _TX_OK;
<a name="l09994"></a>09994     _TX_ENDTRY
<a name="l09995"></a>09995     }
<a name="l09996"></a>09996 
<a name="l09997"></a>09997 <span class="comment">//}</span>
<a name="l09998"></a>09998 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l09999"></a>09999 
<a name="l10001"></a>10001 <span class="comment">//}</span>
<a name="l10002"></a>10002 <span class="comment">//=================================================================================================================</span>
<a name="l10003"></a>10003 
<a name="l10004"></a>10004 <span class="comment">//=================================================================================================================</span>
<a name="l10005"></a>10005 <span class="comment">//{          Memory DC functions                 (_txBuffer...)</span>
<a name="l10007"></a>10007 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l10009"></a>10009 <span class="comment"></span>
<a name="l10010"></a>10010 HDC _txBuffer_Create (HWND wnd, <span class="keyword">const</span> POINT* size <span class="comment">/*= NULL*/</span>, HBITMAP bitmap <span class="comment">/*= NULL*/</span>, RGBQUAD** pixels <span class="comment">/*= NULL*/</span>)
<a name="l10011"></a>10011     {
<a name="l10012"></a>10012 $1  <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l10013"></a>10013 
<a name="l10014"></a>10014 $   HDC wndDC = GetDC (wnd);
<a name="l10015"></a>10015 $   <span class="keywordflow">if</span> (!wndDC) <span class="keywordflow">return</span> NULL;
<a name="l10016"></a>10016 
<a name="l10017"></a>10017 $   POINT sz = { 1, 1 };
<a name="l10018"></a>10018 $   <span class="keywordflow">if</span> (size) sz = *size;
<a name="l10019"></a>10019 
<a name="l10020"></a>10020 $   <span class="keywordflow">if</span> (!size &amp;&amp; wnd)
<a name="l10021"></a>10021         {
<a name="l10022"></a>10022 $       RECT r = {};
<a name="l10023"></a>10023 $       GetClientRect (wnd, &amp;r) asserted;
<a name="l10024"></a>10024 
<a name="l10025"></a>10025 $       sz.x = r.right  - r.left;
<a name="l10026"></a>10026 $       sz.y = r.bottom - r.top;
<a name="l10027"></a>10027         }
<a name="l10028"></a>10028 
<a name="l10029"></a>10029 $   if (bitmap)
<a name="l10030"></a>10030         {
<a name="l10031"></a>10031 $       BITMAP bmap = {};
<a name="l10032"></a>10032 $       Win32::GetObject (bitmap, <span class="keyword">sizeof</span> (bmap), &amp;bmap) asserted;
<a name="l10033"></a>10033 
<a name="l10034"></a>10034 $       sz.x = bmap.bmWidth;
<a name="l10035"></a>10035 $       sz.y = bmap.bmHeight;
<a name="l10036"></a>10036         }
<a name="l10037"></a>10037 
<a name="l10038"></a>10038 $   HDC dc = Win32::CreateCompatibleDC (wndDC);
<a name="l10039"></a>10039 $   if (!dc) <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (&quot;Cannot create buffer: CreateCompatibleDC() failed&quot;);
<a name="l10040"></a>10040 
<a name="l10041"></a>10041 $   BITMAPINFO info = {{ <span class="keyword">sizeof</span> (info), sz.x, sz.y, 1, WORD (<span class="keyword">sizeof</span> (RGBQUAD) * 8), BI_RGB }};
<a name="l10042"></a>10042 
<a name="l10043"></a>10043 $   HBITMAP bmap = bitmap? bitmap : Win32::CreateDIBSection (NULL, &amp;info, DIB_RGB_COLORS, (<span class="keywordtype">void</span>**) pixels, NULL, 0);
<a name="l10044"></a>10044 $   <span class="keywordflow">if</span> (!bmap) <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create buffer: CreateCompatibleBitmap() failed&quot;</span>);
<a name="l10045"></a>10045 
<a name="l10046"></a>10046 $   Win32::SelectObject (dc, bmap) asserted;
<a name="l10047"></a>10047 
<a name="l10048"></a>10048 $   if (!bitmap) Win32::PatBlt (dc, 0, 0, sz.x, sz.y, BLACKNESS) asserted;
<a name="l10049"></a>10049 
<a name="l10050"></a>10050 $   ReleaseDC (wnd, wndDC) asserted;
<a name="l10051"></a>10051 
<a name="l10052"></a>10052 $   return dc;
<a name="l10053"></a>10053     }
<a name="l10054"></a>10054 
<a name="l10055"></a>10055 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10056"></a>10056 
<a name="l10057"></a>10057 <span class="keywordtype">bool</span> _txBuffer_Delete (HDC* dc)
<a name="l10058"></a>10058     {
<a name="l10059"></a>10059 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l10060"></a>10060 $   <span class="keywordflow">if</span> (!*dc) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l10061"></a>10061 
<a name="l10062"></a>10062 $   <span class="keywordflow">if</span> (_TX_HDC_FAILED (*dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l10063"></a>10063 
<a name="l10064"></a>10064 $   <span class="keywordflow">if</span> (!Win32::GetObjectType (Win32::GetCurrentObject (*dc, OBJ_BITMAP))) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l10065"></a>10065 
<a name="l10066"></a>10066 $   <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l10067"></a>10067 
<a name="l10068"></a>10068 $   _txBuffer_Select (Win32::GetStockObject (NULL_PEN),    *dc) asserted;
<a name="l10069"></a>10069 $   _txBuffer_Select (Win32::GetStockObject (NULL_BRUSH),  *dc) asserted;
<a name="l10070"></a>10070 $   _txBuffer_Select (Win32::GetStockObject (SYSTEM_FONT), *dc) asserted;
<a name="l10071"></a>10071 $   _txBuffer_Select (_txStockBitmap,                      *dc);
<a name="l10072"></a>10072 
<a name="l10073"></a>10073 $   Win32::DeleteObject (Win32::GetCurrentObject (*dc, OBJ_BITMAP)) asserted;
<a name="l10074"></a>10074 
<a name="l10075"></a>10075 $   Win32::DeleteDC (*dc) asserted;
<a name="l10076"></a>10076 
<a name="l10077"></a>10077 $   *dc = NULL;
<a name="l10078"></a>10078 
<a name="l10079"></a>10079 $   return true;
<a name="l10080"></a>10080     }
<a name="l10081"></a>10081 
<a name="l10082"></a>10082 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10083"></a>10083 
<a name="l10084"></a>10084 <span class="keywordtype">bool</span> _txBuffer_Select (HGDIOBJ obj, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l10085"></a>10085     {
<a name="l10086"></a>10086 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (obj)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l10087"></a>10087 $   <span class="keywordflow">if</span> (_TX_HDC_FAILED      (dc))  <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l10088"></a>10088 
<a name="l10089"></a>10089 $   <span class="keywordflow">if</span> (!Win32::GetObjectType (obj)) <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Invalid GDI object type&quot;</span>);
<a name="l10090"></a>10090 
<a name="l10091"></a>10091 $   <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l10092"></a>10092 
<a name="l10093"></a>10093 $   obj = Win32::SelectObject (dc, obj);
<a name="l10094"></a>10094 $   <span class="keywordflow">if</span> (obj) Win32::DeleteObject (obj);
<a name="l10095"></a>10095 
<a name="l10096"></a>10096 $   <span class="keywordflow">return</span> obj != NULL;
<a name="l10097"></a>10097     }
<a name="l10098"></a>10098 
<a name="l10100"></a>10100 <span class="comment">//}</span>
<a name="l10101"></a>10101 <span class="comment">//=================================================================================================================</span>
<a name="l10102"></a>10102 
<a name="l10103"></a>10103 <span class="comment">//=================================================================================================================</span>
<a name="l10104"></a>10104 <span class="comment">//{          Diagnostics</span>
<a name="l10106"></a>10106 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l10108"></a>10108 <span class="comment"></span>
<a name="l10109"></a>10109 <span class="keyword">const</span> <span class="keywordtype">char</span>* _txError (<span class="keyword">const</span> <span class="keywordtype">char</span> file[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> line <span class="comment">/*= 0*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> func[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">unsigned</span> color <span class="comment">/*= 0*/</span>,
<a name="l10110"></a>10110                       <span class="keyword">const</span> <span class="keywordtype">char</span> msg [] <span class="comment">/*= NULL*/</span>, ...)
<a name="l10111"></a>10111     {                                                                        <span class="comment">//---/\---/\-------Это ASCII KOT!--//</span>
<a name="l10112"></a>10112 $1  va_list arg; va_start (arg, msg);                                        <span class="comment">//  {  &#39;-&#39;  }                      //</span>
<a name="l10113"></a>10113 $$  <span class="keyword">const</span> <span class="keywordtype">char</span>* what = _txProcessError (file, line, func, color, msg, arg);  <span class="comment">//  {  0 0  }     Добавь его себе  //</span>
<a name="l10114"></a>10114     va_end (arg);                                                            <span class="comment">//  --&gt; V &lt;--  в исходник, и тебе  //</span>
<a name="l10115"></a>10115                                                                              <span class="comment">//   \ \|/ /      будет, наверно,  //</span>
<a name="l10116"></a>10116     <span class="keywordflow">if</span> (!(msg &amp;&amp; msg[0] == <span class="charliteral">&#39;\a&#39;</span>)) <span class="keywordflow">return</span> what;                               <span class="comment">//    \___/  приятно отлаживаться  //</span>
<a name="l10117"></a>10117                                                                              <span class="comment">//---------------долгими ночами:)--//</span>
<a name="l10118"></a>10118 <span class="comment">//  vvvvvvvvvvvvvvvvvv</span>
<a name="l10119"></a>10119     DebugBreak();   <span class="comment">//&gt;&gt;&gt; Котики, вы в отладчике. Не пугайтесь. Есть шанс посмотреть переменные и разобраться.</span>
<a name="l10120"></a>10120 <span class="comment">//  ^^^^^^^^^^^^^^^^^^</span>
<a name="l10121"></a>10121 
<a name="l10122"></a>10122     <span class="keywordflow">return</span> what;    <span class="comment">//&gt;&gt;&gt; Уходите из функции пошаговой отладкой (F10/F11). Следите за стеком вызовов (Alt+7).</span>
<a name="l10123"></a>10123     }
<a name="l10124"></a>10124 
<a name="l10125"></a>10125 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10126"></a>10126 <span class="comment">//{          General runtime check hooks</span>
<a name="l10127"></a>10127 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10128"></a>10128 
<a name="l10129"></a>10129 <span class="keywordtype">void</span> _txOnSignal (<span class="keywordtype">int</span> sig <span class="comment">/*= 0*/</span>, <span class="keywordtype">int</span> fpe <span class="comment">/*= 0*/</span>)
<a name="l10130"></a>10130     {
<a name="l10131"></a>10131 $1  <span class="keywordflow">if</span> (!sig &amp;&amp; !fpe)
<a name="l10132"></a>10132         {
<a name="l10133"></a>10133 $       signal (SIGSEGV, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))(uintptr_t)_txOnSignal) != SIG_ERR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l10134"></a>10134 $       signal (SIGFPE,  (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))(uintptr_t)_txOnSignal) != SIG_ERR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l10135"></a>10135 $       signal (SIGABRT, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))(uintptr_t)_txOnSignal) != SIG_ERR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l10136"></a>10136 $       signal (SIGILL,  (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))(uintptr_t)_txOnSignal) != SIG_ERR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l10137"></a>10137 $       signal (SIGTERM, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))(uintptr_t)_txOnSignal) != SIG_ERR <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l10138"></a>10138 $       <span class="keywordflow">return</span>;
<a name="l10139"></a>10139         }
<a name="l10140"></a>10140 
<a name="l10141"></a>10141     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%d, %d) called\n&quot;</span>, _TX_VERSION, __func__, sig, fpe);
<a name="l10142"></a>10142 
<a name="l10143"></a>10143 <span class="preprocessor">    #define GET_DESCR_(str, code, descr)  case (code): {$ (str) = &quot; &quot; #code &quot;: &quot; descr; break; }</span>
<a name="l10144"></a>10144 <span class="preprocessor"></span>
<a name="l10145"></a>10145 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* sSig = <span class="stringliteral">&quot;Неизвестный тип сигнала&quot;</span>;
<a name="l10146"></a>10146 
<a name="l10147"></a>10147 $   <span class="keywordflow">switch</span> (sig)
<a name="l10148"></a>10148         {
<a name="l10149"></a>10149         GET_DESCR_ (sSig, SIGSEGV, <span class="stringliteral">&quot;Доступ по неверному указателю. Ставьте ассерты!&quot;</span>)
<a name="l10150"></a>10150         GET_DESCR_ (sSig, SIGILL,  &quot;Попытка выполнить недопустимую операцию. Проверьте указатели на функции.&quot;)
<a name="l10151"></a>10151         GET_DESCR_ (sSig, SIGABRT, &quot;Аварийное завершение программы, вызвана функция abort().&quot;)
<a name="l10152"></a>10152         GET_DESCR_ (sSig, SIGTERM, &quot;Получен сигнал принудительного завершения программы.&quot;)
<a name="l10153"></a>10153         GET_DESCR_ (sSig, SIGFPE,  &quot;Грубая ошибка в вычислениях.&quot;)
<a name="l10154"></a>10154         default:   break;
<a name="l10155"></a>10155         }
<a name="l10156"></a>10156 
<a name="l10157"></a>10157 $   const <span class="keywordtype">char</span>* sFPE = &quot;&quot;;
<a name="l10158"></a>10158 
<a name="l10159"></a>10159     <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l10160"></a>10160 <span class="preprocessor"></span>
<a name="l10161"></a>10161     <span class="comment">// MSVC provides the FPE code as a MS extension.</span>
<a name="l10162"></a>10162     <span class="comment">// See: https://msdn.microsoft.com/ru-ru/library/xdkz3x12.aspx</span>
<a name="l10163"></a>10163 
<a name="l10164"></a>10164 $   <span class="keywordflow">if</span> (sig == SIGFPE) <span class="keywordflow">switch</span> (fpe)
<a name="l10165"></a>10165         {
<a name="l10166"></a>10166         GET_DESCR_ (sFPE, _FPE_INVALID,        <span class="stringliteral">&quot;Результат неверен.&quot;</span>)
<a name="l10167"></a>10167         GET_DESCR_ (sFPE, _FPE_DENORMAL,       &quot;Денормализация.&quot;)
<a name="l10168"></a>10168         GET_DESCR_ (sFPE, _FPE_ZERODIVIDE,     &quot;Деление на ноль.&quot;)
<a name="l10169"></a>10169         GET_DESCR_ (sFPE, _FPE_OVERFLOW,       &quot;Результат слишком большой.&quot;)
<a name="l10170"></a>10170         GET_DESCR_ (sFPE, _FPE_UNDERFLOW,      &quot;Результат слишком маленький.&quot;)
<a name="l10171"></a>10171         GET_DESCR_ (sFPE, _FPE_INEXACT,        &quot;Результат неточен.&quot;)
<a name="l10172"></a>10172         GET_DESCR_ (sFPE, _FPE_UNEMULATED,     &quot;Операция не поддерживается.&quot;)
<a name="l10173"></a>10173         GET_DESCR_ (sFPE, _FPE_SQRTNEG,        &quot;Квадратный корень из отрицательного числа.&quot;)
<a name="l10174"></a>10174         GET_DESCR_ (sFPE, _FPE_STACKOVERFLOW,  &quot;Переполнение стека сопроцессора.&quot;)
<a name="l10175"></a>10175         GET_DESCR_ (sFPE, _FPE_STACKUNDERFLOW, &quot;В стеке сопроцессора не хватает данных.&quot;)
<a name="l10176"></a>10176         GET_DESCR_ (sFPE, _FPE_EXPLICITGEN,    &quot;Явный вызов исключения.&quot;)
<a name="l10177"></a>10177         default:   break;
<a name="l10178"></a>10178         }
<a name="l10179"></a>10179 
<a name="l10180"></a>10180     <span class="preprocessor">#else</span>
<a name="l10181"></a>10181 <span class="preprocessor"></span>$   fpe = 0;
<a name="l10182"></a>10182 <span class="preprocessor">    #endif</span>
<a name="l10183"></a>10183 <span class="preprocessor"></span>
<a name="l10184"></a>10184 <span class="preprocessor">    #undef GET_DESCR_</span>
<a name="l10185"></a>10185 <span class="preprocessor"></span>
<a name="l10186"></a>10186 $   signal (sig, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))(uintptr_t)_txOnSignal);
<a name="l10187"></a>10187 
<a name="l10188"></a>10188 $   Win32::_fpreset();
<a name="l10189"></a>10189 
<a name="l10190"></a>10190 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;\a\t&quot;</span>
<a name="l10191"></a>10191                     <span class="stringliteral">&quot;signal (%d, 0x%02X):%s%s &quot;</span>
<a name="l10192"></a>10192                     <span class="stringliteral">&quot;%s%s&quot;</span>
<a name="l10193"></a>10193                     <span class="stringliteral">&quot;С помощью функции signal() вы можете сами обработать эту ошибку.&quot;</span>,
<a name="l10194"></a>10194                     sig, (<span class="keywordtype">unsigned</span>) fpe, sSig, sFPE,
<a name="l10195"></a>10195                     ((_txDumpSE[1] == <span class="charliteral">&#39;\n&#39;</span>)? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;\n\n&quot;</span>), _txDumpSE + 1);
<a name="l10196"></a>10196     }
<a name="l10197"></a>10197 
<a name="l10198"></a>10198 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10199"></a>10199 
<a name="l10200"></a>10200 <span class="keywordtype">void</span> _txOnTerminate()
<a name="l10201"></a>10201     {
<a name="l10202"></a>10202     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s() called\n&quot;</span>, _TX_VERSION, __func__);
<a name="l10203"></a>10203 
<a name="l10204"></a>10204     <span class="comment">// From: http://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/vterminate.cc</span>
<a name="l10205"></a>10205 
<a name="l10206"></a>10206 $1  <span class="keyword">static</span> <span class="keywordtype">int</span> terminating = 0;
<a name="l10207"></a>10207     <span class="keywordflow">if</span> (terminating++) {$ _TX_UNEXPECTED (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;std::terminate() вызвана рекурсивно.&quot;</span>); <span class="keywordflow">return</span>; }
<a name="l10208"></a>10208 
<a name="l10209"></a>10209 $   <span class="keywordflow">if</span> (!*_txDumpSE)
<a name="l10210"></a>10210         {$ _txDumpExceptionCPP (_txDumpSE + 1, <span class="keyword">sizeof</span> (_txDumpSE) - 2); }
<a name="l10211"></a>10211 
<a name="l10212"></a>10212 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;\t\a&quot;</span>
<a name="l10213"></a>10213                     <span class="stringliteral">&quot;std::terminate(): Неперехваченное исключение в функции main() или в деструкторе, &quot;</span>
<a name="l10214"></a>10214                     <span class="stringliteral">&quot;или другая фатальная ошибка C++. &quot;</span>
<a name="l10215"></a>10215                     <span class="stringliteral">&quot;%s&quot;</span>
<a name="l10216"></a>10216                     <span class="stringliteral">&quot;Используйте try/catch блоки, перехватывайте catch (...), проверяйте вызовы виртуальных функций, &quot;</span>
<a name="l10217"></a>10217                     <span class="stringliteral">&quot;разбирайтесь, в чем дело.\n\n&quot;</span>
<a name="l10218"></a>10218                     <span class="stringliteral">&quot;С помощью std::set_terminate() вы можете сами обработать эту ошибку.&quot;</span> + !*_txDumpSE,
<a name="l10219"></a>10219                     _txDumpSE + 1);
<a name="l10220"></a>10220     }
<a name="l10221"></a>10221 
<a name="l10222"></a>10222 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10223"></a>10223 
<a name="l10224"></a>10224 <span class="keywordtype">void</span> _txOnUnexpected()
<a name="l10225"></a>10225     {
<a name="l10226"></a>10226     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s() called\n&quot;</span>, _TX_VERSION, __func__);
<a name="l10227"></a>10227 
<a name="l10228"></a>10228 $1  <span class="keywordflow">if</span> (!*_txDumpSE)
<a name="l10229"></a>10229         {$ _txDumpExceptionCPP (_txDumpSE + 1, <span class="keyword">sizeof</span> (_txDumpSE) - 2); }
<a name="l10230"></a>10230 
<a name="l10231"></a>10231 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;std::unexpected(): Необработанное исключение.\n\n&quot;</span>
<a name="l10232"></a>10232                     <span class="stringliteral">&quot;Проверьте свои catch-блоки. Перехватите catch (...). Если вы (зря) используете &quot;</span>
<a name="l10233"></a>10233                     <span class="stringliteral">&quot;спецификацию исключений для функций, проверьте, не нарушена ли она.&quot;</span>
<a name="l10234"></a>10234                     <span class="stringliteral">&quot;%s&quot;</span>
<a name="l10235"></a>10235                     <span class="stringliteral">&quot;С помощью catch (...) в main() вы можете сами обработать эту ошибку.&quot;</span>,
<a name="l10236"></a>10236                     _txDumpSE + 1);
<a name="l10237"></a>10237     }
<a name="l10238"></a>10238 
<a name="l10239"></a>10239 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10240"></a>10240 
<a name="l10241"></a>10241 <span class="keywordtype">int</span> _txOnMatherr (_exception* exc)
<a name="l10242"></a>10242     {
<a name="l10243"></a>10243     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (0x%p) called\n&quot;</span>, _TX_VERSION, __func__, exc);
<a name="l10244"></a>10244 
<a name="l10245"></a>10245 $1  assert (exc);
<a name="l10246"></a>10246 
<a name="l10247"></a>10247     <span class="keyword">const</span> <span class="keywordtype">char</span>* sType = <span class="stringliteral">&quot;Неизвестный тип исключения&quot;</span>;
<a name="l10248"></a>10248 
<a name="l10249"></a>10249 <span class="preprocessor">    #if !defined (__CYGWIN__)</span>
<a name="l10250"></a>10250 <span class="preprocessor"></span>
<a name="l10251"></a>10251 <span class="preprocessor">    #define GET_DESCR_(code, descr)  case (code): {$ sType = &quot;(&quot; #code &quot;): &quot; descr; break; }</span>
<a name="l10252"></a>10252 <span class="preprocessor"></span>
<a name="l10253"></a>10253 $   <span class="keywordflow">switch</span> (exc-&gt;type)
<a name="l10254"></a>10254         {
<a name="l10255"></a>10255         GET_DESCR_ (_DOMAIN,    <span class="stringliteral">&quot;Нарушение области определения&quot;</span>);
<a name="l10256"></a>10256         GET_DESCR_ (_SING,      <span class="stringliteral">&quot;Сингулярность аргумента&quot;</span>);
<a name="l10257"></a>10257         GET_DESCR_ (_PLOSS,     <span class="stringliteral">&quot;Частичная потеря значимости&quot;</span>);
<a name="l10258"></a>10258         GET_DESCR_ (_TLOSS,     <span class="stringliteral">&quot;Полная потеря значимости&quot;</span>);
<a name="l10259"></a>10259         GET_DESCR_ (_OVERFLOW,  <span class="stringliteral">&quot;Результат слишком большой&quot;</span>);
<a name="l10260"></a>10260         GET_DESCR_ (_UNDERFLOW, <span class="stringliteral">&quot;Результат слишком маленький&quot;</span>);
<a name="l10261"></a>10261         <span class="keywordflow">default</span>:   <span class="keywordflow">break</span>;
<a name="l10262"></a>10262         }
<a name="l10263"></a>10263 
<a name="l10264"></a>10264 <span class="preprocessor">    #undef GET_DESCR_</span>
<a name="l10265"></a>10265 <span class="preprocessor"></span>
<a name="l10266"></a>10266 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;_matherr(): Математическая ошибка %d %s в функции %s (%lg, [%lg]). Она вернет значение %lg.\n\n&quot;</span>
<a name="l10267"></a>10267                     <span class="stringliteral">&quot;С помощью __setusermatherr() вы можете сами обработать эту ошибку.&quot;</span>,
<a name="l10268"></a>10268                     exc-&gt;type, sType, exc-&gt;name, exc-&gt;arg1, exc-&gt;arg2, exc-&gt;retval);
<a name="l10269"></a>10269 <span class="preprocessor">    #else</span>
<a name="l10270"></a>10270 <span class="preprocessor"></span>
<a name="l10271"></a>10271 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;_matherr(): Математическая ошибка: %s.&quot;</span>, sType);
<a name="l10272"></a>10272 
<a name="l10273"></a>10273 <span class="preprocessor">    #endif</span>
<a name="l10274"></a>10274 <span class="preprocessor"></span>
<a name="l10275"></a>10275     <span class="keywordflow">return</span> 0;
<a name="l10276"></a>10276     }
<a name="l10277"></a>10277 
<a name="l10278"></a>10278 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10279"></a>10279 
<a name="l10280"></a>10280 <span class="keywordtype">void</span> _txOnNewHandlerAnsi()
<a name="l10281"></a>10281     {
<a name="l10282"></a>10282     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s() called\n&quot;</span>, _TX_VERSION, __func__);
<a name="l10283"></a>10283 $1
<a name="l10284"></a>10284 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;operator new: Ошибка выделения памяти.\n\n&quot;</span>
<a name="l10285"></a>10285                     <span class="stringliteral">&quot;С помощью std::set_new_handler() вы можете сами обработать эту ошибку &quot;</span>
<a name="l10286"></a>10286                     <span class="stringliteral">&quot;и где-нибудь найти недостающую память.&quot;</span>);
<a name="l10287"></a>10287 
<a name="l10288"></a>10288 $   <span class="keywordflow">throw</span> std::bad_alloc();
<a name="l10289"></a>10289     }
<a name="l10290"></a>10290 
<a name="l10291"></a>10291 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10292"></a>10292 
<a name="l10293"></a>10293 <span class="keywordtype">void</span> _txOnSecurityErrorAnsi (<span class="keyword">const</span> <span class="keywordtype">char</span>* msg, <span class="keywordtype">void</span>* ptr, <span class="keywordtype">int</span> code)
<a name="l10294"></a>10294     {
<a name="l10295"></a>10295     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%s, 0x%p, %d) called\n&quot;</span>, _TX_VERSION, __func__, msg, ptr, code);
<a name="l10296"></a>10296 
<a name="l10297"></a>10297 $1  <span class="keywordflow">if</span> (code)
<a name="l10298"></a>10298         {$ errno = code; }
<a name="l10299"></a>10299 
<a name="l10300"></a>10300 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;\a&quot;</span>
<a name="l10301"></a>10301                     <span class="stringliteral">&quot;Ошибка переполнения буфера %d: %s в %.20s (0x%p). Ставьте ассерты!\n\n&quot;</span>
<a name="l10302"></a>10302                     <span class="stringliteral">&quot;С помощью std::set_constraint_handler_s() вы можете сами обработать эту ошибку &quot;</span>
<a name="l10303"></a>10303                     <span class="stringliteral">&quot;и постараться не выходить за границы массивов.&quot;</span>,
<a name="l10304"></a>10304                     code, msg, (<span class="keywordtype">char</span>*) ptr, ptr);
<a name="l10305"></a>10305     }
<a name="l10306"></a>10306 
<a name="l10307"></a>10307 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10308"></a>10308 
<a name="l10309"></a>10309 <span class="keyword">inline</span> <span class="keywordtype">int</span> tx_glGetError (<span class="keywordtype">int</span> setError <span class="comment">/*= INT_MIN*/</span>)
<a name="l10310"></a>10310     {
<a name="l10311"></a>10311 $1  <span class="keywordflow">return</span> _txOGLError = (setError == INT_MIN)? Win32::glGetError() : setError;
<a name="l10312"></a>10312     }
<a name="l10313"></a>10313 
<a name="l10314"></a>10314 <span class="comment">//}</span>
<a name="l10315"></a>10315 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10316"></a>10316 
<a name="l10317"></a>10317 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10318"></a>10318 <span class="comment">//{          MSC Runtime check hooks</span>
<a name="l10319"></a>10319 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10320"></a>10320 
<a name="l10321"></a>10321 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l10322"></a>10322 <span class="preprocessor"></span>
<a name="l10323"></a>10323 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10324"></a>10324 
<a name="l10325"></a>10325 <span class="keywordtype">int</span> _txOnNewHandler (<span class="keywordtype">size_t</span> size)
<a name="l10326"></a>10326     {
<a name="l10327"></a>10327     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (0x%p) called\n&quot;</span>, _TX_VERSION, __func__, (<span class="keywordtype">void</span>*)(uintptr_t) size);
<a name="l10328"></a>10328 $5
<a name="l10329"></a>10329 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;operator new: Ошибка выделения %llu байт памяти.\n\n&quot;</span>
<a name="l10330"></a>10330                     <span class="stringliteral">&quot;С помощью _set_new_handler() вы можете сами обработать эту ошибку &quot;</span>
<a name="l10331"></a>10331                     <span class="stringliteral">&quot;и где-нибудь найти недостающую память.&quot;</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>) size);
<a name="l10332"></a>10332 
<a name="l10333"></a>10333 $   <span class="keywordflow">throw</span> std::bad_alloc();
<a name="l10334"></a>10334     }
<a name="l10335"></a>10335 
<a name="l10336"></a>10336 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10337"></a>10337 
<a name="l10338"></a>10338 <span class="keywordtype">void</span> _txOnSecurityError (<span class="keywordtype">int</span> code, <span class="keywordtype">void</span>* addr)
<a name="l10339"></a>10339     {
<a name="l10340"></a>10340     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%d, 0x%p) called\n&quot;</span>, _TX_VERSION, __func__, code, addr);
<a name="l10341"></a>10341 $5
<a name="l10342"></a>10342 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;\a&quot;</span>
<a name="l10343"></a>10343                     <span class="stringliteral">&quot;Ошибка переполнения буфера %d (_SECERR_BUFFER_OVERRUN). Ставьте ассерты!\n\n&quot;</span>
<a name="l10344"></a>10344                     <span class="stringliteral">&quot;С помощью _set_security_error_handler() вы можете сами обработать эту ошибку &quot;</span>
<a name="l10345"></a>10345                     <span class="stringliteral">&quot;и более торжественно завершить программу. Ставьте же ассерты.&quot;</span>, code);
<a name="l10346"></a>10346     }
<a name="l10347"></a>10347 
<a name="l10348"></a>10348 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10349"></a>10349 
<a name="l10350"></a>10350 <span class="keywordtype">void</span> _txOnPureCall()
<a name="l10351"></a>10351     {
<a name="l10352"></a>10352     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s() called\n&quot;</span>, _TX_VERSION, __func__);
<a name="l10353"></a>10353 $5
<a name="l10354"></a>10354 $   _TX_UNEXPECTED (<span class="stringliteral">&quot;\a&quot;</span>
<a name="l10355"></a>10355                     <span class="stringliteral">&quot;Вызвана чисто виртуальная функция. Такое бывает, например, в конструкторах &quot;</span>
<a name="l10356"></a>10356                     <span class="stringliteral">&quot;или деструкторах базовых классов - не вызывайте там таких функций.\n\n&quot;</span>
<a name="l10357"></a>10357                     <span class="stringliteral">&quot;С помощью _set_purecall_handler() вы можете сами обработать эту ошибку &quot;</span>
<a name="l10358"></a>10358                     <span class="stringliteral">&quot;и проверить свое знание С++ :)&quot;</span>);
<a name="l10359"></a>10359     }
<a name="l10360"></a>10360 
<a name="l10361"></a>10361 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10362"></a>10362 
<a name="l10363"></a>10363 <span class="keywordtype">void</span> _txOnInvalidParam (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* wExpr, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* wFunc, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* wFile, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line, uintptr_t addr)
<a name="l10364"></a>10364     {
<a name="l10365"></a>10365     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%S, %S, %S, %d, 0x%p) called\n&quot;</span>, _TX_VERSION, __func__, wExpr, wFunc, wFile, line, addr);
<a name="l10366"></a>10366 
<a name="l10367"></a>10367 $5  assert (wExpr);
<a name="l10368"></a>10368     assert (wFunc);
<a name="l10369"></a>10369     assert (wFile);
<a name="l10370"></a>10370 
<a name="l10371"></a>10371     <span class="keywordtype">char</span> expr [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>/2] = <span class="stringliteral">&quot;[Unknowm expr]&quot;</span>,
<a name="l10372"></a>10372          func [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>/2] = <span class="stringliteral">&quot;[Unknowm func]&quot;</span>,
<a name="l10373"></a>10373          file [MAX_PATH]      = <span class="stringliteral">&quot;[Unknowm file]&quot;</span>;
<a name="l10374"></a>10374 
<a name="l10375"></a>10375 $   WideCharToMultiByte (_TX_CODEPAGE, 0, wExpr, -1, expr, <span class="keyword">sizeof</span> (expr) - 1, NULL, NULL);
<a name="l10376"></a>10376 $   WideCharToMultiByte (_TX_CODEPAGE, 0, wFunc, -1, func, <span class="keyword">sizeof</span> (func) - 1, NULL, NULL);
<a name="l10377"></a>10377 $   WideCharToMultiByte (_TX_CODEPAGE, 0, wFile, -1, file, <span class="keyword">sizeof</span> (file) - 1, NULL, NULL);
<a name="l10378"></a>10378 
<a name="l10379"></a>10379 $$  _txError (file, (<span class="keywordtype">int</span>) line, func, 0, <span class="stringliteral">&quot;\a&quot;</span>
<a name="l10380"></a>10380               <span class="stringliteral">&quot;В функцию %s передан неверный параметр: неверно, что %s. Не надо так.\n\n&quot;</span>
<a name="l10381"></a>10381               <span class="stringliteral">&quot;С помощью _set_invalid_parameter_handler() вы можете сами обработать эту ошибку.&quot;</span>, func, expr);
<a name="l10382"></a>10382     }
<a name="l10383"></a>10383 
<a name="l10384"></a>10384 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10385"></a>10385 
<a name="l10386"></a>10386 <span class="preprocessor">#if defined (_CLANG_VER) &amp;&amp; !defined (_MSC_VER)</span>
<a name="l10387"></a>10387 <span class="preprocessor"></span>
<a name="l10388"></a>10388 <span class="keywordtype">void</span> _txLibCppDebugFunction (std::__libcpp_debug_info <span class="keyword">const</span>&amp; info)
<a name="l10389"></a>10389     {
<a name="l10390"></a>10390 $5  assert (&amp;info);
<a name="l10391"></a>10391 
<a name="l10392"></a>10392 $$  _txError (info.__file_, info.__line_, NULL, 0, <span class="stringliteral">&quot;\a&quot;</span>
<a name="l10393"></a>10393               <span class="stringliteral">&quot;Оказалось неверно, что %s (%s). Не надо так.\n\n&quot;</span>
<a name="l10394"></a>10394               <span class="stringliteral">&quot;С помощью std::__libcpp_debug_function вы можете сами обработать эту ошибку.&quot;</span>, info.__pred_, info.__msg_);
<a name="l10395"></a>10395     }
<a name="l10396"></a>10396 
<a name="l10397"></a>10397 <span class="preprocessor">#endif</span>
<a name="l10398"></a>10398 <span class="preprocessor"></span>
<a name="l10399"></a>10399 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10400"></a>10400 
<a name="l10401"></a>10401 <span class="preprocessor">#pragma runtime_checks (&quot;&quot;, off)</span>
<a name="l10402"></a>10402 <span class="preprocessor"></span>
<a name="l10403"></a>10403 <span class="keywordtype">int</span> _txOnRTCFailure (<span class="keywordtype">int</span> type, <span class="keyword">const</span> <span class="keywordtype">char</span>* file, <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span>* module, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, ...)
<a name="l10404"></a>10404     {
<a name="l10405"></a>10405     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: %s (%d, %s, %d, %s, %s) called\n&quot;</span>, _TX_VERSION, __func__, type, file, line, module, format);
<a name="l10406"></a>10406 
<a name="l10407"></a>10407 $5  <span class="keyword">static</span> <span class="keywordtype">long</span> running = 0;
<a name="l10408"></a>10408 $   <span class="keywordflow">while</span> (InterlockedExchange (&amp;running, 1)) Sleep (0);
<a name="l10409"></a>10409 
<a name="l10410"></a>10410 $   assert (format);
<a name="l10411"></a>10411 
<a name="l10412"></a>10412     <span class="comment">// Disable all RTC failures</span>
<a name="l10413"></a>10413 
<a name="l10414"></a>10414 $   <span class="keywordtype">int</span> nErrors = _RTC_NumErrors();
<a name="l10415"></a>10415 $   <span class="keywordtype">int</span>* errors = NULL;
<a name="l10416"></a>10416 $   <span class="keywordflow">try</span> { errors = (<span class="keywordtype">int</span>*) _alloca (nErrors * <span class="keyword">sizeof</span> (*errors)); } <span class="keywordflow">catch</span> (...) {;}
<a name="l10417"></a>10417 
<a name="l10418"></a>10418 $   <span class="keywordtype">int</span> err = 0;
<a name="l10419"></a>10419 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nErrors; i++) *(errors? &amp;errors[i] : &amp;err) = _RTC_SetErrorType ((_RTC_ErrorNumber) i, _RTC_ERRTYPE_IGNORE);
<a name="l10420"></a>10420 
<a name="l10421"></a>10421 $   <span class="keywordtype">char</span> text [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l10422"></a>10422 
<a name="l10423"></a>10423 $   va_list arg; va_start (arg, format);
<a name="l10424"></a>10424 $   _tx_vsnprintf_s (text, <span class="keyword">sizeof</span> (text) - 1, format, arg);                  <span class="comment">// Get message from the vararg list</span>
<a name="l10425"></a>10425 $   <span class="keyword">auto</span> error = (_RTC_ErrorNumber) va_arg (arg, <span class="keywordtype">int</span> <span class="comment">/*_RTC_ErrorNumber*/</span>);  <span class="comment">// Get the RTC error number</span>
<a name="l10426"></a>10426 $   va_end (arg);
<a name="l10427"></a>10427 
<a name="l10428"></a>10428 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* sType = <span class="stringliteral">&quot;type&quot;</span>;
<a name="l10429"></a>10429 
<a name="l10430"></a>10430 $   <span class="keywordflow">switch</span> (type)
<a name="l10431"></a>10431        {
<a name="l10432"></a>10432        <span class="keywordflow">case</span> _CRT_ERROR:  $ sType = <span class="stringliteral">&quot;ошибка&quot;</span>;            <span class="keywordflow">break</span>;
<a name="l10433"></a>10433        <span class="keywordflow">case</span> _CRT_ASSERT: $ sType = <span class="stringliteral">&quot;логическая ошибка&quot;</span>; <span class="keywordflow">break</span>;
<a name="l10434"></a>10434        <span class="keywordflow">case</span> _CRT_WARN:   $ sType = <span class="stringliteral">&quot;возможная ошибка&quot;</span>;  <span class="keywordflow">break</span>;
<a name="l10435"></a>10435        <span class="keywordflow">default</span>:          $                              <span class="keywordflow">break</span>;
<a name="l10436"></a>10436        }
<a name="l10437"></a>10437 
<a name="l10438"></a>10438 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* sError = _RTC_GetErrDesc (error);
<a name="l10439"></a>10439 
<a name="l10440"></a>10440 $$  _txError (file, line, NULL, 0, <span class="stringliteral">&quot;\a&quot;</span>
<a name="l10441"></a>10441               <span class="stringliteral">&quot;Сбой проверки выполнения машинного кода: %s %d (%s): %s в модуле %s.&quot;</span>, sType, error, sError, text, module);
<a name="l10442"></a>10442 
<a name="l10443"></a>10443     <span class="comment">// The code below will be never executed until the error above will stay fatal:</span>
<a name="l10444"></a>10444 
<a name="l10445"></a>10445     <span class="comment">// Restore the RTC error types</span>
<a name="l10446"></a>10446 
<a name="l10447"></a>10447 <span class="preprocessor">    #if defined (_MSC_VER)</span>
<a name="l10448"></a>10448 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 6385)  // Reading invalid data from &#39;errors&#39;: the readable size is &#39;n&#39; bytes, but &#39;m&#39; bytes may be read.</span>
<a name="l10449"></a>10449 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l10450"></a>10450 <span class="preprocessor"></span>
<a name="l10451"></a>10451 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nErrors; i++) _RTC_SetErrorType ((_RTC_ErrorNumber) i, (errors? errors[i] : _CRT_ERROR));
<a name="l10452"></a>10452 
<a name="l10453"></a>10453 <span class="preprocessor">    #if defined (_MSC_VER)</span>
<a name="l10454"></a>10454 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 6385)  // Reading invalid data from &#39;errors&#39;: the readable size is &#39;n&#39; bytes, but &#39;m&#39; bytes may be read.</span>
<a name="l10455"></a>10455 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l10456"></a>10456 <span class="preprocessor"></span>
<a name="l10457"></a>10457 $   InterlockedExchange (&amp;running, 0);
<a name="l10458"></a>10458 $   <span class="keywordflow">return</span> 1;
<a name="l10459"></a>10459     }
<a name="l10460"></a>10460 
<a name="l10461"></a>10461 <span class="preprocessor">#pragma runtime_checks (&quot;&quot;, restore)</span>
<a name="l10462"></a>10462 <span class="preprocessor"></span>
<a name="l10463"></a>10463 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10464"></a>10464 
<a name="l10465"></a>10465 <span class="keywordtype">int</span> _txOnAllocHook (<span class="keywordtype">int</span> type, <span class="keywordtype">void</span>* data, <span class="keywordtype">size_t</span> size, <span class="keywordtype">int</span> use, <span class="keywordtype">long</span> request, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* file, <span class="keywordtype">int</span> line)
<a name="l10466"></a>10466     {
<a name="l10467"></a>10467 <span class="preprocessor">    #if (_TX_ALLOW_TRACE +0 &gt;= 4)</span>
<a name="l10468"></a>10468 <span class="preprocessor"></span>
<a name="l10469"></a>10469     <span class="keyword">static</span> _tx_thread <span class="keywordtype">int</span> recursive = 0;
<a name="l10470"></a>10470     <span class="keywordflow">if</span> (recursive) <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l10471"></a>10471     recursive++;
<a name="l10472"></a>10472 
<a name="l10473"></a>10473 <span class="preprocessor">    #if (_TX_ALLOW_TRACE +0 &lt;= 10)</span>
<a name="l10474"></a>10474 <span class="preprocessor"></span>    <span class="keywordflow">if</span> (!size) <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l10475"></a>10475 <span class="preprocessor">    #endif</span>
<a name="l10476"></a>10476 <span class="preprocessor"></span>
<a name="l10477"></a>10477 <span class="preprocessor">    #define GET_DESCR_(str, type)  case (type): { str = #type; break; }</span>
<a name="l10478"></a>10478 <span class="preprocessor"></span>
<a name="l10479"></a>10479     <span class="keyword">const</span> <span class="keywordtype">char</span>* sType = <span class="stringliteral">&quot;Unknown type&quot;</span>;
<a name="l10480"></a>10480     <span class="keyword">const</span> <span class="keywordtype">char</span>* sUse  = <span class="stringliteral">&quot;Unknown use&quot;</span>;
<a name="l10481"></a>10481 
<a name="l10482"></a>10482     <span class="keywordflow">switch</span> (_BLOCK_TYPE (type))
<a name="l10483"></a>10483         {
<a name="l10484"></a>10484         GET_DESCR_ (sType, _HOOK_ALLOC);
<a name="l10485"></a>10485         GET_DESCR_ (sType, _HOOK_REALLOC);
<a name="l10486"></a>10486         GET_DESCR_ (sType, _HOOK_FREE);
<a name="l10487"></a>10487         <span class="keywordflow">default</span>:   <span class="keywordflow">break</span>;
<a name="l10488"></a>10488         }
<a name="l10489"></a>10489 
<a name="l10490"></a>10490     <span class="keywordflow">switch</span> (use)
<a name="l10491"></a>10491         {
<a name="l10492"></a>10492         GET_DESCR_ (sUse,  _NORMAL_BLOCK);
<a name="l10493"></a>10493         GET_DESCR_ (sUse,  _CRT_BLOCK);
<a name="l10494"></a>10494         GET_DESCR_ (sUse,  _CLIENT_BLOCK);
<a name="l10495"></a>10495         GET_DESCR_ (sUse,  _FREE_BLOCK);
<a name="l10496"></a>10496         GET_DESCR_ (sUse,  _IGNORE_BLOCK);
<a name="l10497"></a>10497         <span class="keywordflow">default</span>:   <span class="keywordflow">break</span>;
<a name="l10498"></a>10498         }
<a name="l10499"></a>10499 
<a name="l10500"></a>10500 <span class="preprocessor">    #undef  GET_DESCR_</span>
<a name="l10501"></a>10501 <span class="preprocessor"></span>
<a name="l10502"></a>10502     _txTrace ((<span class="keyword">const</span> <span class="keywordtype">char</span>*) file, line, NULL, <span class="stringliteral">&quot;%*s&quot;</span>
<a name="l10503"></a>10503               <span class="stringliteral">&quot;_txOnAllocHook (type = 0x%02X (%-*s), subtype =0x%X, data = 0x%p, size = 0x%p, use = 0x%02X (%-*s), request = %ld)&quot;</span>,
<a name="l10504"></a>10504               2 * _txLoc::Cur.inTX, <span class="stringliteral">&quot;&quot;</span>,
<a name="l10505"></a>10505               type, 13, sType, _BLOCK_SUBTYPE (type), data, (<span class="keywordtype">void</span>*) size, use, 13, sUse, request);
<a name="l10506"></a>10506 
<a name="l10507"></a>10507     recursive--;
<a name="l10508"></a>10508 
<a name="l10509"></a>10509 <span class="preprocessor">    #else</span>
<a name="l10510"></a>10510 <span class="preprocessor"></span>
<a name="l10511"></a>10511     UNREFERENCED_PARAMETER (type);
<a name="l10512"></a>10512     UNREFERENCED_PARAMETER (data);
<a name="l10513"></a>10513     UNREFERENCED_PARAMETER (size);
<a name="l10514"></a>10514     UNREFERENCED_PARAMETER (use);
<a name="l10515"></a>10515     UNREFERENCED_PARAMETER (request);
<a name="l10516"></a>10516     UNREFERENCED_PARAMETER (file);
<a name="l10517"></a>10517     UNREFERENCED_PARAMETER (line);
<a name="l10518"></a>10518 
<a name="l10519"></a>10519 <span class="preprocessor">    #endif</span>
<a name="l10520"></a>10520 <span class="preprocessor"></span>
<a name="l10521"></a>10521     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l10522"></a>10522     }
<a name="l10523"></a>10523 
<a name="l10524"></a>10524 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10525"></a>10525 
<a name="l10526"></a>10526 <span class="preprocessor">#endif</span>
<a name="l10527"></a>10527 <span class="preprocessor"></span>
<a name="l10528"></a>10528 <span class="comment">//}</span>
<a name="l10529"></a>10529 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10530"></a>10530 
<a name="l10531"></a>10531 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10532"></a>10532 <span class="comment">//{          SEH staff</span>
<a name="l10533"></a>10533 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10534"></a>10534 
<a name="l10535"></a>10535 <span class="keywordtype">long</span> WINAPI _txVectoredExceptionHandler (EXCEPTION_POINTERS* exc)
<a name="l10536"></a>10536     {
<a name="l10537"></a>10537     <span class="keywordtype">int</span> inTX = _txLoc::Cur.inTX++;
<a name="l10538"></a>10538 
<a name="l10539"></a>10539     <span class="keywordtype">long</span> ret = _txOnExceptionSEH (exc, <span class="stringliteral">&quot;_txVectoredExceptionHandler&quot;</span>);
<a name="l10540"></a>10540 
<a name="l10541"></a>10541     _txLoc::Cur.inTX = inTX;
<a name="l10542"></a>10542     <span class="keywordflow">return</span> ret;
<a name="l10543"></a>10543     }
<a name="l10544"></a>10544 
<a name="l10545"></a>10545 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10546"></a>10546 
<a name="l10547"></a>10547 <span class="keywordtype">long</span> WINAPI _txUnhandledExceptionFilter (EXCEPTION_POINTERS* exc)
<a name="l10548"></a>10548     {
<a name="l10549"></a>10549     <span class="keywordtype">int</span> inTX = _txLoc::Cur.inTX++;
<a name="l10550"></a>10550 
<a name="l10551"></a>10551     <span class="keywordtype">long</span> ret = _txOnExceptionSEH (exc, <span class="stringliteral">&quot;_txUnhandledExceptionFilter&quot;</span>);
<a name="l10552"></a>10552 
<a name="l10553"></a>10553     <span class="keywordflow">if</span> (_txPrevUEFilter)
<a name="l10554"></a>10554         {
<a name="l10555"></a>10555         <span class="keywordflow">if</span> (_txSetJmp())
<a name="l10556"></a>10556             {
<a name="l10557"></a>10557             <span class="keywordtype">int</span> inTX2 = _txLoc::Cur.inTX++;
<a name="l10558"></a>10558 
<a name="l10559"></a>10559             ret = _txPrevUEFilter (exc);
<a name="l10560"></a>10560 
<a name="l10561"></a>10561             _txLoc::Cur.inTX = inTX2;
<a name="l10562"></a>10562             }
<a name="l10563"></a>10563         <span class="keywordflow">else</span>
<a name="l10564"></a>10564             {
<a name="l10565"></a>10565 $6          _txClearJmp();
<a name="l10566"></a>10566 
<a name="l10567"></a>10567             _TX_UNEXPECTED (<span class="stringliteral">&quot;\t\a&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>
<a name="l10568"></a>10568                             <span class="stringliteral">&quot;С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.\n\n&quot;</span>
<a name="l10569"></a>10569                             <span class="stringliteral">&quot;Дополнительно: Сбой вызова стандартного обработчика неперехваченнных исключений SEH.&quot;</span> + !*_txDumpSE,
<a name="l10570"></a>10570                             _txDumpSE + 1);
<a name="l10571"></a>10571             }
<a name="l10572"></a>10572         }
<a name="l10573"></a>10573 
<a name="l10574"></a>10574     _txLoc::Cur.inTX = inTX;
<a name="l10575"></a>10575     <span class="keywordflow">return</span> ret;
<a name="l10576"></a>10576     }
<a name="l10577"></a>10577 
<a name="l10578"></a>10578 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10579"></a>10579 
<a name="l10580"></a>10580 LPTOP_LEVEL_EXCEPTION_FILTER WINAPI _txOnSetUnhandledExceptionFilter (LPTOP_LEVEL_EXCEPTION_FILTER filter)
<a name="l10581"></a>10581     {
<a name="l10582"></a>10582 $6  _txPrevUEFilter = filter;
<a name="l10583"></a>10583 
<a name="l10584"></a>10584     <span class="keywordflow">return</span> (LPTOP_LEVEL_EXCEPTION_FILTER) _txUnhandledExceptionFilter;
<a name="l10585"></a>10585     }
<a name="l10586"></a>10586 
<a name="l10587"></a>10587 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10588"></a>10588 
<a name="l10589"></a>10589 <span class="keywordtype">long</span> _txOnExceptionSEH (EXCEPTION_POINTERS* exc, <span class="keyword">const</span> <span class="keywordtype">char</span> func[])
<a name="l10590"></a>10590     {
<a name="l10591"></a>10591     assert (exc); <span class="keywordflow">if</span> (!exc) {$ <span class="keywordflow">return</span> EXCEPTION_CONTINUE_SEARCH; }
<a name="l10592"></a>10592 
<a name="l10593"></a>10593     assert (exc-&gt;ExceptionRecord);
<a name="l10594"></a>10594 
<a name="l10595"></a>10595     assert (func);
<a name="l10596"></a>10596     assert (func[3] == <span class="charliteral">&#39;V&#39;</span> || func[3] == <span class="charliteral">&#39;U&#39;</span>);
<a name="l10597"></a>10597 
<a name="l10598"></a>10598     <span class="keywordtype">bool</span>  unhExc = (func[3] == <span class="charliteral">&#39;U&#39;</span>);
<a name="l10599"></a>10599     DWORD code   = (exc &amp;&amp; exc-&gt;ExceptionRecord)? exc-&gt;ExceptionRecord-&gt;ExceptionCode    : 0;
<a name="l10600"></a>10600     <span class="keywordtype">void</span>* addr   = (exc &amp;&amp; exc-&gt;ExceptionRecord)? exc-&gt;ExceptionRecord-&gt;ExceptionAddress : NULL;
<a name="l10601"></a>10601 
<a name="l10602"></a>10602     <span class="keywordflow">if</span> (code == DBG_PRINTEXCEPTION_C                  ||
<a name="l10603"></a>10603         code == DBG_PRINTEXCEPTION_WIDE_C             ||
<a name="l10604"></a>10604         code == DBG_THREAD_NAME                       ||
<a name="l10605"></a>10605        (code == RPC_S_SERVER_UNAVAILABLE  &amp;&amp; !unhExc) ||
<a name="l10606"></a>10606        (code == RPC_S_CALL_CANCELLED      &amp;&amp; !unhExc) ||
<a name="l10607"></a>10607        (code == EXCEPTION_BREAKPOINT &amp;&amp; IsDebuggerPresent()))
<a name="l10608"></a>10608         <span class="keywordflow">return</span> EXCEPTION_CONTINUE_SEARCH;
<a name="l10609"></a>10609 
<a name="l10610"></a>10610     _txSENumber++;
<a name="l10611"></a>10611     <span class="keywordflow">if</span> (HIBYTE (HIWORD (code)) == 0xC0) _txSEFatalNumber++;
<a name="l10612"></a>10612 
<a name="l10613"></a>10613     OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l10614"></a>10614     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - WARNING: #%ld: %s (code 0x%08lX, addr 0x%p) called\n&quot;</span>,
<a name="l10615"></a>10615                          _TX_VERSION, _txSENumber, func, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) code, addr);
<a name="l10616"></a>10616 
<a name="l10617"></a>10617 $6  <span class="keywordflow">if</span> (*(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>*) _txDumpExceptionObjJmp)
<a name="l10618"></a>10618         {
<a name="l10619"></a>10619 $       longjmp (_txDumpExceptionObjJmp, 1);
<a name="l10620"></a>10620         }
<a name="l10621"></a>10621 
<a name="l10622"></a>10622     <a class="code" href="a00080.htm#ga5de732de72c46b992ac2feeac2de7e42" title="Переинициализирует математический сопроцессор">tx_fpreset</a>();
<a name="l10623"></a>10623 
<a name="l10624"></a>10624 <span class="preprocessor">    #if defined (_MSC_VER)</span>
<a name="l10625"></a>10625 <span class="preprocessor"></span>    <span class="keywordflow">if</span> (code == EXCEPTION_STACK_OVERFLOW) {$ _resetstkoflw(); }
<a name="l10626"></a>10626 <span class="preprocessor">    #endif</span>
<a name="l10627"></a>10627 <span class="preprocessor"></span>
<a name="l10628"></a>10628 $   <span class="keywordtype">bool</span> primaryException = !(func &amp;&amp; exc) || !((unhExc &amp;&amp; *_txDumpSE) || _TX_MSC__CXX_DETECT_RETHROW (exc-&gt;ExceptionRecord));
<a name="l10629"></a>10629 
<a name="l10630"></a>10630 $   <span class="keywordflow">if</span> (primaryException &amp;&amp; exc)
<a name="l10631"></a>10631         {
<a name="l10632"></a>10632 $       <span class="keywordtype">unsigned</span> err = GetLastError();
<a name="l10633"></a>10633 
<a name="l10634"></a>10634 $       <span class="keyword">const</span> <span class="keywordtype">char</span>* stackTrace = _txCaptureStackBackTrace (0, <span class="keyword">true</span>, exc-&gt;ContextRecord);
<a name="l10635"></a>10635 
<a name="l10636"></a>10636 $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) <span class="keyword">sizeof</span> (_txDumpSE)  - 1, exc-&gt;ExceptionRecord, func);
<a name="l10637"></a>10637 $       _tx_snprintf_s      (_txTraceSE, (intptr_t) <span class="keyword">sizeof</span> (_txTraceSE) - 1, <span class="stringliteral">&quot;%s&quot;</span>, stackTrace);
<a name="l10638"></a>10638 
<a name="l10639"></a>10639 $       <span class="keyword">static</span> _tx_thread DWORD prevCode = 0;
<a name="l10640"></a>10640 $       <span class="keyword">static</span> _tx_thread <span class="keywordtype">void</span>* prevAddr = NULL;
<a name="l10641"></a>10641 
<a name="l10642"></a>10642 $       <span class="keywordflow">if</span> (code != prevCode &amp;&amp; addr != prevAddr &amp;&amp;
<a name="l10643"></a>10643             !strstr (_txDumpSE, <span class="stringliteral">&quot;Объект исключения C++:&quot;</span>))
<a name="l10644"></a>10644             {
<a name="l10645"></a>10645 <span class="preprocessor">            #if !defined (_TX_NO_MINIDUMP)</span>
<a name="l10646"></a>10646 <span class="preprocessor"></span>$           _txCreateMiniDump (exc);
<a name="l10647"></a>10647 <span class="preprocessor">            #endif</span>
<a name="l10648"></a>10648 <span class="preprocessor"></span>
<a name="l10649"></a>10649 $           SetLastError (err);
<a name="l10650"></a>10650 $           _TX_UNEXPECTED (<span class="stringliteral">&quot;\v\b\t&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>, _txDumpSE + 1);
<a name="l10651"></a>10651 
<a name="l10652"></a>10652 $           prevCode = code;
<a name="l10653"></a>10653 $           prevAddr = addr;
<a name="l10654"></a>10654             }
<a name="l10655"></a>10655 
<a name="l10656"></a>10656 $       SetLastError (err);
<a name="l10657"></a>10657         }
<a name="l10658"></a>10658 
<a name="l10659"></a>10659 $   <span class="keywordflow">if</span> (_txDumpSE[0]     == <span class="charliteral">&#39;\a&#39;</span>                   ||
<a name="l10660"></a>10660         _txSENumber      &gt;= <a class="code" href="a00084.htm#ga15dc1a04b8701e2db400b005b7a17ced" title="Максимальное количество исключений в программе.">_TX_EXCEPTIONS_LIMIT</a>+0 ||
<a name="l10661"></a>10661         _txSEFatalNumber &gt;= <a class="code" href="a00084.htm#gaf274c058737ec7e680437d2a1cdcd7b6" title="Максимальное количество фатальных исключений.">_TX_FATAL_EXCEPTIONS_LIMIT</a>+0)
<a name="l10662"></a>10662         {
<a name="l10663"></a>10663 <span class="preprocessor">        #if !defined (_TX_NO_MINIDUMP)</span>
<a name="l10664"></a>10664 <span class="preprocessor"></span>$       _txCreateMiniDump (exc);
<a name="l10665"></a>10665 <span class="preprocessor">        #endif</span>
<a name="l10666"></a>10666 <span class="preprocessor"></span>
<a name="l10667"></a>10667 $       _TX_UNEXPECTED (<span class="stringliteral">&quot;\a\t&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>
<a name="l10668"></a>10668                         <span class="stringliteral">&quot;С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.&quot;</span>,
<a name="l10669"></a>10669                         _txDumpSE + 1);
<a name="l10670"></a>10670         }
<a name="l10671"></a>10671 
<a name="l10672"></a>10672 $   <span class="keywordflow">return</span> EXCEPTION_CONTINUE_SEARCH;
<a name="l10673"></a>10673     }
<a name="l10674"></a>10674 
<a name="l10675"></a>10675 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10676"></a>10676 
<a name="l10677"></a>10677 intptr_t _txDumpExceptionSEH (<span class="keywordtype">char</span> what[], intptr_t size, <span class="keyword">const</span> EXCEPTION_RECORD* exc, <span class="keyword">const</span> <span class="keywordtype">char</span> func[])
<a name="l10678"></a>10678     {
<a name="l10679"></a>10679 $6  assert (what);
<a name="l10680"></a>10680 $   assert (size &gt;= 0);
<a name="l10681"></a>10681     assert (exc); <span class="keywordflow">if</span> (!exc) {$ <span class="keywordflow">return</span> 0; }
<a name="l10682"></a>10682 $   assert (func);
<a name="l10683"></a>10683 
<a name="l10684"></a>10684 $   <span class="keywordtype">unsigned</span>         code   = exc-&gt;ExceptionCode;
<a name="l10685"></a>10685 $   <span class="keywordtype">void</span>*            addr   = exc-&gt;ExceptionAddress;
<a name="l10686"></a>10686 $   <span class="keywordtype">unsigned</span>         params = exc-&gt;NumberParameters;
<a name="l10687"></a>10687 $   <span class="keyword">const</span> ULONG_PTR* info   = exc-&gt;ExceptionInformation;
<a name="l10688"></a>10688 $   <span class="keywordtype">void</span>*            <span class="keywordtype">object</span> = (params &gt;= 2)? (<span class="keywordtype">void</span>*) info[1] : NULL;
<a name="l10689"></a>10689 
<a name="l10690"></a>10690 $   <span class="keywordtype">char</span>* s = what;
<a name="l10691"></a>10691 
<a name="l10692"></a>10692 <span class="preprocessor">    #define PRINT_(...)  s += _tx_snprintf_s (s, size-2 - (s-what), ##__VA_ARGS__)</span>
<a name="l10693"></a>10693 <span class="preprocessor"></span>
<a name="l10694"></a>10694 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* sCode  = NULL;
<a name="l10695"></a>10695 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* sDescr = NULL;
<a name="l10696"></a>10696 
<a name="l10697"></a>10697 <span class="preprocessor">    #define GET_DESCR_(code, descr)  case ((unsigned long) (code)): {$ sCode = #code; sDescr = descr; break; }</span>
<a name="l10698"></a>10698 <span class="preprocessor"></span>
<a name="l10699"></a>10699 $   <span class="keywordflow">switch</span> (code)
<a name="l10700"></a>10700         {
<a name="l10701"></a>10701         GET_DESCR_ (EXCEPTION_ACCESS_VIOLATION,         <span class="stringliteral">&quot; &quot;</span>  <span class="stringliteral">&quot;Нарушение доступа к памяти.&quot;</span>)
<a name="l10702"></a>10702         GET_DESCR_ (EXCEPTION_ILLEGAL_INSTRUCTION,      &quot; &quot;  &quot;Недопустимая операция.&quot;)
<a name="l10703"></a>10703         GET_DESCR_ (EXCEPTION_PRIV_INSTRUCTION,         &quot; &quot;  &quot;Привилегированная операция.&quot;)
<a name="l10704"></a>10704         GET_DESCR_ (EXCEPTION_ARRAY_BOUNDS_EXCEEDED,    &quot;\a&quot; &quot;Выход за границы массива. Ставьте ассерты!&quot;)
<a name="l10705"></a>10705         GET_DESCR_ (EXCEPTION_BREAKPOINT,               &quot;\a&quot; &quot;Достигнута точка останова. Удачи в отладке!&quot;)
<a name="l10706"></a>10706         GET_DESCR_ (EXCEPTION_DATATYPE_MISALIGNMENT,    &quot;\a&quot; &quot;Нарушение выравнивания данных.&quot;)
<a name="l10707"></a>10707         GET_DESCR_ (EXCEPTION_INVALID_DISPOSITION,      &quot;\a&quot; &quot;Обработчик исключения возвратил неверное значение.&quot;)
<a name="l10708"></a>10708         GET_DESCR_ (EXCEPTION_IN_PAGE_ERROR,            &quot;\a&quot; &quot;Невозможно загрузить нужную страницу памяти.&quot;)
<a name="l10709"></a>10709         GET_DESCR_ (EXCEPTION_NONCONTINUABLE_EXCEPTION, &quot;\a&quot; &quot;Продолжение выполнения невозможно.&quot;)
<a name="l10710"></a>10710         GET_DESCR_ (EXCEPTION_SINGLE_STEP,              &quot;\a&quot; &quot;Выполнена инструкция машинного кода. Одна штука.&quot;)
<a name="l10711"></a>10711         GET_DESCR_ (EXCEPTION_STACK_OVERFLOW,           &quot;\a&quot; &quot;Ю-ху! Переполнение стека!&quot;)
<a name="l10712"></a>10712         GET_DESCR_ (EXCEPTION_GUARD_PAGE,               &quot;\a&quot; &quot;Попытка доступа к защищенной странице памяти.&quot;)
<a name="l10713"></a>10713         GET_DESCR_ (EXCEPTION_INVALID_HANDLE,           &quot;\a&quot; &quot;Неверный или уже закрытый дескриптор.&quot;)
<a name="l10714"></a>10714         GET_DESCR_ (STATUS_POSSIBLE_DEADLOCK,           &quot;\a&quot; &quot;Возможно, взаимная блокировка ресурсов.&quot;)
<a name="l10715"></a>10715 
<a name="l10716"></a>10716         GET_DESCR_ (EXCEPTION_FLT_STACK_CHECK,          &quot;\a&quot; &quot;Ошибка стека при операции с плавающей точкой.&quot;)
<a name="l10717"></a>10717         GET_DESCR_ (EXCEPTION_FLT_DENORMAL_OPERAND,     &quot; &quot;  &quot;Денормализация числа с плавающей точкой.&quot;)
<a name="l10718"></a>10718         GET_DESCR_ (EXCEPTION_FLT_DIVIDE_BY_ZERO,       &quot; &quot;  &quot;Деление на ноль при операции с плавающей точкой.&quot;)
<a name="l10719"></a>10719         GET_DESCR_ (EXCEPTION_FLT_INEXACT_RESULT,       &quot; &quot;  &quot;Неточный результат при операции с плавающей точкой.&quot;)
<a name="l10720"></a>10720         GET_DESCR_ (EXCEPTION_FLT_INVALID_OPERATION,    &quot; &quot;  &quot;Недопустимая операция с плавающей точкой.&quot;)
<a name="l10721"></a>10721         GET_DESCR_ (EXCEPTION_FLT_OVERFLOW,             &quot; &quot;  &quot;Переполнение при операции с плавающей точкой.&quot;)
<a name="l10722"></a>10722         GET_DESCR_ (EXCEPTION_FLT_UNDERFLOW,            &quot; &quot;  &quot;Потеря значимости при операции с плавающей точкой.&quot;)
<a name="l10723"></a>10723         GET_DESCR_ (STATUS_FLOAT_MULTIPLE_FAULTS,       &quot; &quot;  &quot;Множественные ошибки с плавающей точкой.&quot;)
<a name="l10724"></a>10724 
<a name="l10725"></a>10725         GET_DESCR_ (EXCEPTION_INT_DIVIDE_BY_ZERO,       &quot;\a&quot; &quot;Целочисленное деление на ноль.&quot;)
<a name="l10726"></a>10726         GET_DESCR_ (EXCEPTION_INT_OVERFLOW,             &quot;\a&quot; &quot;Переполнение при целочисленной операции.&quot;)
<a name="l10727"></a>10727 
<a name="l10728"></a>10728         GET_DESCR_ (EXCEPTION_CLR_FAILURE,              &quot;\a&quot; &quot;Сбой среды исполнения (CLR).&quot;)
<a name="l10729"></a>10729         GET_DESCR_ (STATUS_STACK_BUFFER_OVERRUN,        &quot;\a&quot; &quot;Переполнение стекового буфера!&quot;)
<a name="l10730"></a>10730         GET_DESCR_ (STATUS_ASSERTION_FAILURE,           &quot;\a&quot; &quot;Сработал assert. На этот раз из ядра.&quot;)
<a name="l10731"></a>10731         GET_DESCR_ (STATUS_WX86_BREAKPOINT,             &quot;\a&quot; &quot;Точка останова подсистемы эмуляции x86.&quot;)
<a name="l10732"></a>10732         GET_DESCR_ (RPC_S_UNKNOWN_IF,                   &quot;\a&quot; &quot;Неизвестный интерфейс удаленного вызова процедур (RPC).&quot;)
<a name="l10733"></a>10733         GET_DESCR_ (RPC_S_SERVER_UNAVAILABLE,           &quot;\a&quot; &quot;Сервер удаленного вызова процедур (RPC) недоступен.&quot;)
<a name="l10734"></a>10734         GET_DESCR_ (DBG_TERMINATE_THREAD,               &quot;\a&quot; &quot;Отладчик завершил поток сознания.&quot;)
<a name="l10735"></a>10735         GET_DESCR_ (DBG_TERMINATE_PROCESS,              &quot;\a&quot; &quot;Отладчик завершил процесс.&quot;)
<a name="l10736"></a>10736         GET_DESCR_ (DBG_CONTROL_C,                      &quot;\a&quot; &quot;Отладчик получил сигнал прерывания Control+C.&quot;)
<a name="l10737"></a>10737         GET_DESCR_ (DBG_CONTROL_BREAK,                  &quot;\a&quot; &quot;Отладчик получил сигнал прерывания Control+Break.&quot;)
<a name="l10738"></a>10738         GET_DESCR_ (DBG_THREAD_NAME,                    &quot; &quot;  &quot;Отладчик получил указание дать потоку имя.&quot;)
<a name="l10739"></a>10739         GET_DESCR_ (DBG_PRINTEXCEPTION_C,               &quot; &quot;  &quot;Отладчик вывел исключение по CTRL+C (OutputDebugStringA).&quot;)
<a name="l10740"></a>10740         GET_DESCR_ (DBG_PRINTEXCEPTION_WIDE_C,          &quot; &quot;  &quot;Отладчик вывел исключение по CTRL+C (OutputDebugStringW).&quot;)
<a name="l10741"></a>10741 
<a name="l10742"></a>10742         GET_DESCR_ (EXCEPTION_CPP_MSC,                  &quot; &quot;  &quot;Исключение С++, вызванное оператором throw.&quot;)
<a name="l10743"></a>10743         GET_DESCR_ (EXCEPTION_CPP_GCC,                  &quot; &quot;  &quot;Исключение С++, вызванное оператором throw.&quot;)
<a name="l10744"></a>10744         GET_DESCR_ (EXCEPTION_CPP_GCC_UNWIND,           &quot; &quot;  &quot;Исключение С++, вызванное во время раскрутки стека (rethrow?).&quot;)
<a name="l10745"></a>10745         GET_DESCR_ (EXCEPTION_CPP_GCC_FORCED,           &quot; &quot;  &quot;Исключение С++, вызванное нарушением магии.&quot;)
<a name="l10746"></a>10746         GET_DESCR_ (EXCEPTION_CPP_BORLAND_BUILDER,      &quot;\a&quot; &quot;Это скомпилилось под Билдер? O_O&quot;)
<a name="l10747"></a>10747         GET_DESCR_ (EXCEPTION_CPP_BORLAND_DELPHI,       &quot;\a&quot; &quot;Это же С++. Как это вышло?&quot;)
<a name="l10748"></a>10748 
<a name="l10749"></a>10749         default: $ break;
<a name="l10750"></a>10750         }
<a name="l10751"></a>10751 
<a name="l10752"></a>10752     <span class="preprocessor">#undef GET_DESCR_</span>
<a name="l10753"></a>10753 <span class="preprocessor"></span>
<a name="l10754"></a>10754 $   <span class="keywordflow">if</span> (sDescr)
<a name="l10755"></a>10755         {
<a name="l10756"></a>10756 $       PRINT_ (<span class="stringliteral">&quot;%s\n\n&quot;</span> <span class="stringliteral">&quot;#%ld: Исключение %s&quot;</span>, sDescr, _txSENumber, sCode);
<a name="l10757"></a>10757         }
<a name="l10758"></a>10758     <span class="keywordflow">else</span>
<a name="l10759"></a>10759         {
<a name="l10760"></a>10760 $       PRINT_ (<span class="stringliteral">&quot;\a#%ld: &quot;</span>, _txSENumber);
<a name="l10761"></a>10761 $       s += FormatMessage (FORMAT_MESSAGE_FROM_HMODULE | FORMAT_MESSAGE_IGNORE_INSERTS,
<a name="l10762"></a>10762                             GetModuleHandle (<span class="stringliteral">&quot;NTDLL.DLL&quot;</span>), code, MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),
<a name="l10763"></a>10763                             s, (DWORD) (size - (s-what)), NULL) - 2;
<a name="l10764"></a>10764 $       PRINT_ (<span class="stringliteral">&quot;\r\r&quot;</span>);
<a name="l10765"></a>10765         }
<a name="l10766"></a>10766 
<a name="l10767"></a>10767 $   PRINT_ (<span class="stringliteral">&quot; (0x%X) при выполнении кода по адресу&quot;</span>, code);
<a name="l10768"></a>10768 $   PRINT_ ((addr? <span class="stringliteral">&quot; 0x%p&quot;</span> : <span class="stringliteral">&quot; NULL&quot;</span>), addr);
<a name="l10769"></a>10769 
<a name="l10770"></a>10770 $   Win32::SYMBOL_INFO*     sym  = NULL;
<a name="l10771"></a>10771 $   Win32::IMAGEHLP_LINE64* line = NULL;
<a name="l10772"></a>10772 
<a name="l10773"></a>10773     <span class="keywordflow">if</span> (addr) {$ _txSymGetFromAddr (addr, &amp;sym, &amp;line); }
<a name="l10774"></a>10774 
<a name="l10775"></a>10775 $   <span class="keywordflow">if</span> (sym  &amp;&amp;                   *sym-&gt;Name)      PRINT_ (<span class="stringliteral">&quot; в функции %s()&quot;</span>, sym-&gt;Name);
<a name="l10776"></a>10776 $   <span class="keywordflow">if</span> (line &amp;&amp; line-&gt;FileName &amp;&amp; *line-&gt;FileName) PRINT_ (<span class="stringliteral">&quot; в файле %s на строке %u&quot;</span>, line-&gt;FileName, (<span class="keywordtype">unsigned</span>) line-&gt;LineNumber);
<a name="l10777"></a>10777 
<a name="l10778"></a>10778 $   <span class="keywordflow">if</span> (code == EXCEPTION_ACCESS_VIOLATION ||
<a name="l10779"></a>10779         code == EXCEPTION_IN_PAGE_ERROR)
<a name="l10780"></a>10780         {
<a name="l10781"></a>10781 $       PRINT_ (<span class="stringliteral">&quot;. Попытка &quot;</span>);
<a name="l10782"></a>10782 
<a name="l10783"></a>10783 $       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> op = 0xBADC0DE;
<a name="l10784"></a>10784 $       <span class="keyword">const</span> <span class="keywordtype">char</span>*  sOp = <span class="stringliteral">&quot;(действие не указано)&quot;</span>;
<a name="l10785"></a>10785 
<a name="l10786"></a>10786 $       <span class="keywordflow">if</span> (params &gt;= 1)
<a name="l10787"></a>10787             {
<a name="l10788"></a>10788 $           <span class="keywordflow">switch</span> (op = (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) info[0])
<a name="l10789"></a>10789                 {
<a name="l10790"></a>10790                 <span class="keywordflow">case</span> 0:  $ sOp = <span class="stringliteral">&quot;прочесть данные&quot;</span>;          <span class="keywordflow">break</span>;
<a name="l10791"></a>10791                 <span class="keywordflow">case</span> 1:  $ sOp = <span class="stringliteral">&quot;записать данные&quot;</span>;          <span class="keywordflow">break</span>;
<a name="l10792"></a>10792                 <span class="keywordflow">case</span> 8:  $ sOp = <span class="stringliteral">&quot;исполнить код&quot;</span>;            <span class="keywordflow">break</span>;
<a name="l10793"></a>10793                 <span class="keywordflow">default</span>: $ sOp = <span class="stringliteral">&quot;совершить операцию 0x%lX&quot;</span>; <span class="keywordflow">break</span>;
<a name="l10794"></a>10794                 }
<a name="l10795"></a>10795             }
<a name="l10796"></a>10796 
<a name="l10797"></a>10797 $       PRINT_ (sOp, op);
<a name="l10798"></a>10798 
<a name="l10799"></a>10799 $       <span class="keywordflow">if</span> (params &gt;= 2) {$ PRINT_ ((<span class="keywordtype">object</span>? <span class="stringliteral">&quot; по адресу 0x%p&quot;</span> : <span class="stringliteral">&quot; по адресу NULL&quot;</span>), <span class="keywordtype">object</span>); }
<a name="l10800"></a>10800         <span class="keywordflow">else</span>             {$ PRINT_ (<span class="stringliteral">&quot; (адрес не указан)&quot;</span>); }
<a name="l10801"></a>10801 
<a name="l10802"></a>10802 $       <span class="keywordflow">if</span> (code == EXCEPTION_IN_PAGE_ERROR)
<a name="l10803"></a>10803             {
<a name="l10804"></a>10804 $           PRINT_ (<span class="stringliteral">&quot;, ошибка ввода-вывода:&quot;</span>);
<a name="l10805"></a>10805 
<a name="l10806"></a>10806 $           <span class="keywordflow">if</span> (params &gt;= 3)
<a name="l10807"></a>10807                 {
<a name="l10808"></a>10808 $               <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ntstatus = (<span class="keywordtype">unsigned</span> long) info[2];
<a name="l10809"></a>10809 
<a name="l10810"></a>10810 $               PRINT_ (<span class="stringliteral">&quot; 0x%lX (&quot;</span>, ntstatus);
<a name="l10811"></a>10811 
<a name="l10812"></a>10812 $               s += FormatMessage (FORMAT_MESSAGE_FROM_HMODULE | FORMAT_MESSAGE_IGNORE_INSERTS,
<a name="l10813"></a>10813                                     GetModuleHandle (<span class="stringliteral">&quot;NTDLL.DLL&quot;</span>), ntstatus, MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),
<a name="l10814"></a>10814                                     s, (DWORD) (size - (s-what)), NULL) - 2;
<a name="l10815"></a>10815 $               PRINT_ (<span class="stringliteral">&quot;)&quot;</span>);
<a name="l10816"></a>10816                 }
<a name="l10817"></a>10817             <span class="keywordflow">else</span>
<a name="l10818"></a>10818                 {$ PRINT_ (<span class="stringliteral">&quot; (не указана)&quot;</span>); }
<a name="l10819"></a>10819             }
<a name="l10820"></a>10820         }
<a name="l10821"></a>10821 
<a name="l10822"></a>10822 $   HMODULE module = NULL;
<a name="l10823"></a>10823 $   _TX_CALL (Win32::GetModuleHandleEx, (GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, (<span class="keyword">const</span> <span class="keywordtype">char</span>*) addr, &amp;module));
<a name="l10824"></a>10824 
<a name="l10825"></a>10825 $   <span class="keywordflow">if</span> (module)
<a name="l10826"></a>10826         {
<a name="l10827"></a>10827 $       <span class="keyword">static</span> <span class="keywordtype">char</span> sModule [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l10828"></a>10828 $       <span class="keywordtype">int</span> ok = GetModuleFileName (module, sModule, <span class="keyword">sizeof</span> (sModule));
<a name="l10829"></a>10829 
<a name="l10830"></a>10830 $       <span class="keywordtype">char</span>* ext = (ok? strrchr (sModule, <span class="charliteral">&#39;.&#39;</span>) : NULL);
<a name="l10831"></a>10831 $       <span class="keywordflow">if</span> (ext) _strlwr_s (ext, <span class="keyword">sizeof</span> (sModule) - 1 - (ext - sModule));
<a name="l10832"></a>10832 
<a name="l10833"></a>10833         <span class="keywordflow">if</span> (ok) {$ PRINT_ (<span class="stringliteral">&quot; в модуле %s&quot;</span>,  sModule); }
<a name="l10834"></a>10834         <span class="keywordflow">else</span>    {$ PRINT_ (<span class="stringliteral">&quot; в модуле 0x%p&quot;</span>, module); }
<a name="l10835"></a>10835         }
<a name="l10836"></a>10836 
<a name="l10837"></a>10837 $   PRINT_ (<span class="stringliteral">&quot;.&quot;</span>);
<a name="l10838"></a>10838 
<a name="l10839"></a>10839 $   <span class="keywordflow">if</span> (_txSENumber &gt;= <a class="code" href="a00084.htm#ga15dc1a04b8701e2db400b005b7a17ced" title="Максимальное количество исключений в программе.">_TX_EXCEPTIONS_LIMIT</a>+0)
<a name="l10840"></a>10840         {$ PRINT_ (<span class="stringliteral">&quot; Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (%d).&quot;</span>,        <a class="code" href="a00084.htm#ga15dc1a04b8701e2db400b005b7a17ced" title="Максимальное количество исключений в программе.">_TX_EXCEPTIONS_LIMIT</a>+0); }
<a name="l10841"></a>10841 
<a name="l10842"></a>10842 $   <span class="keywordflow">if</span> (_txSEFatalNumber &gt;= <a class="code" href="a00084.htm#gaf274c058737ec7e680437d2a1cdcd7b6" title="Максимальное количество фатальных исключений.">_TX_FATAL_EXCEPTIONS_LIMIT</a>+0)
<a name="l10843"></a>10843         {$ PRINT_ (<span class="stringliteral">&quot; Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (%d).&quot;</span>, <a class="code" href="a00084.htm#gaf274c058737ec7e680437d2a1cdcd7b6" title="Максимальное количество фатальных исключений.">_TX_FATAL_EXCEPTIONS_LIMIT</a>+0); }
<a name="l10844"></a>10844 
<a name="l10845"></a>10845 $   PRINT_ (<span class="stringliteral">&quot; Спасибо %s(), что сообщил. Люблю его &lt;3&quot;</span>, func);
<a name="l10846"></a>10846 
<a name="l10847"></a>10847 $   <span class="keywordflow">if</span> (exc-&gt;ExceptionFlags &amp; EXCEPTION_NONCONTINUABLE)
<a name="l10848"></a>10848         {$ PRINT_ (<span class="stringliteral">&quot;\n\n&quot;</span> <span class="stringliteral">&quot;Ой, всё (EXCEPTION_NONCONTINUABLE).&quot;</span>); }
<a name="l10849"></a>10849 
<a name="l10850"></a>10850 $   <span class="keywordflow">if</span> (exc-&gt;ExceptionRecord)
<a name="l10851"></a>10851         {
<a name="l10852"></a>10852 $       PRINT_ (<span class="stringliteral">&quot;\n\n&quot;</span> <span class="stringliteral">&quot;Причина:&quot;</span> <span class="stringliteral">&quot;\n\n&quot;</span>);
<a name="l10853"></a>10853 $       s += _txDumpExceptionSEH (s, size - (s-what), exc-&gt;ExceptionRecord, func);
<a name="l10854"></a>10854         }
<a name="l10855"></a>10855 
<a name="l10856"></a>10856 $   <span class="keywordflow">if</span> (code == EXCEPTION_CPP_GCC        ||
<a name="l10857"></a>10857         code == EXCEPTION_CPP_GCC_UNWIND ||
<a name="l10858"></a>10858         code == EXCEPTION_CPP_GCC_FORCED ||
<a name="l10859"></a>10859         code == EXCEPTION_CPP_MSC)
<a name="l10860"></a>10860         {
<a name="l10861"></a>10861 $       s += _txDumpExceptionCPP (s,    size - (s-what), code, params, info);
<a name="l10862"></a>10862         }
<a name="l10863"></a>10863 
<a name="l10864"></a>10864 <span class="preprocessor">    #undef PRINT_</span>
<a name="l10865"></a>10865 <span class="preprocessor"></span>
<a name="l10866"></a>10866 $   <span class="keywordflow">while</span> (s &gt; what &amp;&amp; s[-1] == <span class="charliteral">&#39;\n&#39;</span>) s--;
<a name="l10867"></a>10867 $   <span class="keywordflow">if</span> (s &gt; what) s += _tx_snprintf_s (s, size - (s-what), <span class="stringliteral">&quot;\n\n&quot;</span>);
<a name="l10868"></a>10868 
<a name="l10869"></a>10869 $   <span class="keywordflow">return</span> s - what;
<a name="l10870"></a>10870     }
<a name="l10871"></a>10871 
<a name="l10872"></a>10872 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l10873"></a>10873 
<a name="l10874"></a>10874 intptr_t _txDumpExceptionCPP (<span class="keywordtype">char</span> what[], intptr_t size,
<a name="l10875"></a>10875                               <span class="keywordtype">unsigned</span> code <span class="comment">/*= 0*/</span>, <span class="keywordtype">unsigned</span> params <span class="comment">/*= 0*/</span>, <span class="keyword">const</span> ULONG_PTR info[] <span class="comment">/*= NULL*/</span>)
<a name="l10876"></a>10876     {
<a name="l10877"></a>10877 $6  assert (what);
<a name="l10878"></a>10878 $   assert (size &gt;= 0);
<a name="l10879"></a>10879 
<a name="l10880"></a>10880 $   <span class="keywordtype">char</span>* s = what;
<a name="l10881"></a>10881 
<a name="l10882"></a>10882 $   <span class="keywordflow">switch</span> (code)
<a name="l10883"></a>10883         {
<a name="l10884"></a>10884 <span class="preprocessor">        #if defined (_GCC_VER)</span>
<a name="l10885"></a>10885 <span class="preprocessor"></span>
<a name="l10886"></a>10886         <span class="keywordflow">case</span> EXCEPTION_CPP_GCC:
<a name="l10887"></a>10887         <span class="keywordflow">case</span> EXCEPTION_CPP_GCC_UNWIND:
<a name="l10888"></a>10888         <span class="keywordflow">case</span> EXCEPTION_CPP_GCC_FORCED:
<a name="l10889"></a>10889             {
<a name="l10890"></a>10890             <span class="comment">// See: [1] http://llvm.org/svn/llvm-project/libcxxabi/trunk/src/cxa_exception.cpp</span>
<a name="l10891"></a>10891             <span class="comment">//      [2] http://github.com/gcc-mirror/gcc/blob/master/libgcc/unwind-seh.c, lines 51-55 and below</span>
<a name="l10892"></a>10892             <span class="comment">//      [3] http://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_throw.cc, __cxa_throw, line 59 and below</span>
<a name="l10893"></a>10893             <span class="comment">//      [4] http://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/unwind-cxx.h, __cxa_exception, line 58 and below</span>
<a name="l10894"></a>10894             <span class="comment">//      and figure above near ABI::__cxa_exception definition in this file</span>
<a name="l10895"></a>10895 
<a name="l10896"></a>10896 $           <span class="keyword">const</span> std::type_info* type   = NULL;
<a name="l10897"></a>10897 $           <span class="keywordtype">void</span>*                 <span class="keywordtype">object</span> = NULL;
<a name="l10898"></a>10898 
<a name="l10899"></a>10899 $           <span class="keywordflow">if</span> (params &gt;= 1)
<a name="l10900"></a>10900                 {
<a name="l10901"></a>10901 $               _Unwind_Exception*    unwind_exception = (_Unwind_Exception*) info[0];
<a name="l10902"></a>10902 $               ABI::__cxa_exception* cxa_exception    = (ABI::__cxa_exception*) (unwind_exception + 1) - 1;
<a name="l10903"></a>10903 
<a name="l10904"></a>10904 $               type   = cxa_exception-&gt;exceptionType;
<a name="l10905"></a>10905 $               <span class="keywordtype">object</span> = cxa_exception + 1;
<a name="l10906"></a>10906                 }
<a name="l10907"></a>10907 
<a name="l10908"></a>10908 $           s += _txDumpExceptionObj (s, size - (s-what), <span class="keywordtype">object</span>, 0, type);
<a name="l10909"></a>10909             }
<a name="l10910"></a>10910 $           <span class="keywordflow">break</span>;
<a name="l10911"></a>10911 
<a name="l10912"></a>10912         <span class="keywordflow">case</span> 0:  <span class="comment">// Not called within SEH chain</span>
<a name="l10913"></a>10913             {
<a name="l10914"></a>10914             <span class="comment">// From: [1] http://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_type.cc</span>
<a name="l10915"></a>10915             <span class="comment">//       [2] http://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/vterminate.cc</span>
<a name="l10916"></a>10916 
<a name="l10917"></a>10917             <span class="keyword">using namespace </span>abi;
<a name="l10918"></a>10918 
<a name="l10919"></a>10919 $           ABI::__cxa_exception* cxa_exception = __cxa_get_globals() -&gt; caughtExceptions;
<a name="l10920"></a>10920 
<a name="l10921"></a>10921 $           <span class="keywordflow">if</span> (cxa_exception &amp;&amp; (cxa_exception-&gt;unwindHeader.exception_class &amp; 1))  <span class="comment">// Dependent exception, case B, see pic above</span>
<a name="l10922"></a>10922                 {
<a name="l10923"></a>10923 $               cxa_exception = (((ABI::__cxa_exception*) (&amp;cxa_exception-&gt;unwindHeader + 1) - 1) -&gt; primaryException) - 1;
<a name="l10924"></a>10924                 }
<a name="l10925"></a>10925 
<a name="l10926"></a>10926 $           <span class="keywordflow">if</span> (cxa_exception)
<a name="l10927"></a>10927                 {
<a name="l10928"></a>10928 $               <a class="code" href="a00080.htm#ga14fecb1c008314444a74c1fe7d9a113b" title="Выполняет команду (вычисляет выражение) и проверяет результат.">verify</a> (cxa_exception-&gt;exceptionType == abi::__cxa_current_exception_type());
<a name="l10929"></a>10929 
<a name="l10930"></a>10930 $               s += _txDumpExceptionObj (s, size, cxa_exception + 1, 0, cxa_exception-&gt;exceptionType);
<a name="l10931"></a>10931                 }
<a name="l10932"></a>10932             }
<a name="l10933"></a>10933 $           <span class="keywordflow">break</span>;
<a name="l10934"></a>10934 
<a name="l10935"></a>10935 <span class="preprocessor">        #elif defined (_MSC_VER)</span>
<a name="l10936"></a>10936 <span class="preprocessor"></span>
<a name="l10937"></a>10937         <span class="keywordflow">case</span> EXCEPTION_CPP_MSC:
<a name="l10938"></a>10938             {
<a name="l10939"></a>10939             <span class="comment">// See [1] http://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273</span>
<a name="l10940"></a>10940             <span class="comment">//     [2] http://www.openrce.org/articles/full_view/21</span>
<a name="l10941"></a>10941             <span class="comment">//     [3] http://www.openrce.org/articles/full_view/23</span>
<a name="l10942"></a>10942             <span class="comment">//     [4] http://yurichev.com/mirrors/RE/Recon-2012-Skochinsky-Compiler-Internals.pdf</span>
<a name="l10943"></a>10943 
<a name="l10944"></a>10944 $           <span class="keyword">const</span> std::type_info* type   = NULL;
<a name="l10945"></a>10945 $           <span class="keywordtype">void</span>*                 <span class="keywordtype">object</span> = (params &gt;= 2)? (<span class="keywordtype">void</span>*) info[1] : NULL;
<a name="l10946"></a>10946 $           <span class="keywordtype">size_t</span>                szObj  = 0;
<a name="l10947"></a>10947 
<a name="l10948"></a>10948 $           <span class="keywordflow">if</span> (params &gt;= 3 &amp;&amp;
<a name="l10949"></a>10949                (info[0] == EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER1 ||
<a name="l10950"></a>10950                 info[0] == EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER2 ||
<a name="l10951"></a>10951                 info[0] == EXCEPTION_CPP_MSC_EH_MAGIC_NUMBER3 ||
<a name="l10952"></a>10952                 info[0] == EXCEPTION_CPP_MSC_EH_PURE_MAGIC_NUMBER1))
<a name="l10953"></a>10953                 {
<a name="l10954"></a>10954 $               <span class="keyword">auto</span> throwInfo = (<span class="keyword">const</span> Win32::ThrowInfo*) info[2];
<a name="l10955"></a>10955 
<a name="l10956"></a>10956 $               <span class="keywordflow">if</span> (throwInfo &amp;&amp; throwInfo-&gt;pCatchableTypeArray)
<a name="l10957"></a>10957                     {
<a name="l10958"></a>10958 $                   HMODULE module = (params &gt;= 4)? (HMODULE) info[3] : NULL;
<a name="l10959"></a>10959 
<a name="l10960"></a>10960 <span class="preprocessor">                    #define RVA_(type, addr)  ( (type) ((uintptr_t) module + (uintptr_t) (addr)) )</span>
<a name="l10961"></a>10961 <span class="preprocessor"></span>
<a name="l10962"></a>10962 $                   <span class="keyword">const</span> Win32::CatchableTypeArray* cArray = RVA_(<span class="keyword">const</span> Win32::CatchableTypeArray*, throwInfo-&gt;pCatchableTypeArray);
<a name="l10963"></a>10963 $                   <span class="keyword">const</span> Win32::CatchableType*      cType  = RVA_(<span class="keyword">const</span> Win32::CatchableType*,      cArray-&gt;arrayOfCatchableTypes[0]);
<a name="l10964"></a>10964 
<a name="l10965"></a>10965 $                   type  = RVA_(<span class="keyword">const</span> std::type_info*, cType-&gt;pType);
<a name="l10966"></a>10966 $                   szObj = cType-&gt;sizeOrOffset;
<a name="l10967"></a>10967 
<a name="l10968"></a>10968 <span class="preprocessor">                    #undef  RVA_</span>
<a name="l10969"></a>10969 <span class="preprocessor"></span>                    }
<a name="l10970"></a>10970                 }
<a name="l10971"></a>10971 
<a name="l10972"></a>10972 $           s += _txDumpExceptionObj (s, size - (s-what), <span class="keywordtype">object</span>, szObj, type);
<a name="l10973"></a>10973             }
<a name="l10974"></a>10974             <span class="keywordflow">break</span>;
<a name="l10975"></a>10975 
<a name="l10976"></a>10976         <span class="keywordflow">case</span> 0:  <span class="comment">// Not called within SEH chain</span>
<a name="l10977"></a>10977 
<a name="l10978"></a>10978             <span class="comment">// signal() handlers or unexpected()/terminate() are called after Vectored Exception in MSC:</span>
<a name="l10979"></a>10979             <span class="comment">//</span>
<a name="l10980"></a>10980             <span class="comment">// terminate() is called by __scrt_unhandled_exception_filter() in case of MSC exception.</span>
<a name="l10981"></a>10981             <span class="comment">// See C:\Bin\Microsoft Visual Studio 14.0\VC\crt\src\vcruntime\utility_desktop.cpp</span>
<a name="l10982"></a>10982             <span class="comment">//</span>
<a name="l10983"></a>10983             <span class="comment">// signal() handlers are called by _seh_filter_exe(), which is called by _mainCRTStartup() in case of exception.</span>
<a name="l10984"></a>10984             <span class="comment">// See C:\Bin\Microsoft Visual Studio 14.0\VC\crt\src\vcruntime\mcrtexe.cpp</span>
<a name="l10985"></a>10985             <span class="comment">// and C:\Bin\Windows Kits\10\Source\10.0.10240.0\ucrt\misc\exception_filter.cpp</span>
<a name="l10986"></a>10986             <span class="comment">// and http://msdn.microsoft.com/en-us/library/ff730818.aspx.</span>
<a name="l10987"></a>10987             <span class="comment">//</span>
<a name="l10988"></a>10988             <span class="comment">// So _txDumpSE information should have been recorded during previous call. Now do nothing.</span>
<a name="l10989"></a>10989 
<a name="l10990"></a>10990 $           <span class="keywordflow">break</span>;
<a name="l10991"></a>10991 
<a name="l10992"></a>10992 <span class="preprocessor">        #endif</span>
<a name="l10993"></a>10993 <span class="preprocessor"></span>
<a name="l10994"></a>10994         <span class="keywordflow">default</span>:
<a name="l10995"></a>10995 $           <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;ERROR: Wrong call to %s: Unknown exception code 0x%08X\n&quot;</span>, <a class="code" href="a00080.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a>, code);
<a name="l10996"></a>10996 $           <span class="keywordflow">break</span>;
<a name="l10997"></a>10997         }
<a name="l10998"></a>10998 
<a name="l10999"></a>10999 $   <span class="keywordflow">while</span> (s &gt; what &amp;&amp; s[-1] == <span class="charliteral">&#39;\n&#39;</span>) s--;
<a name="l11000"></a>11000 $   <span class="keywordflow">if</span> (s &gt; what) s += _tx_snprintf_s (s, size - (s - what), <span class="stringliteral">&quot;\n\n&quot;</span>);
<a name="l11001"></a>11001 
<a name="l11002"></a>11002 $   <span class="keywordflow">return</span> (s - what);
<a name="l11003"></a>11003     }
<a name="l11004"></a>11004 
<a name="l11005"></a>11005 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11006"></a>11006 
<a name="l11007"></a>11007 intptr_t _txDumpExceptionObj (<span class="keywordtype">char</span> what[], intptr_t size, <span class="keywordtype">void</span>* <span class="keywordtype">object</span>, <span class="keywordtype">size_t</span> sizeObj, <span class="keyword">const</span> std::type_info* type)
<a name="l11008"></a>11008     {
<a name="l11009"></a>11009 $6  assert (what);
<a name="l11010"></a>11010 $   assert (size &gt; 0);
<a name="l11011"></a>11011 
<a name="l11012"></a>11012 $   <span class="keyword">static</span> <span class="keywordtype">char</span>*  s     = NULL; s     = what;
<a name="l11013"></a>11013 $   <span class="keyword">static</span> <span class="keywordtype">size_t</span> szObj = 0;    szObj = sizeObj;
<a name="l11014"></a>11014 
<a name="l11015"></a>11015 <span class="preprocessor">    #define PRINT_(...)  s += _tx_snprintf_s (s, size - (s - what), ##__VA_ARGS__)</span>
<a name="l11016"></a>11016 <span class="preprocessor"></span>
<a name="l11017"></a>11017 $   PRINT_ (<span class="stringliteral">&quot;\n\n&quot;</span> <span class="stringliteral">&quot;Объект исключения C++:&quot;</span>);
<a name="l11018"></a>11018 
<a name="l11019"></a>11019 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* mangledName = (type)? type-&gt;name() : NULL;
<a name="l11020"></a>11020 
<a name="l11021"></a>11021 $   <span class="keywordtype">char</span>* typeName = NULL;
<a name="l11022"></a>11022 $   <span class="keywordtype">int</span> err = 1;
<a name="l11023"></a>11023 
<a name="l11024"></a>11024 <span class="preprocessor">    #if defined (_GCC_VER)</span>
<a name="l11025"></a>11025 <span class="preprocessor"></span>$   typeName = ::abi::__cxa_demangle (mangledName, 0, 0, &amp;err);
<a name="l11026"></a>11026 <span class="preprocessor">    #endif</span>
<a name="l11027"></a>11027 <span class="preprocessor"></span>
<a name="l11028"></a>11028 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* name = (!err &amp;&amp; typeName)? typeName : mangledName;
<a name="l11029"></a>11029 
<a name="l11030"></a>11030 $   <span class="keywordflow">if</span> (name &amp;&amp;
<a name="l11031"></a>11031        (strcmp (name, <span class="stringliteral">&quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt;&quot;</span>)           == 0 ||
<a name="l11032"></a>11032         strcmp (name, <span class="stringliteral">&quot;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&quot;</span>)                   == 0))
<a name="l11033"></a>11033         {$ name = <span class="stringliteral">&quot;std::string&quot;</span>; }
<a name="l11034"></a>11034 
<a name="l11035"></a>11035 $   <span class="keywordflow">if</span> (name &amp;&amp;
<a name="l11036"></a>11036        (strcmp (name, <span class="stringliteral">&quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; *&quot;</span>)         == 0 ||
<a name="l11037"></a>11037         strcmp (name, <span class="stringliteral">&quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; * __ptr64&quot;</span>) == 0 ||
<a name="l11038"></a>11038         strcmp (name, <span class="stringliteral">&quot;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&quot;</span>)                  == 0))
<a name="l11039"></a>11039         {$ name = <span class="stringliteral">&quot;std::string*&quot;</span>; }
<a name="l11040"></a>11040 
<a name="l11041"></a>11041     <span class="keywordflow">if</span> (name) {$ PRINT_ (<span class="stringliteral">&quot; %s&quot;</span>, name); }
<a name="l11042"></a>11042 
<a name="l11043"></a>11043 <span class="preprocessor">    #if defined (_GCC_VER)</span>
<a name="l11044"></a>11044 <span class="preprocessor"></span>$   free (typeName);
<a name="l11045"></a>11045 <span class="preprocessor">    #endif</span>
<a name="l11046"></a>11046 <span class="preprocessor"></span>
<a name="l11047"></a>11047 $   err = 0;
<a name="l11048"></a>11048 $   <span class="keywordflow">if</span> (mangledName)
<a name="l11049"></a>11049         {
<a name="l11050"></a>11050         <span class="keywordflow">if</span> (_txSetJmp())
<a name="l11051"></a>11051             {
<a name="l11052"></a>11052 <span class="preprocessor">            #define PRINT_VAL_(fmt, typ, ...)                                                                            \</span>
<a name="l11053"></a>11053 <span class="preprocessor">                else if (*type == typeid (      typ       )) {$ PRINT_ (&quot; = &quot; #fmt, (* (typ* ) object) __VA_ARGS__); } \</span>
<a name="l11054"></a>11054 <span class="preprocessor">                else if (*type == typeid (const typ       )) {$ PRINT_ (&quot; = &quot; #fmt, (* (typ* ) object) __VA_ARGS__); } \</span>
<a name="l11055"></a>11055 <span class="preprocessor">                else if (*type == typeid (      typ*      )) {$ PRINT_ (&quot; = &quot; #fmt, (**(typ**) object) __VA_ARGS__); } \</span>
<a name="l11056"></a>11056 <span class="preprocessor">                else if (*type == typeid (const typ*      )) {$ PRINT_ (&quot; = &quot; #fmt, (**(typ**) object) __VA_ARGS__); } \</span>
<a name="l11057"></a>11057 <span class="preprocessor">                else if (*type == typeid (      typ* const)) {$ PRINT_ (&quot; = &quot; #fmt, (**(typ**) object) __VA_ARGS__); } \</span>
<a name="l11058"></a>11058 <span class="preprocessor">                else if (*type == typeid (const typ* const)) {$ PRINT_ (&quot; = &quot; #fmt, (**(typ**) object) __VA_ARGS__); }</span>
<a name="l11059"></a>11059 <span class="preprocessor"></span>
<a name="l11060"></a>11060             <span class="keywordflow">if</span> (<span class="keyword">false</span>) ;
<a name="l11061"></a>11061             PRINT_VAL_ (<span class="stringliteral">&quot;%s&quot;</span>, <span class="keywordtype">char</span>*)  PRINT_VAL_ (&#39;%c&#39;, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)   PRINT_VAL_ (%s,   <span class="keywordtype">bool</span>, ? &quot;true&quot; : &quot;false&quot;)
<a name="l11062"></a>11062             PRINT_VAL_ ( %d,  <span class="keywordtype">int</span>)    PRINT_VAL_ ( %u,  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)    PRINT_VAL_ (%g,   <span class="keywordtype">float</span>)
<a name="l11063"></a>11063             PRINT_VAL_ ( %hd, <span class="keywordtype">short</span>)  PRINT_VAL_ ( %hu, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>)  PRINT_VAL_ (%lg,  <span class="keywordtype">double</span>)
<a name="l11064"></a>11064             PRINT_VAL_ ( %ld, <span class="keywordtype">long</span>)   PRINT_VAL_ ( %lu, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)   PRINT_VAL_ (&#39;%c&#39;, <span class="keywordtype">char</span>)
<a name="l11065"></a>11065             PRINT_VAL_ (&quot;%s&quot;, std::<span class="keywordtype">string</span>, .c_str())
<a name="l11066"></a>11066 
<a name="l11067"></a>11067             else if (std::exception* e = dynamic_cast &lt;std::exception*&gt; ( (std::exception* ) <span class="keywordtype">object</span>))
<a name="l11068"></a>11068                 {
<a name="l11069"></a>11069 $               PRINT_ (<span class="stringliteral">&quot;, what(): \&quot;%s\&quot;&quot;</span>, e-&gt;what());
<a name="l11070"></a>11070                 }
<a name="l11071"></a>11071             <span class="keywordflow">else</span>
<a name="l11072"></a>11072                 {$ err = 1; }
<a name="l11073"></a>11073             }
<a name="l11074"></a>11074         <span class="keywordflow">else</span>
<a name="l11075"></a>11075             {$ err = 2; }
<a name="l11076"></a>11076         }
<a name="l11077"></a>11077 
<a name="l11078"></a>11078 $   _txClearJmp();
<a name="l11079"></a>11079 
<a name="l11080"></a>11080 $   <span class="keywordflow">if</span> (err &amp;&amp; <span class="keywordtype">object</span> &amp;&amp; szObj)
<a name="l11081"></a>11081         {
<a name="l11082"></a>11082 $       <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* buf = (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) <span class="keywordtype">object</span>;
<a name="l11083"></a>11083 
<a name="l11084"></a>11084 $       <span class="keywordflow">if</span> (szObj &gt;= 64) szObj = 64;
<a name="l11085"></a>11085 
<a name="l11086"></a>11086 $       PRINT_ (<span class="stringliteral">&quot;, дамп: [&quot;</span>);
<a name="l11087"></a>11087 $       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; szObj; i++) PRINT_ (<span class="stringliteral">&quot;%c&quot;</span>, (isprint (buf[i]) &amp;&amp; !iscntrl (buf[i]))? buf[i] : <span class="charliteral">&#39;.&#39;</span> );
<a name="l11088"></a>11088 
<a name="l11089"></a>11089 $       PRINT_ (<span class="stringliteral">&quot;]&quot;</span>);
<a name="l11090"></a>11090 $       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; szObj; i++) PRINT_ (<span class="stringliteral">&quot; %02X&quot;</span>, buf[i]);
<a name="l11091"></a>11091 
<a name="l11092"></a>11092 $       err = 0;
<a name="l11093"></a>11093         }
<a name="l11094"></a>11094 
<a name="l11095"></a>11095 $   <span class="keywordflow">if</span> (err)
<a name="l11096"></a>11096         {$ PRINT_ (<span class="stringliteral">&quot; = ???&quot;</span>); }
<a name="l11097"></a>11097 
<a name="l11098"></a>11098 $   PRINT_ ((<span class="keywordtype">object</span>? <span class="stringliteral">&quot;%sего адрес 0x%p.&quot;</span> : <span class="stringliteral">&quot;%sего адрес NULL.&quot;</span>), ((typeName || mangledName)? <span class="stringliteral">&quot;, &quot;</span> : <span class="stringliteral">&quot;&quot;</span>), <span class="keywordtype">object</span>);
<a name="l11099"></a>11099 
<a name="l11100"></a>11100 <span class="preprocessor">    #undef PRINT_VAL_</span>
<a name="l11101"></a>11101 <span class="preprocessor"></span><span class="preprocessor">    #undef PRINT_</span>
<a name="l11102"></a>11102 <span class="preprocessor"></span>
<a name="l11103"></a>11103 $   <span class="keywordflow">return</span> s - what;
<a name="l11104"></a>11104     }
<a name="l11105"></a>11105 
<a name="l11106"></a>11106 <span class="comment">//}</span>
<a name="l11107"></a>11107 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11108"></a>11108 
<a name="l11109"></a>11109 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11110"></a>11110 <span class="comment">//{          Stack trace and debug info access</span>
<a name="l11111"></a>11111 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11112"></a>11112 
<a name="l11113"></a>11113 <span class="keyword">const</span> <span class="keywordtype">char</span>* _txCaptureStackBackTrace (<span class="keywordtype">int</span> framesToSkip <span class="comment">/*= 0*/</span>, <span class="keywordtype">bool</span> readSource <span class="comment">/*= true*/</span>,
<a name="l11114"></a>11114                                       CONTEXT* context <span class="comment">/*= NULL*/</span>, HANDLE thread <span class="comment">/*= GetCurrentThread()*/</span>)
<a name="l11115"></a>11115     {
<a name="l11116"></a>11116 $6  <span class="keyword">const</span> <span class="keywordtype">int</span> maxFrames = 62;  <span class="comment">// MS says: &lt; 63</span>
<a name="l11117"></a>11117 $   <span class="keyword">static</span> <span class="keywordtype">char</span> trace [(MAX_PATH + 1024+1) * maxFrames] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11118"></a>11118 
<a name="l11119"></a>11119     <span class="keywordflow">if</span> (framesToSkip == -1) {$ <span class="keywordflow">return</span> trace; }
<a name="l11120"></a>11120 
<a name="l11121"></a>11121 $   <span class="keyword">static</span> <span class="keywordtype">void</span>* capture [maxFrames] = {};
<a name="l11122"></a>11122 $   <span class="keywordtype">int</span> frames = _txStackWalk (framesToSkip + !context, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (capture), capture, NULL, context, thread);
<a name="l11123"></a>11123 
<a name="l11124"></a>11124 $   memset (trace, 0, <span class="keyword">sizeof</span> (trace));
<a name="l11125"></a>11125 $   <span class="keywordtype">char</span>* s = trace;
<a name="l11126"></a>11126 
<a name="l11127"></a>11127 <span class="preprocessor">    #define PRINT_(...)  s += _tx_snprintf_s (s, sizeof (trace) - 1 - 3 - (s-trace), ##__VA_ARGS__)</span>
<a name="l11128"></a>11128 <span class="preprocessor"></span>
<a name="l11129"></a>11129 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = 0; i &lt; frames; i++)
<a name="l11130"></a>11130         {
<a name="l11131"></a>11131 $       <span class="keywordtype">void</span>* addr = capture[i];
<a name="l11132"></a>11132 
<a name="l11133"></a>11133 $       Win32::SYMBOL_INFO*     sym    = NULL;
<a name="l11134"></a>11134 $       Win32::IMAGEHLP_LINE64* line   = NULL;
<a name="l11135"></a>11135 $       <span class="keyword">const</span> <span class="keywordtype">char</span>*             module = NULL;
<a name="l11136"></a>11136 $       <span class="keyword">const</span> <span class="keywordtype">char</span>*             source = NULL;
<a name="l11137"></a>11137 $       <span class="keywordtype">bool</span>                    inTX   = <span class="keyword">false</span>;
<a name="l11138"></a>11138 
<a name="l11139"></a>11139         <span class="keywordflow">if</span> (addr)                {$ inTX = _txSymGetFromAddr ((<span class="keywordtype">char</span>*) addr - 1, &amp;sym, &amp;line, &amp;module);          }
<a name="l11140"></a>11140         <span class="keywordflow">if</span> (readSource &amp;&amp; !inTX) {$        _txSymGetFromAddr ((<span class="keywordtype">void</span>*) 1,        NULL, NULL,  NULL, &amp;source, 2); }
<a name="l11141"></a>11141 
<a name="l11142"></a>11142 $       <span class="keywordtype">int</span> nl = 0;
<a name="l11143"></a>11143 $       <span class="keywordflow">while</span> (s &gt; trace &amp;&amp; s[-1] == <span class="charliteral">&#39;\n&#39;</span>) { s--; nl++; }
<a name="l11144"></a>11144 
<a name="l11145"></a>11145 <span class="preprocessor">        #if !defined (_TX_FULL_STACKTRACE)</span>
<a name="l11146"></a>11146 <span class="preprocessor"></span>
<a name="l11147"></a>11147 $       <span class="keywordflow">if</span> (! ((sym &amp;&amp; *sym-&gt;Name) || (line &amp;&amp; ((line-&gt;FileName &amp;&amp; *line-&gt;FileName) || line-&gt;LineNumber))))
<a name="l11148"></a>11148             {$ <span class="keywordflow">continue</span>; }
<a name="l11149"></a>11149 
<a name="l11150"></a>11150 <span class="preprocessor">        #endif</span>
<a name="l11151"></a>11151 <span class="preprocessor"></span>
<a name="l11152"></a>11152 $       PRINT_ (<span class="stringliteral">&quot;%s#%2d 0x%p&quot;</span>, ((n)? ((source || nl)? <span class="stringliteral">&quot;\n\n&quot;</span> : <span class="stringliteral">&quot;\n&quot;</span>) : <span class="stringliteral">&quot;&quot;</span>), i, addr);
<a name="l11153"></a>11153 $       n++;
<a name="l11154"></a>11154 
<a name="l11155"></a>11155         <span class="keywordflow">if</span> (addr ==                    0)          {$ PRINT_ (<span class="stringliteral">&quot; [Неверный фрейм]&quot;</span>);        <span class="keywordflow">break</span>; }
<a name="l11156"></a>11156         <span class="keywordflow">if</span> (addr == (<span class="keywordtype">void</span>*)           -1)          {$ PRINT_ (<span class="stringliteral">&quot; [Странный фрейм]&quot;</span>);        <span class="keywordflow">break</span>; }
<a name="l11157"></a>11157         <span class="keywordflow">if</span> (addr == (<span class="keywordtype">void</span>*)(uintptr_t) 0xBAADF00D) {$ PRINT_ (<span class="stringliteral">&quot; [Мусор от LocalAlloc()]&quot;</span>); <span class="keywordflow">break</span>; }
<a name="l11158"></a>11158 
<a name="l11159"></a>11159         <span class="keywordflow">if</span> (module)                                {$ PRINT_ (<span class="stringliteral">&quot; in %s%s&quot;</span>,     module, ((sym &amp;&amp; *sym-&gt;Name)? <span class="stringliteral">&quot;: &quot;</span> : <span class="stringliteral">&quot;&quot;</span>)); }
<a name="l11160"></a>11160         <span class="keywordflow">if</span> (sym  &amp;&amp; *sym-&gt;Name)                    {$ PRINT_ (<span class="stringliteral">&quot;%s()&quot;</span>,         sym-&gt;Name);                                }
<a name="l11161"></a>11161         <span class="keywordflow">if</span> (line &amp;&amp; line-&gt;FileName)                {$ PRINT_ (<span class="stringliteral">&quot; at %s&quot;</span>,       line-&gt;FileName);                           }
<a name="l11162"></a>11162         <span class="keywordflow">if</span> (line &amp;&amp; line-&gt;LineNumber)              {$ PRINT_ (<span class="stringliteral">&quot; (%d)&quot;</span>,  (<span class="keywordtype">int</span>) line-&gt;LineNumber);                         }
<a name="l11163"></a>11163         <span class="keywordflow">if</span> (source)                                {$ PRINT_ (<span class="stringliteral">&quot;:\n\n&quot;</span> <span class="stringliteral">&quot;%s\n&quot;</span>, source);                                   }
<a name="l11164"></a>11164 
<a name="l11165"></a>11165         <span class="keywordflow">if</span> (sym &amp;&amp; strcmp (sym-&gt;Name , <span class="stringliteral">&quot;main&quot;</span>) == 0) {$ <span class="keywordflow">break</span>; }
<a name="l11166"></a>11166         }
<a name="l11167"></a>11167 
<a name="l11168"></a>11168 <span class="preprocessor">    #if defined (_MSC_VER)</span>
<a name="l11169"></a>11169 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 28199)  // Using possibly uninitialized memory &#39;*s&#39;</span>
<a name="l11170"></a>11170 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l11171"></a>11171 <span class="preprocessor"></span>
<a name="l11172"></a>11172 $   <span class="keywordflow">while</span> (s &gt; trace &amp;&amp; s[-1] == <span class="charliteral">&#39;\n&#39;</span>) s--;
<a name="l11173"></a>11173 $   *s = 0;
<a name="l11174"></a>11174 
<a name="l11175"></a>11175 <span class="preprocessor">    #if defined (_MSC_VER)</span>
<a name="l11176"></a>11176 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 28199)  // Using possibly uninitialized memory &#39;*s&#39;</span>
<a name="l11177"></a>11177 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l11178"></a>11178 <span class="preprocessor"></span>
<a name="l11179"></a>11179 <span class="preprocessor">    #undef PRINT_</span>
<a name="l11180"></a>11180 <span class="preprocessor"></span>
<a name="l11181"></a>11181 $   s += _tx_snprintf_s (s, <span class="keyword">sizeof</span> (trace) - 1 - (s-trace), <span class="stringliteral">&quot;&quot;</span>);
<a name="l11182"></a>11182 
<a name="l11183"></a>11183 $   <span class="keywordflow">return</span> trace;
<a name="l11184"></a>11184     }
<a name="l11185"></a>11185 
<a name="l11186"></a>11186 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11187"></a>11187 
<a name="l11188"></a>11188 <span class="comment">// Stack WALKING if the program is DEAD. Dead, Carl!</span>
<a name="l11189"></a>11189 
<a name="l11190"></a>11190 <span class="keywordtype">int</span> _txStackWalk (<span class="keywordtype">int</span> framesToSkip, <span class="keywordtype">size_t</span> szCapture, <span class="keywordtype">void</span>* capture[], <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* <span class="comment">/*backTraceHash*/</span>,
<a name="l11191"></a>11191                   CONTEXT* context <span class="comment">/*= NULL*/</span>, HANDLE thread <span class="comment">/* = GetCurrentThread()*/</span>)
<a name="l11192"></a>11192     {
<a name="l11193"></a>11193 $6  <span class="keyword">namespace </span>MinGW = Win32::MinGW;
<a name="l11194"></a>11194 
<a name="l11195"></a>11195 $   assert (capture);
<a name="l11196"></a>11196 
<a name="l11197"></a>11197 $   <span class="keywordtype">int</span> cpu = 0;
<a name="l11198"></a>11198 
<a name="l11199"></a>11199 $   Win32::STACKFRAME64 frame = {};
<a name="l11200"></a>11200 $   frame.AddrPC.Mode = frame.AddrStack.Mode = frame.AddrFrame.Mode = Win32::AddrModeFlat;
<a name="l11201"></a>11201 
<a name="l11202"></a>11202 $   CONTEXT ctx = {};
<a name="l11203"></a>11203 $   ctx.ContextFlags |= CONTEXT_FULL;
<a name="l11204"></a>11204 
<a name="l11205"></a>11205 $   <span class="keywordtype">int</span> isWow64 = 0;
<a name="l11206"></a>11206 $   <span class="keywordflow">if</span> (Win32::IsWow64Process) Win32::IsWow64Process (GetCurrentProcess(), &amp;isWow64);
<a name="l11207"></a>11207     <span class="keywordflow">else</span> {$ <span class="keywordflow">return</span> -1; }
<a name="l11208"></a>11208 
<a name="l11209"></a>11209 $   <span class="keywordflow">if</span> (context)
<a name="l11210"></a>11210         {
<a name="l11211"></a>11211 $       ctx = *context;
<a name="l11212"></a>11212         }
<a name="l11213"></a>11213     <span class="keywordflow">else</span>
<a name="l11214"></a>11214         {
<a name="l11215"></a>11215 $       assert    (Win32::RtlCaptureContext);
<a name="l11216"></a>11216 $       _TX_CALLv (Win32::RtlCaptureContext, (&amp;ctx));
<a name="l11217"></a>11217         }
<a name="l11218"></a>11218 
<a name="l11219"></a>11219 <span class="preprocessor">    #if defined (_WIN64)</span>
<a name="l11220"></a>11220 <span class="preprocessor"></span>
<a name="l11221"></a>11221 $   <span class="keywordflow">if</span> (isWow64)
<a name="l11222"></a>11222         {
<a name="l11223"></a>11223 $       Win32::WOW64_CONTEXT wow64ctx = {};
<a name="l11224"></a>11224 $       wow64ctx.ContextFlags |= WOW64_CONTEXT_FULL;
<a name="l11225"></a>11225 
<a name="l11226"></a>11226 $       <span class="keywordflow">if</span> (!_TX_CALL (Win32::Wow64GetThreadContext, (thread, &amp;wow64ctx)))  <span class="comment">// In WINE, after EXIT_PROCESS_DEBUG_EVENT</span>
<a name="l11227"></a>11227             {$ <span class="keywordflow">return</span> 0; }
<a name="l11228"></a>11228 
<a name="l11229"></a>11229 $       cpu = IMAGE_FILE_MACHINE_I386;
<a name="l11230"></a>11230 
<a name="l11231"></a>11231 $       frame.AddrPC   .Offset = wow64ctx.Eip;
<a name="l11232"></a>11232 $       frame.AddrStack.Offset = wow64ctx.Esp;
<a name="l11233"></a>11233 $       frame.AddrFrame.Offset = wow64ctx.Ebp;
<a name="l11234"></a>11234         }
<a name="l11235"></a>11235     <span class="keywordflow">else</span>
<a name="l11236"></a>11236         {
<a name="l11237"></a>11237 $       cpu = IMAGE_FILE_MACHINE_AMD64;
<a name="l11238"></a>11238 
<a name="l11239"></a>11239 $       frame.AddrPC   .Offset = ctx.Rip;
<a name="l11240"></a>11240 $       frame.AddrStack.Offset = ctx.Rbp;
<a name="l11241"></a>11241 $       frame.AddrFrame.Offset = ctx.Rsp;
<a name="l11242"></a>11242         }
<a name="l11243"></a>11243 
<a name="l11244"></a>11244 <span class="preprocessor">    #else</span>
<a name="l11245"></a>11245 <span class="preprocessor"></span>
<a name="l11246"></a>11246         {
<a name="l11247"></a>11247 $       cpu = IMAGE_FILE_MACHINE_I386;
<a name="l11248"></a>11248 
<a name="l11249"></a>11249 $       frame.AddrPC   .Offset = ctx.Eip;
<a name="l11250"></a>11250 $       frame.AddrStack.Offset = ctx.Ebp;
<a name="l11251"></a>11251 $       frame.AddrFrame.Offset = ctx.Esp;
<a name="l11252"></a>11252         }
<a name="l11253"></a>11253 
<a name="l11254"></a>11254 <span class="preprocessor">    #endif</span>
<a name="l11255"></a>11255 <span class="preprocessor"></span>
<a name="l11256"></a>11256 $   assert (cpu);
<a name="l11257"></a>11257 
<a name="l11258"></a>11258     <span class="keywordflow">if</span> (_txSetJmp())
<a name="l11259"></a>11259         {
<a name="l11260"></a>11260 $       _txSymGetFromAddr ((<span class="keywordtype">void</span>*) 1);
<a name="l11261"></a>11261         }
<a name="l11262"></a>11262 $   _txClearJmp();
<a name="l11263"></a>11263 
<a name="l11264"></a>11264 $   HANDLE process = GetCurrentProcess();
<a name="l11265"></a>11265 
<a name="l11266"></a>11266 $   <span class="keywordtype">int</span>  frames = 0;
<a name="l11267"></a>11267 $   <span class="keywordflow">for</span> (frames = -framesToSkip; frames &lt; (int) szCapture; frames++)
<a name="l11268"></a>11268         {
<a name="l11269"></a>11269 $       DWORD64 prev = frame.AddrStack.Offset;
<a name="l11270"></a>11270 
<a name="l11271"></a>11271         <span class="comment">// Я злой и страшный серый walk. Я в поросятах знаю talk.</span>
<a name="l11272"></a>11272 
<a name="l11273"></a>11273         <span class="keywordflow">if</span> (!_txSetJmp()) {$ <span class="keywordflow">break</span>; }
<a name="l11274"></a>11274 
<a name="l11275"></a>11275 <span class="preprocessor">#if   defined (_GCC_VER)</span>
<a name="l11276"></a>11276 <span class="preprocessor"></span>
<a name="l11277"></a>11277         <span class="keywordflow">if</span> (!_TX_CALL (MinGW::StackWalk64, (cpu, process, thread, &amp;frame, &amp;ctx, NULL,
<a name="l11278"></a>11278                                             MinGW::SymFunctionTableAccess64, MinGW::SymGetModuleBase64, NULL))) {$ <span class="keywordflow">break</span>; }
<a name="l11279"></a>11279 <span class="preprocessor">#elif defined (_MSC_VER)</span>
<a name="l11280"></a>11280 <span class="preprocessor"></span>
<a name="l11281"></a>11281 $       <span class="keywordflow">if</span> (!_TX_CALL (Win32::StackWalk64, (cpu, process, thread, &amp;frame, &amp;ctx, NULL,
<a name="l11282"></a>11282                                             Win32::SymFunctionTableAccess64, Win32::SymGetModuleBase64, NULL))) {$ <span class="keywordflow">break</span>; }
<a name="l11283"></a>11283 <span class="preprocessor">#else</span>
<a name="l11284"></a>11284 <span class="preprocessor"></span><span class="preprocessor">        #error _GCC_VER / _MSC_VER not defined</span>
<a name="l11285"></a>11285 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l11286"></a>11286 <span class="preprocessor"></span>        <span class="keywordflow">if</span> (frames &lt; 0) {$ <span class="keywordflow">continue</span>; }
<a name="l11287"></a>11287 
<a name="l11288"></a>11288 $       <span class="keywordtype">void</span>* addr = (<span class="keywordtype">void</span>*) frame.AddrPC.Offset;
<a name="l11289"></a>11289 
<a name="l11290"></a>11290         if (frame.AddrFrame.Offset == 0)   {$ addr =          0; }  <span class="comment">// Bad frame</span>
<a name="l11291"></a>11291         <span class="keywordflow">if</span> (frame.AddrStack.Offset &lt; prev) {$ addr = (<span class="keywordtype">void</span>*) -1; }  <span class="comment">// Strange frame</span>
<a name="l11292"></a>11292 
<a name="l11293"></a>11293 $       assert (0 &lt;= frames &amp;&amp; frames &lt; (<span class="keywordtype">int</span>) szCapture);
<a name="l11294"></a>11294 
<a name="l11295"></a>11295 $       capture[frames] = addr;
<a name="l11296"></a>11296         }
<a name="l11297"></a>11297 
<a name="l11298"></a>11298 $   _txClearJmp();
<a name="l11299"></a>11299 
<a name="l11300"></a>11300 $   <span class="keywordflow">return</span> frames;
<a name="l11301"></a>11301     }
<a name="l11302"></a>11302 
<a name="l11303"></a>11303 <span class="comment">// Note that Rick and Carl are speaking near the C language block. &quot;C block&quot;, Carl. See: http://knowyourmeme.com/memes/carl</span>
<a name="l11304"></a>11304 
<a name="l11305"></a>11305 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11306"></a>11306 
<a name="l11307"></a>11307 <span class="keywordtype">bool</span> _txSymGetFromAddr (<span class="keywordtype">void</span>* addr, Win32::SYMBOL_INFO** symbol <span class="comment">/*= NULL*/</span>,
<a name="l11308"></a>11308                         Win32::IMAGEHLP_LINE64** line <span class="comment">/*= NULL*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>** module <span class="comment">/*= NULL*/</span>,
<a name="l11309"></a>11309                         <span class="keyword">const</span> <span class="keywordtype">char</span>** source <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> context <span class="comment">/*= 2*/</span>)
<a name="l11310"></a>11310     {
<a name="l11311"></a>11311 $7  <span class="keyword">static</span> HANDLE process = NULL;
<a name="l11312"></a>11312 
<a name="l11313"></a>11313 <span class="preprocessor">#if   defined (_GCC_VER)</span>
<a name="l11314"></a>11314 <span class="preprocessor"></span><span class="preprocessor">    #define LIB_  Win32::MinGW</span>
<a name="l11315"></a>11315 <span class="preprocessor"></span>
<a name="l11316"></a>11316 <span class="preprocessor">#elif defined (_MSC_VER)</span>
<a name="l11317"></a>11317 <span class="preprocessor"></span><span class="preprocessor">    #define LIB_  Win32</span>
<a name="l11318"></a>11318 <span class="preprocessor"></span>
<a name="l11319"></a>11319 <span class="preprocessor">#else</span>
<a name="l11320"></a>11320 <span class="preprocessor"></span><span class="preprocessor">    #error _GCC_VER / _MSC_VER not defined</span>
<a name="l11321"></a>11321 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l11322"></a>11322 <span class="preprocessor"></span>
<a name="l11323"></a>11323 $   <span class="keywordflow">if</span> (!process &amp;&amp; addr)
<a name="l11324"></a>11324         {
<a name="l11325"></a>11325 $       process = GetCurrentProcess();
<a name="l11326"></a>11326 
<a name="l11327"></a>11327 $       DWORD options = SYMOPT_UNDNAME | SYMOPT_LOAD_LINES | SYMOPT_LOAD_ANYTHING | SYMOPT_INCLUDE_32BIT_MODULES |
<a name="l11328"></a>11328                         SYMOPT_DEFERRED_LOADS | SYMOPT_FAVOR_COMPRESSED | SYMOPT_FAIL_CRITICAL_ERRORS | SYMOPT_NO_PROMPTS;
<a name="l11329"></a>11329 
<a name="l11330"></a>11330 $        _TX_CALL (LIB_::SymSetOptions, (options));
<a name="l11331"></a>11331 $        _TX_CALL (LIB_::SymInitialize, (process, NULL, <span class="keyword">true</span>));
<a name="l11332"></a>11332         }
<a name="l11333"></a>11333 
<a name="l11334"></a>11334 $   <span class="keyword">static</span> DWORD64 mod = 0;
<a name="l11335"></a>11335 
<a name="l11336"></a>11336 $   <span class="keywordflow">if</span> (module)
<a name="l11337"></a>11337         {
<a name="l11338"></a>11338 $       <span class="keyword">static</span> <span class="keywordtype">char</span> sMod [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11339"></a>11339 $       memset (sMod, 0, <span class="keyword">sizeof</span> (sMod));
<a name="l11340"></a>11340 
<a name="l11341"></a>11341 $       mod = _TX_CALL (LIB_::SymGetModuleBase64, (process, (uintptr_t) addr));
<a name="l11342"></a>11342 
<a name="l11343"></a>11343 $       GetModuleFileName ((HMODULE)(intptr_t) mod, sMod, MAX_PATH);
<a name="l11344"></a>11344 
<a name="l11345"></a>11345 $       <span class="keywordtype">char</span>* ext = strrchr (sMod, <span class="charliteral">&#39;.&#39;</span>);
<a name="l11346"></a>11346         <span class="keywordflow">if</span> (ext) {$ _strlwr_s (ext, <span class="keyword">sizeof</span> (sMod) - (ext-sMod)); }
<a name="l11347"></a>11347 
<a name="l11348"></a>11348 $       *module = sMod;
<a name="l11349"></a>11349         }
<a name="l11350"></a>11350 
<a name="l11351"></a>11351 $   <span class="keyword">static</span> <span class="keywordtype">char</span> buffer [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11352"></a>11352 $   <span class="keyword">static</span> Win32::SYMBOL_INFO* sym = (Win32::SYMBOL_INFO*) buffer;
<a name="l11353"></a>11353 
<a name="l11354"></a>11354 $   <span class="keywordflow">if</span> (symbol)
<a name="l11355"></a>11355         {
<a name="l11356"></a>11356 $       memset (buffer, 0, <span class="keyword">sizeof</span> (buffer));
<a name="l11357"></a>11357 
<a name="l11358"></a>11358 $       sym-&gt;MaxNameLen   = <span class="keyword">sizeof</span> (buffer) - <span class="keyword">sizeof</span> (Win32::SYMBOL_INFO) - 1;
<a name="l11359"></a>11359 $       sym-&gt;SizeOfStruct = <span class="keyword">sizeof</span> (Win32::SYMBOL_INFO);
<a name="l11360"></a>11360 $       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> ofs = 0;
<a name="l11361"></a>11361 
<a name="l11362"></a>11362 $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &amp;ofs, sym));
<a name="l11363"></a>11363 
<a name="l11364"></a>11364         <span class="keywordflow">if</span> (strcmp (sym-&gt;Name, <span class="stringliteral">&quot;??&quot;</span>) == 0) {$ *sym-&gt;Name = 0; }
<a name="l11365"></a>11365 
<a name="l11366"></a>11366 $       *symbol = sym;
<a name="l11367"></a>11367         }
<a name="l11368"></a>11368 
<a name="l11369"></a>11369 $   <span class="keyword">static</span> Win32::IMAGEHLP_LINE64 line64 = { <span class="keyword">sizeof</span> (line) };
<a name="l11370"></a>11370 
<a name="l11371"></a>11371 $   <span class="keywordflow">if</span> (line)
<a name="l11372"></a>11372         {
<a name="l11373"></a>11373 $       memset (&amp;line64, 0, <span class="keyword">sizeof</span> (line64));
<a name="l11374"></a>11374 
<a name="l11375"></a>11375 $       DWORD ofs = 0;
<a name="l11376"></a>11376 $       _TX_CALL (LIB_::SymGetLineFromAddr64, (process, (uintptr_t) addr, &amp;ofs, &amp;line64));
<a name="l11377"></a>11377 
<a name="l11378"></a>11378 $       *line = &amp;line64;
<a name="l11379"></a>11379         }
<a name="l11380"></a>11380 
<a name="l11381"></a>11381 $   <span class="keywordflow">if</span> (source)
<a name="l11382"></a>11382         {
<a name="l11383"></a>11383 $       <span class="keyword">static</span> <span class="keywordtype">char</span> buf [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11384"></a>11384 $       memset (buf, 0, <span class="keyword">sizeof</span> (buf));
<a name="l11385"></a>11385 
<a name="l11386"></a>11386 $       <span class="keywordflow">if</span> (line64.FileName &amp;&amp; line64.LineNumber)
<a name="l11387"></a>11387             {
<a name="l11388"></a>11388 $           _txReadSource (buf, <span class="keyword">sizeof</span> (buf) - 1, line64.FileName,
<a name="l11389"></a>11389                           (<span class="keywordtype">int</span>) line64.LineNumber - context, (<span class="keywordtype">int</span>) line64.LineNumber + context, (<span class="keywordtype">int</span>) line64.LineNumber);
<a name="l11390"></a>11390 
<a name="l11391"></a>11391 $           *source = buf;
<a name="l11392"></a>11392             }
<a name="l11393"></a>11393 
<a name="l11394"></a>11394         <span class="keywordflow">if</span> (!*source || !**source) {$ *source = NULL; }
<a name="l11395"></a>11395         }
<a name="l11396"></a>11396 
<a name="l11397"></a>11397 $   <span class="keywordflow">if</span> (!addr &amp;&amp; process)
<a name="l11398"></a>11398         {
<a name="l11399"></a>11399 $       _TX_CALL (LIB_::SymCleanup, (process));
<a name="l11400"></a>11400 
<a name="l11401"></a>11401 $       process = NULL;
<a name="l11402"></a>11402         }
<a name="l11403"></a>11403 
<a name="l11404"></a>11404 $   <span class="keywordflow">if</span> (symbol)
<a name="l11405"></a>11405         {
<a name="l11406"></a>11406 $       <span class="keywordflow">if</span> (strstr  (sym-&gt;Name, <span class="stringliteral">&quot;::TX::&quot;</span>)                                                  ||
<a name="l11407"></a>11407            (strncmp (sym-&gt;Name, <span class="stringliteral">&quot;_tx&quot;</span>,  3) == 0 &amp;&amp; isupper ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) sym-&gt;Name[3])) ||
<a name="l11408"></a>11408            (strncmp (sym-&gt;Name,  <span class="stringliteral">&quot;tx&quot;</span>,  2) == 0 &amp;&amp; isupper ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>) sym-&gt;Name[2])) ||
<a name="l11409"></a>11409             strncmp (sym-&gt;Name, <span class="stringliteral">&quot;_tx_&quot;</span>, 4) == 0                                            ||
<a name="l11410"></a>11410             strncmp (sym-&gt;Name,  <span class="stringliteral">&quot;tx_&quot;</span>, 3) == 0)
<a name="l11411"></a>11411             {
<a name="l11412"></a>11412 $           <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l11413"></a>11413             }
<a name="l11414"></a>11414 
<a name="l11415"></a>11415 $       <span class="keywordflow">if</span> (!line || !line64.FileName) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l11416"></a>11416 
<a name="l11417"></a>11417 $       intptr_t len = strlen (line64.FileName) - (<span class="keyword">sizeof</span> (__FILE__) - 1);
<a name="l11418"></a>11418 
<a name="l11419"></a>11419 $       <span class="keywordflow">return</span> (len &gt;= 0 &amp;&amp; _stricmp (line64.FileName + len, __FILE__) == 0) &amp;&amp;
<a name="l11420"></a>11420                (len == 0 || line64.FileName[len-1] == <span class="charliteral">&#39;/&#39;</span> || line64.FileName[len-1] == <span class="charliteral">&#39;\\&#39;</span>);
<a name="l11421"></a>11421         }
<a name="l11422"></a>11422 
<a name="l11423"></a>11423 <span class="preprocessor">    #undef LIB_</span>
<a name="l11424"></a>11424 <span class="preprocessor"></span>
<a name="l11425"></a>11425 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l11426"></a>11426     }
<a name="l11427"></a>11427 
<a name="l11428"></a>11428 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11429"></a>11429 
<a name="l11430"></a>11430 intptr_t _txReadSource (<span class="keywordtype">char</span> buf[], intptr_t size, <span class="keyword">const</span> <span class="keywordtype">char</span> file[],
<a name="l11431"></a>11431                         <span class="keywordtype">int</span> linStart <span class="comment">/*= 0*/</span>, <span class="keywordtype">int</span> linEnd <span class="comment">/*= INT_MIN*/</span>, <span class="keywordtype">int</span> linMark <span class="comment">/*= INT_MIN*/</span>)
<a name="l11432"></a>11432     {
<a name="l11433"></a>11433 $7  assert (buf);
<a name="l11434"></a>11434 
<a name="l11435"></a>11435     <span class="keywordflow">if</span> (!file || !*file) {$ <span class="keywordflow">return</span> 0; }
<a name="l11436"></a>11436 
<a name="l11437"></a>11437     <span class="keywordflow">if</span> (linStart &lt; 1) {$ linStart = 1;       }
<a name="l11438"></a>11438     <span class="keywordflow">if</span> (linEnd == -1) {$ linEnd   = INT_MAX; }
<a name="l11439"></a>11439 
<a name="l11440"></a>11440 $   FILE* f = NULL;
<a name="l11441"></a>11441 $   fopen_s (&amp;f, file, <span class="stringliteral">&quot;r&quot;</span>);
<a name="l11442"></a>11442     <span class="keywordflow">if</span> (!f) {$ <span class="keywordflow">return</span> 0; }
<a name="l11443"></a>11443 
<a name="l11444"></a>11444 $   <span class="keywordtype">int</span> n = 1;
<a name="l11445"></a>11445     <span class="keywordflow">while</span> (!feof (f))
<a name="l11446"></a>11446         {
<a name="l11447"></a>11447         <span class="keywordflow">if</span> (n &gt;= linStart) {$ <span class="keywordflow">break</span>; }
<a name="l11448"></a>11448         <span class="keywordflow">while</span> (!feof (f) &amp;&amp; fgetc (f) != <span class="charliteral">&#39;\n&#39;</span>)
<a name="l11449"></a>11449             ;
<a name="l11450"></a>11450         n++;
<a name="l11451"></a>11451         }
<a name="l11452"></a>11452 
<a name="l11453"></a>11453 $   <span class="keywordtype">char</span>* s = buf;
<a name="l11454"></a>11454 
<a name="l11455"></a>11455 <span class="preprocessor">    #define SZ_  ( size - 3 - (s - buf) )</span>
<a name="l11456"></a>11456 <span class="preprocessor"></span>
<a name="l11457"></a>11457 $   <span class="keywordflow">while</span> (!feof (f) &amp;&amp; SZ_ &gt; 0)
<a name="l11458"></a>11458         {
<a name="l11459"></a>11459         <span class="keywordflow">if</span> (n &gt; linEnd || _txNOP (SZ_) &lt; 0) {$ <span class="keywordflow">break</span>; }
<a name="l11460"></a>11460 
<a name="l11461"></a>11461         <span class="keywordflow">if</span> (linMark != INT_MIN)
<a name="l11462"></a>11462             {$ s += _tx_snprintf_s (s, SZ_, <span class="stringliteral">&quot;%s%5d: &quot;</span>, ((n == linMark)? <span class="stringliteral">&quot;=&gt;&quot;</span> : <span class="stringliteral">&quot;  &quot;</span>), n); }
<a name="l11463"></a>11463 
<a name="l11464"></a>11464 $       <span class="keywordtype">int</span> c = 0;
<a name="l11465"></a>11465 $       <span class="keywordflow">while</span> (!feof (f) &amp;&amp; SZ_ &gt; 0 &amp;&amp; (c = fgetc (f)) != <span class="charliteral">&#39;\n&#39;</span>) *s++ = (char) c;
<a name="l11466"></a>11466         <span class="keywordflow">if</span> (c == EOF) {$ s--; }
<a name="l11467"></a>11467 
<a name="l11468"></a>11468         <span class="keywordflow">if</span> (SZ_ &gt; 0) {$ *s++ = <span class="charliteral">&#39;\n&#39;</span>; }
<a name="l11469"></a>11469 $       n++;
<a name="l11470"></a>11470         }
<a name="l11471"></a>11471 
<a name="l11472"></a>11472     <span class="keywordflow">if</span> (n &lt;= linEnd &amp;&amp; SZ_ &lt;= 0)
<a name="l11473"></a>11473         {$ s += _tx_snprintf_s (s, size - (s - buf), <span class="stringliteral">&quot;...&quot;</span>); }
<a name="l11474"></a>11474 
<a name="l11475"></a>11475 <span class="preprocessor">    #undef SZ_</span>
<a name="l11476"></a>11476 <span class="preprocessor"></span>
<a name="l11477"></a>11477 $   fclose (f);
<a name="l11478"></a>11478 
<a name="l11479"></a>11479     <span class="keywordflow">if</span> (s &gt; buf &amp;&amp; s[-1] == <span class="charliteral">&#39;\n&#39;</span>) {$ s--; }
<a name="l11480"></a>11480 $   *s = 0;
<a name="l11481"></a>11481 
<a name="l11482"></a>11482 $   <span class="keywordflow">return</span> (s - buf);
<a name="l11483"></a>11483     }
<a name="l11484"></a>11484 
<a name="l11485"></a>11485 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11486"></a>11486 
<a name="l11487"></a>11487 <span class="keyword">const</span> <span class="keywordtype">char</span>* _txCaptureStackBackTraceTX (<span class="keywordtype">int</span> framesToSkip <span class="comment">/*= 0*/</span>, <span class="keywordtype">bool</span> readSource <span class="comment">/*= false*/</span>)
<a name="l11488"></a>11488     {
<a name="l11489"></a>11489 $6  <span class="keyword">const</span> <span class="keywordtype">int</span> maxFrames = 62;  <span class="comment">// TX says too: &lt; 63</span>
<a name="l11490"></a>11490 $   <span class="keyword">static</span> <span class="keywordtype">char</span> trace [(MAX_PATH + 1024+1) * maxFrames] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11491"></a>11491 
<a name="l11492"></a>11492     <span class="keywordflow">if</span> (framesToSkip == -1) {$ <span class="keywordflow">return</span> trace; }
<a name="l11493"></a>11493 
<a name="l11494"></a>11494 $   memset (trace, 0, <span class="keyword">sizeof</span> (trace));
<a name="l11495"></a>11495 $   <span class="keywordtype">char</span>* s = trace;
<a name="l11496"></a>11496 
<a name="l11497"></a>11497 <span class="preprocessor">    #define SZ_  ( sizeof (trace) - 1 - 3 - (s-trace) )</span>
<a name="l11498"></a>11498 <span class="preprocessor"></span>
<a name="l11499"></a>11499 $   <span class="keyword">const</span> _txLoc* loc = &amp;_txLoc::Cur;
<a name="l11500"></a>11500 
<a name="l11501"></a>11501     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; loc &amp;&amp; i &lt; framesToSkip + 1; i++, loc = loc-&gt;prev) { $; }
<a name="l11502"></a>11502 
<a name="l11503"></a>11503 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = -framesToSkip; loc &amp;&amp; i &lt; maxFrames; i++, loc = loc-&gt;prev)
<a name="l11504"></a>11504         {
<a name="l11505"></a>11505         <span class="keywordflow">if</span> (i &lt; 0) {$ <span class="keywordflow">continue</span>; }
<a name="l11506"></a>11506 
<a name="l11507"></a>11507         <span class="keywordflow">if</span> (loc-&gt;func || loc-&gt;file || loc-&gt;line)
<a name="l11508"></a>11508             {
<a name="l11509"></a>11509 $           s += _tx_snprintf_s     (s, SZ_, <span class="stringliteral">&quot;%s#%2d in %s at %s (%d)&quot;</span>, (i? readSource? <span class="stringliteral">&quot;\n\n&quot;</span> : <span class="stringliteral">&quot;\n&quot;</span> : <span class="stringliteral">&quot;&quot;</span>),
<a name="l11510"></a>11510                                      i, loc-&gt;func, loc-&gt;file, loc-&gt;line);
<a name="l11511"></a>11511 
<a name="l11512"></a>11512 $           <span class="keywordflow">if</span> (readSource)
<a name="l11513"></a>11513                 {
<a name="l11514"></a>11514 $               s += _tx_snprintf_s (s, SZ_, <span class="stringliteral">&quot;:\n\n&quot;</span>);
<a name="l11515"></a>11515 $               s += _txReadSource  (s, SZ_, loc-&gt;file, loc-&gt;line - 2, loc-&gt;line + 2, loc-&gt;line);
<a name="l11516"></a>11516                 }
<a name="l11517"></a>11517             }
<a name="l11518"></a>11518         }
<a name="l11519"></a>11519 
<a name="l11520"></a>11520 <span class="preprocessor">    #undef SZ_</span>
<a name="l11521"></a>11521 <span class="preprocessor"></span>
<a name="l11522"></a>11522 $   s += _tx_snprintf_s (s, <span class="keyword">sizeof</span> (trace) - 1 - (s-trace), <span class="stringliteral">&quot;&quot;</span>);
<a name="l11523"></a>11523 
<a name="l11524"></a>11524 $   <span class="keywordflow">return</span> trace;
<a name="l11525"></a>11525     }
<a name="l11526"></a>11526 
<a name="l11527"></a>11527 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11528"></a>11528 
<a name="l11529"></a>11529 <span class="keywordtype">bool</span> _txCreateMiniDump (EXCEPTION_POINTERS* exc)
<a name="l11530"></a>11530     {
<a name="l11531"></a>11531 $6  assert (exc);
<a name="l11532"></a>11532 
<a name="l11533"></a>11533 $   DWORD         winErr = GetLastError();
<a name="l11534"></a>11534 $   <span class="keywordtype">int</span>           crtErr = errno;
<a name="l11535"></a>11535 <span class="preprocessor">    #if !defined (__CYGWIN__)</span>
<a name="l11536"></a>11536 <span class="preprocessor"></span>$   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> dosErr = _doserrno;
<a name="l11537"></a>11537 <span class="preprocessor">    #endif</span>
<a name="l11538"></a>11538 <span class="preprocessor"></span>
<a name="l11539"></a>11539 $   <span class="keyword">static</span> <span class="keywordtype">char</span> dumpName[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11540"></a>11540     <span class="keywordflow">if</span> (!*dumpName) {$ _tx_snprintf_s (dumpName, <span class="keyword">sizeof</span> (dumpName) - 1, <span class="stringliteral">&quot;%s.dmp&quot;</span>, <a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>); }
<a name="l11541"></a>11541 
<a name="l11542"></a>11542 $   HANDLE file = CreateFile (dumpName, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
<a name="l11543"></a>11543 
<a name="l11544"></a>11544     <span class="keywordflow">if</span> (!file || file == INVALID_HANDLE_VALUE) {$ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l11545"></a>11545 
<a name="l11546"></a>11546 $   Win32::MINIDUMP_EXCEPTION_INFORMATION excInfo = { GetCurrentThreadId(), exc, <span class="keyword">false</span> };
<a name="l11547"></a>11547 
<a name="l11548"></a>11548 $   <span class="keywordtype">bool</span> ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file,
<a name="l11549"></a>11549                                                    (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory),
<a name="l11550"></a>11550                                                    &amp;excInfo, NULL, NULL));
<a name="l11551"></a>11551 $   CloseHandle (file);
<a name="l11552"></a>11552 
<a name="l11553"></a>11553 $   SetLastError (winErr);
<a name="l11554"></a>11554 $   errno = crtErr;
<a name="l11555"></a>11555 <span class="preprocessor">    #if !defined (__CYGWIN__)</span>
<a name="l11556"></a>11556 <span class="preprocessor"></span>$   _doserrno = dosErr;
<a name="l11557"></a>11557 <span class="preprocessor">    #endif</span>
<a name="l11558"></a>11558 <span class="preprocessor"></span>
<a name="l11559"></a>11559     <span class="keywordflow">if</span> (ok) {$ <span class="keywordflow">return</span> <span class="keyword">true</span>;  }
<a name="l11560"></a>11560     <span class="keywordflow">else</span>    {$ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l11561"></a>11561     }
<a name="l11562"></a>11562 
<a name="l11563"></a>11563 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11564"></a>11564 <span class="comment">//}</span>
<a name="l11565"></a>11565 
<a name="l11566"></a>11566 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11567"></a>11567 <span class="comment">//{          Errors reporting</span>
<a name="l11568"></a>11568 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11569"></a>11569 
<a name="l11570"></a>11570 <span class="keyword">const</span> <span class="keywordtype">char</span>* _txProcessError (<span class="keyword">const</span> <span class="keywordtype">char</span> file[], <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> func[], <span class="keywordtype">unsigned</span> color, <span class="keyword">const</span> <span class="keywordtype">char</span> msg[], va_list args)
<a name="l11571"></a>11571     {
<a name="l11572"></a>11572     _txErrors++;
<a name="l11573"></a>11573 
<a name="l11574"></a>11574     DWORD           winErr   = GetLastError();
<a name="l11575"></a>11575 
<a name="l11576"></a>11576     <span class="keywordtype">int</span>             crtErr   = errno;
<a name="l11577"></a>11577 
<a name="l11578"></a>11578 <span class="preprocessor">    #if !defined (__CYGWIN__)</span>
<a name="l11579"></a>11579 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>   dosErr   = _doserrno;
<a name="l11580"></a>11580 <span class="preprocessor">    #else</span>
<a name="l11581"></a>11581 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>   dosErr   = 0;
<a name="l11582"></a>11582 <span class="preprocessor">    #endif</span>
<a name="l11583"></a>11583 <span class="preprocessor"></span>
<a name="l11584"></a>11584     <span class="keywordtype">unsigned</span>        oglErr   = _TX_CALL (Win32::wglGetCurrentDC, ())? _TX_CALL (Win32::glGetError, ()) : _txOGLError;
<a name="l11585"></a>11585 
<a name="l11586"></a>11586     <span class="keywordtype">unsigned</span>        threadId = GetCurrentThreadId();
<a name="l11587"></a>11587 
<a name="l11588"></a>11588     <span class="keyword">enum</span> { isFatal = 0x01, isWarning = 0x02, noMsgBox = 0x04, fmtOnly = 0x08, traceSE = 0x10 };
<a name="l11589"></a>11589     <span class="keywordtype">unsigned</span> options = 0;
<a name="l11590"></a>11590 
<a name="l11591"></a>11591     <span class="keywordflow">for</span> (; msg &amp;&amp; *msg; msg++)
<a name="l11592"></a>11592         {
<a name="l11593"></a>11593         <span class="keywordflow">if</span>      (*msg == <span class="charliteral">&#39;\a&#39;</span>) options |= isFatal;
<a name="l11594"></a>11594         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*msg == <span class="charliteral">&#39;\v&#39;</span>) options |= isWarning;
<a name="l11595"></a>11595         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*msg == <span class="charliteral">&#39;\b&#39;</span>) options |= noMsgBox;
<a name="l11596"></a>11596         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*msg == <span class="charliteral">&#39;\f&#39;</span>) options |= fmtOnly;
<a name="l11597"></a>11597         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*msg == <span class="charliteral">&#39;\t&#39;</span>) options |= traceSE;
<a name="l11598"></a>11598         <span class="keywordflow">else</span> <span class="keywordflow">break</span>;
<a name="l11599"></a>11599         }
<a name="l11600"></a>11600 
<a name="l11601"></a>11601     <span class="keyword">const</span> <span class="keywordtype">char</span>* stkTrace = NULL;
<a name="l11602"></a>11602     <span class="keyword">const</span> <span class="keywordtype">char</span>*  txTrace = NULL; (void) txTrace;
<a name="l11603"></a>11603 
<a name="l11604"></a>11604     <span class="keywordflow">if</span> (!(options &amp; fmtOnly))
<a name="l11605"></a>11605         {
<a name="l11606"></a>11606         stkTrace = ((options &amp; traceSE) &amp;&amp; *_txTraceSE)? _txTraceSE : _txCaptureStackBackTrace   (2, <span class="keyword">true</span>);
<a name="l11607"></a>11607         txTrace  =                                                    _txCaptureStackBackTraceTX (0, <span class="keyword">true</span>);
<a name="l11608"></a>11608         }
<a name="l11609"></a>11609 
<a name="l11610"></a>11610     <span class="keyword">static</span> <span class="keywordtype">char</span> what[<a class="code" href="a00084.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры больших статических буферов.">_TX_BIGBUFSIZE</a>*10] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11611"></a>11611     <span class="keyword">static</span> <span class="keywordtype">char</span> str [<a class="code" href="a00084.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры больших статических буферов.">_TX_BIGBUFSIZE</a>]    = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11612"></a>11612     <span class="keywordtype">char</span> *s = what;
<a name="l11613"></a>11613 
<a name="l11614"></a>11614 <span class="preprocessor">    #define     PRINT_(...)  s += _tx_snprintf_s  (s, sizeof (what) - 1 - (s - what), ##__VA_ARGS__)</span>
<a name="l11615"></a>11615 <span class="preprocessor"></span><span class="preprocessor">    #define    VPRINT_(...)  s += _tx_vsnprintf_s (s, sizeof (what) - 1 - (s - what), ##__VA_ARGS__)</span>
<a name="l11616"></a>11616 <span class="preprocessor"></span>
<a name="l11617"></a>11617                 PRINT_ (<span class="stringliteral">&quot;TXLib %s\n\n&quot;</span>, ((options &amp; isWarning)? <span class="stringliteral">&quot;предупреждает:&quot;</span> :
<a name="l11618"></a>11618                                          (options &amp; isFatal)?   <span class="stringliteral">&quot;соболезнует...&quot;</span> :
<a name="l11619"></a>11619                                                                 <span class="stringliteral">&quot;сообщает:&quot;</span>));
<a name="l11620"></a>11620                 PRINT_ (<span class="stringliteral">&quot;Программа: %s&quot;</span>, <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a>());
<a name="l11621"></a>11621     <span class="keywordflow">if</span> (file)   PRINT_ (<span class="stringliteral">&quot;, файл: %s&quot;</span>,    file);
<a name="l11622"></a>11622     <span class="keywordflow">if</span> (line)   PRINT_ (<span class="stringliteral">&quot;, строка: %d&quot;</span>,  line);
<a name="l11623"></a>11623     <span class="keywordflow">if</span> (func)   PRINT_ (<span class="stringliteral">&quot;, функция: %s&quot;</span>, func);
<a name="l11624"></a>11624                 PRINT_ (<span class="stringliteral">&quot;,\n\n&quot;</span>);
<a name="l11625"></a>11625 
<a name="l11626"></a>11626     <span class="keywordflow">if</span> (msg)    PRINT_ (<span class="stringliteral">&quot;%s: &quot;</span>, (file || line || func)? <span class="stringliteral">&quot;Сообщение&quot;</span> : <span class="stringliteral">&quot;ВНЕЗАПНО&quot;</span>),
<a name="l11627"></a>11627                VPRINT_ (msg, args);
<a name="l11628"></a>11628 
<a name="l11629"></a>11629     <span class="keywordflow">while</span> (s &gt; what &amp;&amp; s[-1] == <span class="charliteral">&#39;\n&#39;</span>) s--;
<a name="l11630"></a>11630 
<a name="l11631"></a>11631                 PRINT_ (<span class="stringliteral">&quot;\n\n&quot;</span> <span class="stringliteral">&quot;#%d: %s, Instance: 0x%p (%d-bit), Flags: %c%c%c%c%c%d, Thread: 0x%X%s&quot;</span>,
<a name="l11632"></a>11632 
<a name="l11633"></a>11633                         _txErrors, _TX_VERSION, &amp;_txInitialized, (<span class="keyword">sizeof</span> (<span class="keywordtype">void</span>*) == 4)? 32 : 64,
<a name="l11634"></a>11634 
<a name="l11635"></a>11635                         <span class="stringliteral">&quot;cC&quot;</span>[_txConsole], <span class="stringliteral">&quot;mM&quot;</span>[_txMain], <span class="stringliteral">&quot;dD&quot;</span>[_txIsDll], <span class="stringliteral">&quot;rR&quot;</span>[_txRunning], <span class="stringliteral">&quot;eE&quot;</span>[_txExit], _txLoc::Cur.trace,
<a name="l11636"></a>11636 
<a name="l11637"></a>11637                         threadId, (threadId == _txMainThreadId)?    <span class="stringliteral">&quot; (Main)&quot;</span>   :
<a name="l11638"></a>11638                                   (threadId == _txCanvas_ThreadId)? <span class="stringliteral">&quot; (Canvas)&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l11639"></a>11639 
<a name="l11640"></a>11640     <span class="keywordflow">if</span> (winErr) PRINT_ (<span class="stringliteral">&quot;, GetLastError(): %lu (&quot;</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) winErr),
<a name="l11641"></a>11641                 s += FormatMessage (FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
<a name="l11642"></a>11642                                     NULL, winErr, MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),
<a name="l11643"></a>11643                                     s, (DWORD) (<span class="keyword">sizeof</span> (what) - (s-what)), NULL) - 2,
<a name="l11644"></a>11644                 s -=  (s[-1] == <span class="charliteral">&#39;.&#39;</span>)? 1 : 0,
<a name="l11645"></a>11645                 PRINT_ (<span class="stringliteral">&quot;)&quot;</span>);
<a name="l11646"></a>11646 
<a name="l11647"></a>11647     <span class="keywordflow">if</span> (crtErr) PRINT_ (<span class="stringliteral">&quot;, errno: %d (%s)&quot;</span>,        crtErr, (strerror_s (str, <span class="keyword">sizeof</span> (str), crtErr), str));
<a name="l11648"></a>11648     <span class="keywordflow">if</span> (dosErr) PRINT_ (<span class="stringliteral">&quot;, _doserrno: %lu (%s)&quot;</span>,   dosErr, (strerror_s (str, <span class="keyword">sizeof</span> (str), dosErr), str));
<a name="l11649"></a>11649     <span class="keywordflow">if</span> (oglErr) PRINT_ (<span class="stringliteral">&quot;, glGetError(): %u (0x%04X, %s)&quot;</span>, oglErr, oglErr, _TX_CALL (Win32::gluErrorString, (oglErr)));
<a name="l11650"></a>11650 
<a name="l11651"></a>11651 <span class="preprocessor">    #if (__cplusplus &lt;= 201703L)</span>
<a name="l11652"></a>11652 <span class="preprocessor"></span>                PRINT_ (<span class="stringliteral">&quot;. %s\n&quot;</span>, ::std::uncaught_exception ()? <span class="stringliteral">&quot;std::uncaught_exception(): true.&quot;</span>  : <span class="stringliteral">&quot;&quot;</span>);
<a name="l11653"></a>11653 <span class="preprocessor">    #else</span>
<a name="l11654"></a>11654 <span class="preprocessor"></span>                PRINT_ (<span class="stringliteral">&quot;. %s\n&quot;</span>, ::std::uncaught_exceptions()? <span class="stringliteral">&quot;std::uncaught_exceptions(): true.&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l11655"></a>11655 <span class="preprocessor">    #endif</span>
<a name="l11656"></a>11656 <span class="preprocessor"></span>
<a name="l11657"></a>11657     <span class="keywordflow">if</span> (_txLoc::Cur.inTX &gt; 0 &amp;&amp; file &amp;&amp; !(_txLoc::Cur.line == line &amp;&amp; _stricmp (_txLoc::Cur.file, file) == 0) &amp;&amp;
<a name="l11658"></a>11658        (_txLoc::Cur.file || _txLoc::Cur.line || _txLoc::Cur.func))
<a name="l11659"></a>11659                 PRINT_ (<span class="stringliteral">&quot;From: %s (%d) %s.\n&quot;</span>, _txLoc::Cur.file, _txLoc::Cur.line, _txLoc::Cur.func);
<a name="l11660"></a>11660 
<a name="l11661"></a>11661     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;\r&quot;</span> <span class="stringliteral">&quot;%s - ERROR: %s\n&quot;</span>, _TX_VERSION, what);
<a name="l11662"></a>11662 
<a name="l11663"></a>11663     <span class="keywordflow">if</span> (options &amp; fmtOnly)
<a name="l11664"></a>11664         {
<a name="l11665"></a>11665         SetLastError (winErr);
<a name="l11666"></a>11666 
<a name="l11667"></a>11667         errno = crtErr;
<a name="l11668"></a>11668 
<a name="l11669"></a>11669 <span class="preprocessor">        #if !defined (__CYGWIN__)</span>
<a name="l11670"></a>11670 <span class="preprocessor"></span>        _doserrno = dosErr;
<a name="l11671"></a>11671 <span class="preprocessor">        #endif</span>
<a name="l11672"></a>11672 <span class="preprocessor"></span>
<a name="l11673"></a>11673         <span class="keywordflow">return</span> what;
<a name="l11674"></a>11674         }
<a name="l11675"></a>11675 
<a name="l11676"></a>11676     <span class="keywordtype">unsigned</span> restore = <a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>();
<a name="l11677"></a>11677     <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> ((options &amp; isFatal)? FOREGROUND_LIGHTMAGENTA : FOREGROUND_LIGHTRED);
<a name="l11678"></a>11678     <span class="keywordflow">if</span> (color) {$ <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (color); }
<a name="l11679"></a>11679 
<a name="l11680"></a>11680     <span class="keywordtype">int</span> oldCodePage = <a class="code" href="a00080.htm#ga6122d52806d23ff6bd480a0f07b75f2b" title="Смена кодовой страницы консоли и локали стандартной библиотеки С++.">txSetLocale</a>();
<a name="l11681"></a>11681 
<a name="l11682"></a>11682     fprintf (stderr,      <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>
<a name="l11683"></a>11683                                <span class="stringliteral">&quot;%s\n&quot;</span>
<a name="l11684"></a>11684                                <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>,
<a name="l11685"></a>11685                                what);
<a name="l11686"></a>11686 
<a name="l11687"></a>11687     <span class="keywordflow">if</span> (stkTrace &amp;&amp; strstr (stkTrace, <span class="stringliteral">&quot;.exe: &quot;</span>))
<a name="l11688"></a>11688         {$ fprintf (stderr,    <span class="stringliteral">&quot;Стек вызовов:\n\n&quot;</span>
<a name="l11689"></a>11689                                <span class="stringliteral">&quot;%s\n\n&quot;</span>
<a name="l11690"></a>11690                                <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>,
<a name="l11691"></a>11691                                stkTrace); }
<a name="l11692"></a>11692 
<a name="l11693"></a>11693     SetConsoleOutputCP (oldCodePage);
<a name="l11694"></a>11694     <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (restore);
<a name="l11695"></a>11695 
<a name="l11696"></a>11696     <span class="keywordflow">if</span> (*<a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>) <span class="keywordflow">do</span>
<a name="l11697"></a>11697         {
<a name="l11698"></a>11698         FILE* log = NULL; fopen_s (&amp;log, <a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>, <span class="stringliteral">&quot;a&quot;</span>);
<a name="l11699"></a>11699         <span class="keywordflow">if</span> (!log) {$ <span class="keywordflow">break</span>; }
<a name="l11700"></a>11700 
<a name="l11701"></a>11701         fprintf (log,     <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>
<a name="l11702"></a>11702                                <span class="stringliteral">&quot;%s\n&quot;</span>
<a name="l11703"></a>11703                                <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>,
<a name="l11704"></a>11704                                what);
<a name="l11705"></a>11705 
<a name="l11706"></a>11706         fprintf (log,          <span class="stringliteral">&quot;Стек вызовов:\n\n&quot;</span>
<a name="l11707"></a>11707                                <span class="stringliteral">&quot;%s\n&quot;</span>,
<a name="l11708"></a>11708                                (*_txTraceSE? _txTraceSE : stkTrace));
<a name="l11709"></a>11709 
<a name="l11710"></a>11710 <span class="preprocessor">        #if defined (_TX_ALLOW_TRACE) || defined (_DEBUG)</span>
<a name="l11711"></a>11711 <span class="preprocessor"></span>
<a name="l11712"></a>11712         <span class="keywordflow">if</span> (_txLoc::Cur.inTX &gt; 0 &amp;&amp; txTrace &amp;&amp; *txTrace)
<a name="l11713"></a>11713             {
<a name="l11714"></a>11714             fprintf (log, <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>
<a name="l11715"></a>11715                                <span class="stringliteral">&quot;Стек вызовов TX:\n\n&quot;</span>
<a name="l11716"></a>11716                                <span class="stringliteral">&quot;%s\n&quot;</span>,
<a name="l11717"></a>11717                                txTrace);
<a name="l11718"></a>11718             }
<a name="l11719"></a>11719 
<a name="l11720"></a>11720 <span class="preprocessor">        #endif</span>
<a name="l11721"></a>11721 <span class="preprocessor"></span>
<a name="l11722"></a>11722         fprintf (log,     <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>
<a name="l11723"></a>11723                                <span class="stringliteral">&quot;%s\n\n&quot;</span>
<a name="l11724"></a>11724                                <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>,
<a name="l11725"></a>11725                                _txAppInfo());
<a name="l11726"></a>11726         fclose (log);
<a name="l11727"></a>11727         <span class="keywordflow">break</span>;
<a name="l11728"></a>11728         }
<a name="l11729"></a>11729         <span class="keywordflow">while</span> (<span class="keyword">false</span>);
<a name="l11730"></a>11730 
<a name="l11731"></a>11731     <span class="keywordtype">int</span> ret = 0;
<a name="l11732"></a>11732 
<a name="l11733"></a>11733     <span class="keywordflow">if</span> (!(options &amp; noMsgBox))
<a name="l11734"></a>11734         {
<a name="l11735"></a>11735         <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>);
<a name="l11736"></a>11736 
<a name="l11737"></a>11737         PRINT_ (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Прервать программу?&quot;</span>);
<a name="l11738"></a>11738 
<a name="l11739"></a>11739         ret = <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (what, ((options &amp; isWarning)? <span class="stringliteral">&quot;Предупреждение&quot;</span>   :
<a name="l11740"></a>11740                                    (options &amp; isFatal)?   <span class="stringliteral">&quot;Фатальная ошибка&quot;</span> :
<a name="l11741"></a>11741                                                           <span class="stringliteral">&quot;Ошибка в программе&quot;</span>), MB_ICONSTOP | MB_SYSTEMMODAL | MB_YESNOCANCEL);
<a name="l11742"></a>11742         }
<a name="l11743"></a>11743 
<a name="l11744"></a>11744     SetLastError (winErr);
<a name="l11745"></a>11745 
<a name="l11746"></a>11746     errno = crtErr;
<a name="l11747"></a>11747 
<a name="l11748"></a>11748 <span class="preprocessor">    #if !defined (__CYGWIN__)</span>
<a name="l11749"></a>11749 <span class="preprocessor"></span>    _doserrno = dosErr;
<a name="l11750"></a>11750 <span class="preprocessor">    #endif</span>
<a name="l11751"></a>11751 <span class="preprocessor"></span>
<a name="l11752"></a>11752     <span class="keywordflow">if</span> (((options &amp; isFatal) &amp;&amp; !IsDebuggerPresent()) || ret == IDYES)
<a name="l11753"></a>11753         {
<a name="l11754"></a>11754         <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l11755"></a>11755         _txCleanup();
<a name="l11756"></a>11756         Win32::TerminateProcess (GetCurrentProcess(), EXIT_FAILURE);
<a name="l11757"></a>11757         }
<a name="l11758"></a>11758 
<a name="l11759"></a>11759 <span class="preprocessor">    #undef PRINT_</span>
<a name="l11760"></a>11760 <span class="preprocessor"></span>
<a name="l11761"></a>11761     <span class="keywordflow">return</span> what;
<a name="l11762"></a>11762     }
<a name="l11763"></a>11763 
<a name="l11764"></a>11764 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11765"></a>11765 
<a name="l11766"></a>11766 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l11767"></a>11767 <span class="preprocessor"></span>
<a name="l11768"></a>11768 <span class="keywordtype">int</span> _txOnErrorReport (<span class="keywordtype">int</span> type, <span class="keyword">const</span> <span class="keywordtype">char</span>* text, <span class="keywordtype">int</span>* ret)
<a name="l11769"></a>11769     {
<a name="l11770"></a>11770     assert (text);
<a name="l11771"></a>11771     assert (ret);
<a name="l11772"></a>11772 
<a name="l11773"></a>11773     _txErrors++;
<a name="l11774"></a>11774 
<a name="l11775"></a>11775     <span class="keywordtype">unsigned</span> restore = <a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>();
<a name="l11776"></a>11776 
<a name="l11777"></a>11777     <span class="keywordflow">switch</span> (type)
<a name="l11778"></a>11778        {
<a name="l11779"></a>11779        <span class="keywordflow">case</span> _CRT_WARN:   <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_LIGHTRED);     <span class="keywordflow">break</span>;
<a name="l11780"></a>11780        <span class="keywordflow">case</span> _CRT_ERROR:  <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_LIGHTMAGENTA); <span class="keywordflow">break</span>;
<a name="l11781"></a>11781        <span class="keywordflow">case</span> _CRT_ASSERT: <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_YELLOW);       <span class="keywordflow">break</span>;
<a name="l11782"></a>11782        <span class="keywordflow">default</span>:                                                      <span class="keywordflow">break</span>;
<a name="l11783"></a>11783        }
<a name="l11784"></a>11784 
<a name="l11785"></a>11785     <span class="keyword">const</span> <span class="keywordtype">char</span> startReport[] = <span class="stringliteral">&quot;Detected memory leaks!\n&quot;</span>,
<a name="l11786"></a>11786                  endReport[] = <span class="stringliteral">&quot;Object dump complete.\n&quot;</span>;
<a name="l11787"></a>11787 
<a name="l11788"></a>11788     <span class="keywordflow">if</span> (strcmp (text, startReport) == 0)  <span class="comment">// Dirty, dirty hack. А что делать?</span>
<a name="l11789"></a>11789         {
<a name="l11790"></a>11790         _txOnErrorReport (type, <span class="stringliteral">&quot;\n&quot;</span>,                                                                              NULL);
<a name="l11791"></a>11791         _txOnErrorReport (type, _TX_VERSION <span class="stringliteral">&quot; - ERROR: &quot;</span>,                                                          NULL);
<a name="l11792"></a>11792         _txOnErrorReport (type, <span class="stringliteral">&quot;Внимание: Обнаружены утечки памяти! (Для поиска используйте _TX_ALLOC_BREAK.)\n&quot;</span>, NULL);
<a name="l11793"></a>11793         _txOnErrorReport (type, <span class="stringliteral">&quot;\n&quot;</span>,                                                                              NULL);
<a name="l11794"></a>11794         }
<a name="l11795"></a>11795 
<a name="l11796"></a>11796     <span class="keywordtype">size_t</span> len = strlen (text);
<a name="l11797"></a>11797     <span class="keywordflow">if</span> (text [len-1] != <span class="charliteral">&#39;\n&#39;</span>)               <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s&quot;</span>,                text);
<a name="l11798"></a>11798     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strcmp (text, endReport) != 0) <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s&quot;</span> <span class="stringliteral">&quot;%s - ERROR: &quot;</span>, text, _TX_VERSION);
<a name="l11799"></a>11799     <span class="keywordflow">else</span>                                    <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s\n&quot;</span>,              text);
<a name="l11800"></a>11800 
<a name="l11801"></a>11801     DWORD n = 0;
<a name="l11802"></a>11802     HANDLE err = GetStdHandle (STD_ERROR_HANDLE);
<a name="l11803"></a>11803     WriteFile (err, text, (DWORD) strlen (text), &amp;n, NULL);
<a name="l11804"></a>11804 
<a name="l11805"></a>11805     <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (restore);
<a name="l11806"></a>11806 
<a name="l11807"></a>11807     <span class="keywordflow">if</span> (*<a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>) <span class="keywordflow">do</span>
<a name="l11808"></a>11808         {
<a name="l11809"></a>11809         HANDLE log = CreateFile (<a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>, GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
<a name="l11810"></a>11810         <span class="keywordflow">if</span> (log == INVALID_HANDLE_VALUE) <span class="keywordflow">break</span>;
<a name="l11811"></a>11811 
<a name="l11812"></a>11812         SetFilePointer (log, 0, NULL, FILE_END);
<a name="l11813"></a>11813         WriteFile (log, text, (DWORD) strlen (text), &amp;n, NULL);
<a name="l11814"></a>11814 
<a name="l11815"></a>11815         CloseHandle (log);
<a name="l11816"></a>11816         <span class="keywordflow">break</span>;
<a name="l11817"></a>11817         }
<a name="l11818"></a>11818         <span class="keywordflow">while</span> (<span class="keyword">false</span>);
<a name="l11819"></a>11819 
<a name="l11820"></a>11820     <span class="keywordflow">if</span> (ret) *ret = 0;
<a name="l11821"></a>11821 
<a name="l11822"></a>11822     <span class="keywordflow">return</span> (type == _CRT_WARN);
<a name="l11823"></a>11823     }
<a name="l11824"></a>11824 
<a name="l11825"></a>11825 <span class="preprocessor">#endif</span>
<a name="l11826"></a>11826 <span class="preprocessor"></span>
<a name="l11827"></a>11827 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11828"></a>11828 
<a name="l11829"></a>11829 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[], <span class="keyword">const</span> <span class="keywordtype">char</span> header[], <span class="keywordtype">unsigned</span> flags <span class="comment">/*= MB_ICONINFORMATION | MB_OKCANCEL*/</span>)
<a name="l11830"></a>11830     {
<a name="l11831"></a>11831 $5  <span class="keyword">static</span> <span class="keywordtype">wchar_t</span> textW   [<a class="code" href="a00084.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры больших статических буферов.">_TX_BIGBUFSIZE</a> * <span class="keyword">sizeof</span> (wchar_t)] = L<span class="stringliteral">&quot;[NULL text]&quot;</span>;
<a name="l11832"></a>11832 $   <span class="keyword">static</span> <span class="keywordtype">wchar_t</span> headerW [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>    * <span class="keyword">sizeof</span> (wchar_t)] = L<span class="stringliteral">&quot;[NULL header]&quot;</span>;
<a name="l11833"></a>11833 
<a name="l11834"></a>11834     <span class="keywordflow">if</span> (text)   {$ MultiByteToWideChar (_TX_CODEPAGE, 0, text,   -1, textW,   <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (textW))   || memset (textW,   0, <span class="keyword">sizeof</span> (textW));   }
<a name="l11835"></a>11835     <span class="keywordflow">if</span> (header) {$ MultiByteToWideChar (_TX_CODEPAGE, 0, header, -1, headerW, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (headerW)) || memset (headerW, 0, <span class="keyword">sizeof</span> (headerW)); }
<a name="l11836"></a>11836 
<a name="l11837"></a>11837 $   HWND wnd = _txCanvas_Window;
<a name="l11838"></a>11838 $   <span class="keywordtype">int</span>  ret = MessageBoxW ((wnd &amp;&amp; IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
<a name="l11839"></a>11839                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST | MB_OKCANCEL );
<a name="l11840"></a>11840 $   <span class="keywordflow">if</span> (ret == IDCANCEL)
<a name="l11841"></a>11841         {
<a name="l11842"></a>11842 $       SendNotifyMessage (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), (_txMain? WM_CLOSE : WM_DESTROY), 0, 0);
<a name="l11843"></a>11843 $       _txWaitFor (!_txCanvas_Window, <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l11844"></a>11844         }
<a name="l11845"></a>11845 
<a name="l11846"></a>11846 $   <span class="keywordflow">return</span> ret;
<a name="l11847"></a>11847     }
<a name="l11848"></a>11848 
<a name="l11849"></a>11849 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11850"></a>11850 
<a name="l11851"></a>11851 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga782025393f08a0efb645b9d2e30f2586" title="Проверяет, нажата ли указанная клавиша.">txGetAsyncKeyState</a> (<span class="keywordtype">int</span> key)
<a name="l11852"></a>11852     {
<a name="l11853"></a>11853 $1  HWND wnd = GetForegroundWindow();
<a name="l11854"></a>11854 
<a name="l11855"></a>11855     <span class="keywordflow">return</span> (GetAsyncKeyState (key) &amp; 0x8000) &amp;&amp;
<a name="l11856"></a>11856            (wnd == <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>() || wnd == Win32::GetConsoleWindow());
<a name="l11857"></a>11857     }
<a name="l11858"></a>11858 
<a name="l11859"></a>11859 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11860"></a>11860 
<a name="l11861"></a>11861 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (<span class="keywordtype">unsigned</span> flags, <span class="keyword">const</span> <span class="keywordtype">char</span> title[], <span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...)
<a name="l11862"></a>11862     {
<a name="l11863"></a>11863 $5  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (format)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l11864"></a>11864 
<a name="l11865"></a>11865 $   va_list arg; va_start (arg, format);
<a name="l11866"></a>11866 $   <span class="keywordtype">bool</span> ok = <span class="keyword">true</span>;
<a name="l11867"></a>11867 
<a name="l11868"></a>11868 <span class="preprocessor">    #if defined (_WIN32_IE) &amp;&amp; (_WIN32_IE &gt;= 0x0500)</span>
<a name="l11869"></a>11869 <span class="preprocessor"></span>
<a name="l11870"></a>11870 $   NOTIFYICONDATA nid = { <span class="keyword">sizeof</span> (nid) };
<a name="l11871"></a>11871 
<a name="l11872"></a>11872 $   nid.uFlags      = NIF_ICON | NIF_TIP | NIF_INFO;
<a name="l11873"></a>11873 $   nid.hWnd        = NULL;
<a name="l11874"></a>11874 $   nid.uID         = 1;
<a name="l11875"></a>11875 $   nid.hIcon       = _txCreateTXIcon (16); assert (nid.hIcon);
<a name="l11876"></a>11876 $   strncpy_s       (nid.szTip,       sizeof (nid.szTip),       <span class="stringliteral">&quot;TXLib Information&quot;</span>, sizeof (nid.szTip));
<a name="l11877"></a>11877 $   strncpy_s       (nid.szInfoTitle, sizeof (nid.szInfoTitle), (title? title : <span class="stringliteral">&quot;TXLib сообщает&quot;</span>), sizeof (nid.szInfoTitle) - 1);
<a name="l11878"></a>11878 $   _tx_vsnprintf_s (nid.szInfo, sizeof (nid.szInfo), format, arg);
<a name="l11879"></a>11879 $   nid.dwInfoFlags = flags;
<a name="l11880"></a>11880 
<a name="l11881"></a>11881 $   <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;\r&quot;</span> _TX_VERSION <span class="stringliteral">&quot; - %s: %s (Icon notification)\n&quot;</span>, nid.szInfoTitle, nid.szInfo);
<a name="l11882"></a>11882 
<a name="l11883"></a>11883 $   ok &amp;= !!Shell_NotifyIcon (NIM_ADD,    (::NOTIFYICONDATA*) &amp;nid);
<a name="l11884"></a>11884 $   ok &amp;= !!Shell_NotifyIcon (NIM_MODIFY, (::NOTIFYICONDATA*) &amp;nid);
<a name="l11885"></a>11885 
<a name="l11886"></a>11886 $   <span class="keywordflow">if</span> (nid.hIcon) DestroyIcon (nid.hIcon) asserted;
<a name="l11887"></a>11887 
<a name="l11888"></a>11888     <span class="preprocessor">#else</span>
<a name="l11889"></a>11889 <span class="preprocessor"></span>
<a name="l11890"></a>11890 $   <span class="keywordtype">char</span> nid_szInfo[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11891"></a>11891 $   _tx_vsnprintf_s (nid_szInfo, <span class="keyword">sizeof</span> (nid_szInfo), format, arg);
<a name="l11892"></a>11892 $   <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;\r&quot;</span> _TX_VERSION <span class="stringliteral">&quot; - %s: %s (Icon notification - NOT displayed)\n&quot;</span>, title, nid_szInfo);
<a name="l11893"></a>11893 $   ok = <span class="keyword">false</span>;
<a name="l11894"></a>11894 
<a name="l11895"></a>11895 $   (void)flags; (void)title;
<a name="l11896"></a>11896 
<a name="l11897"></a>11897 <span class="preprocessor">    #endif</span>
<a name="l11898"></a>11898 <span class="preprocessor"></span>
<a name="l11899"></a>11899 $   va_end (arg);
<a name="l11900"></a>11900     <span class="keywordflow">return</span> ok;
<a name="l11901"></a>11901     }
<a name="l11902"></a>11902 
<a name="l11903"></a>11903 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11904"></a>11904 
<a name="l11905"></a>11905 <span class="keywordtype">void</span> _txTrace (<span class="keyword">const</span> <span class="keywordtype">char</span> file[], <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> func[], <span class="keyword">const</span> <span class="keywordtype">char</span> msg[] <span class="comment">/*= NULL*/</span>, ...)
<a name="l11906"></a>11906     {
<a name="l11907"></a>11907     <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span> = GetCurrentThreadId();
<a name="l11908"></a>11908 
<a name="l11909"></a>11909     <span class="keyword">const</span> <span class="keywordtype">char</span> marks[2][2][3] = {{<span class="stringliteral">&quot;uU&quot;</span>, <span class="stringliteral">&quot;cC&quot;</span>}, {<span class="stringliteral">&quot;mM&quot;</span>, <span class="stringliteral">&quot;??&quot;</span>}};
<a name="l11910"></a>11910 
<a name="l11911"></a>11911     <span class="keywordtype">char</span> mark = marks [<span class="keywordtype">id</span> == _txMainThreadId] [<span class="keywordtype">id</span> == _txCanvas_ThreadId] [(_txLoc::Cur.inTX &gt; 0)];
<a name="l11912"></a>11912 
<a name="l11913"></a>11913     <span class="keywordtype">char</span> msgStr[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11914"></a>11914     <span class="keywordflow">if</span> (msg)
<a name="l11915"></a>11915         {
<a name="l11916"></a>11916         va_list arg; va_start (arg, msg);
<a name="l11917"></a>11917         _tx_vsnprintf_s (msgStr, <span class="keyword">sizeof</span> (msgStr) - 1, msg, arg);
<a name="l11918"></a>11918         va_end (arg);
<a name="l11919"></a>11919         }
<a name="l11920"></a>11920 
<a name="l11921"></a>11921     <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - 0x%p %c%c%c%c%c%d [%c] - %-*s (%5d)  &quot;</span> <span class="stringliteral">&quot;|%*s%s&quot;</span> <span class="stringliteral">&quot;%s%s\n&quot;</span>,
<a name="l11922"></a>11922 
<a name="l11923"></a>11923                          _TX_VERSION, &amp;_txInitialized,
<a name="l11924"></a>11924 
<a name="l11925"></a>11925                          <span class="stringliteral">&quot;cC&quot;</span>[_txConsole], <span class="stringliteral">&quot;mM&quot;</span>[_txMain], <span class="stringliteral">&quot;dD&quot;</span>[_txIsDll], <span class="stringliteral">&quot;rR&quot;</span>[_txRunning], <span class="stringliteral">&quot;eE&quot;</span>[_txExit],
<a name="l11926"></a>11926                          _txLoc::Cur.trace, mark,
<a name="l11927"></a>11927 
<a name="l11928"></a>11928                          (<span class="keywordtype">int</span>) <span class="keyword">sizeof</span> (__FILE__) - 1, (file? file : <span class="stringliteral">&quot;(NULL file)&quot;</span>), line,
<a name="l11929"></a>11929                          2 * (_txLoc::Cur.inTX - 1) * !!func, <span class="stringliteral">&quot;&quot;</span>, (func? func : <span class="stringliteral">&quot;&quot;</span>),
<a name="l11930"></a>11930 
<a name="l11931"></a>11931                          ((*msgStr &amp;&amp; func)? <span class="stringliteral">&quot;: &quot;</span> : <span class="stringliteral">&quot;&quot;</span>), msgStr);
<a name="l11932"></a>11932     }
<a name="l11933"></a>11933 
<a name="l11934"></a>11934 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11935"></a>11935 
<a name="l11936"></a>11936 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...)
<a name="l11937"></a>11937     {
<a name="l11938"></a>11938     <span class="keywordflow">if</span> (!format) <span class="keywordflow">return</span> 0;
<a name="l11939"></a>11939 
<a name="l11940"></a>11940     <span class="keyword">enum</span> { msgbox = 1, print = 2, compr = 4 };
<a name="l11941"></a>11941     <span class="keywordtype">int</span> options = 0;
<a name="l11942"></a>11942 
<a name="l11943"></a>11943     <span class="keywordflow">for</span> (; format &amp;&amp; *format; format++)
<a name="l11944"></a>11944         {
<a name="l11945"></a>11945         <span class="keywordflow">if</span>      (*format == <span class="charliteral">&#39;\a&#39;</span>) options |= msgbox;
<a name="l11946"></a>11946         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*format == <span class="charliteral">&#39;\f&#39;</span>) options |= print;
<a name="l11947"></a>11947         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*format == <span class="charliteral">&#39;\r&#39;</span>) options |= compr;
<a name="l11948"></a>11948         <span class="keywordflow">else</span> <span class="keywordflow">break</span>;
<a name="l11949"></a>11949         }
<a name="l11950"></a>11950 
<a name="l11951"></a>11951     <span class="keywordtype">char</span> text[<a class="code" href="a00084.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры больших статических буферов.">_TX_BIGBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l11952"></a>11952 
<a name="l11953"></a>11953     va_list arg; va_start (arg, format);
<a name="l11954"></a>11954     <span class="keywordtype">int</span> n = (int) _tx_vsnprintf_s (text, <span class="keyword">sizeof</span> (text) - 1-1, format, arg);
<a name="l11955"></a>11955     va_end (arg);
<a name="l11956"></a>11956 
<a name="l11957"></a>11957     <span class="keyword">struct </span>__ { <span class="keyword">static</span> <span class="keywordtype">int</span> trimSpaces (<span class="keywordtype">char</span> str[])
<a name="l11958"></a>11958         {
<a name="l11959"></a>11959         <span class="keywordtype">char</span> *dst = str, *src = str;
<a name="l11960"></a>11960 
<a name="l11961"></a>11961         <span class="keywordflow">for</span> (<span class="keywordtype">char</span> d = <span class="charliteral">&#39; &#39;</span>; d; src++)
<a name="l11962"></a>11962             <span class="keywordflow">if</span> (isspace ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)(*src))) { <span class="keywordflow">if</span> (d != <span class="charliteral">&#39; &#39;</span>) *dst++ = d = <span class="charliteral">&#39; &#39;</span>; }
<a name="l11963"></a>11963             <span class="keywordflow">else</span>                                                 *dst++ = d = *src;
<a name="l11964"></a>11964 
<a name="l11965"></a>11965         <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) (dst - str - 1);
<a name="l11966"></a>11966         }};
<a name="l11967"></a>11967 
<a name="l11968"></a>11968     <span class="keywordflow">if</span> (options &amp; compr)  n = __::trimSpaces (text);
<a name="l11969"></a>11969 
<a name="l11970"></a>11970     OutputDebugString (text);
<a name="l11971"></a>11971 
<a name="l11972"></a>11972     <span class="keywordflow">if</span> (options &amp; print)  fprintf (stderr, <span class="stringliteral">&quot;%s&quot;</span>, text);
<a name="l11973"></a>11973 
<a name="l11974"></a>11974     <span class="keywordflow">if</span> (options &amp; msgbox) <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (text, <span class="stringliteral">&quot;Оказывается, что&quot;</span>, MB_ICONEXCLAMATION);
<a name="l11975"></a>11975 
<a name="l11976"></a>11976     <span class="keywordflow">return</span> n;
<a name="l11977"></a>11977     }
<a name="l11978"></a>11978 
<a name="l11979"></a>11979 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11980"></a>11980 
<a name="l11981"></a>11981 intptr_t _tx_snprintf_s (<span class="keywordtype">char</span> stream[], intptr_t size, <span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...)
<a name="l11982"></a>11982     {
<a name="l11983"></a>11983     <span class="keywordflow">if</span> (!format) <span class="keywordflow">return</span> 0;
<a name="l11984"></a>11984 
<a name="l11985"></a>11985     va_list arg; va_start (arg, format);
<a name="l11986"></a>11986     intptr_t ret = _tx_vsnprintf_s (stream, size, format, arg);
<a name="l11987"></a>11987     va_end (arg);
<a name="l11988"></a>11988 
<a name="l11989"></a>11989     <span class="keywordflow">return</span> ret;
<a name="l11990"></a>11990     }
<a name="l11991"></a>11991 
<a name="l11992"></a>11992 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l11993"></a>11993 
<a name="l11994"></a>11994 intptr_t _tx_vsnprintf_s (<span class="keywordtype">char</span> stream[], intptr_t size, <span class="keyword">const</span> <span class="keywordtype">char</span> format[], va_list arg)
<a name="l11995"></a>11995     {
<a name="l11996"></a>11996     <span class="keywordflow">if</span> (!stream || !format) <span class="keywordflow">return</span> 0;
<a name="l11997"></a>11997 
<a name="l11998"></a>11998 <span class="preprocessor">    #if defined (_TRUNCATE)</span>
<a name="l11999"></a>11999 <span class="preprocessor"></span>    intptr_t ret = _vsnprintf_s (stream, size, _TRUNCATE, format, arg);
<a name="l12000"></a>12000 <span class="preprocessor">    #else</span>
<a name="l12001"></a>12001 <span class="preprocessor"></span>    intptr_t ret = _vsnprintf   (stream, size,            format, arg);
<a name="l12002"></a>12002 <span class="preprocessor">    #endif</span>
<a name="l12003"></a>12003 <span class="preprocessor"></span>
<a name="l12004"></a>12004     <span class="keywordflow">if</span> (ret &lt; 0 &amp;&amp; size &gt;= 4)
<a name="l12005"></a>12005         {
<a name="l12006"></a>12006         <span class="keyword">const</span> <span class="keywordtype">char</span> ellipsis[] = <span class="stringliteral">&quot;...&quot;</span>;
<a name="l12007"></a>12007         <span class="keywordtype">size_t</span>     szEllipsis = <span class="keyword">sizeof</span> (ellipsis) - 1;
<a name="l12008"></a>12008 
<a name="l12009"></a>12009         strncpy_s (stream + size - szEllipsis, szEllipsis+1, ellipsis, szEllipsis);
<a name="l12010"></a>12010         }
<a name="l12011"></a>12011 
<a name="l12012"></a>12012     <span class="keywordflow">return</span> (ret &gt;= 0)? ret : size;
<a name="l12013"></a>12013     }
<a name="l12014"></a>12014 
<a name="l12015"></a>12015 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12016"></a>12016 
<a name="l12017"></a>12017 <span class="preprocessor">#if defined (__CYGWIN__)</span>
<a name="l12018"></a>12018 <span class="preprocessor"></span>
<a name="l12019"></a>12019 <span class="keywordtype">int</span> _getch()
<a name="l12020"></a>12020     {
<a name="l12021"></a>12021     termios oldattr = {}; tcgetattr (STDIN_FILENO, &amp;oldattr);
<a name="l12022"></a>12022 
<a name="l12023"></a>12023     termios newattr = oldattr;
<a name="l12024"></a>12024     newattr.c_lflag &amp;= ~(ICANON | ECHO);
<a name="l12025"></a>12025     tcsetattr (STDIN_FILENO, TCSANOW, &amp;newattr);
<a name="l12026"></a>12026 
<a name="l12027"></a>12027     <span class="keywordtype">int</span> ch = getchar();
<a name="l12028"></a>12028 
<a name="l12029"></a>12029     tcsetattr (STDIN_FILENO, TCSANOW, &amp;oldattr);
<a name="l12030"></a>12030 
<a name="l12031"></a>12031     <span class="keywordflow">return</span> ch;
<a name="l12032"></a>12032     }
<a name="l12033"></a>12033 
<a name="l12034"></a>12034 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12035"></a>12035 
<a name="l12036"></a>12036 <span class="keywordtype">int</span> _putch (<span class="keywordtype">int</span> ch)
<a name="l12037"></a>12037     {
<a name="l12038"></a>12038     termios old = {}; tcgetattr (STDOUT_FILENO, &amp;old);
<a name="l12039"></a>12039 
<a name="l12040"></a>12040     termios cur = old;
<a name="l12041"></a>12041     cur.c_lflag &amp;= ~ICANON;
<a name="l12042"></a>12042     cur.c_lflag |=  ECHO;
<a name="l12043"></a>12043     tcsetattr (STDOUT_FILENO, TCSANOW, &amp;cur);
<a name="l12044"></a>12044 
<a name="l12045"></a>12045     putchar (ch);
<a name="l12046"></a>12046 
<a name="l12047"></a>12047     tcsetattr (STDOUT_FILENO, TCSANOW, &amp;old);
<a name="l12048"></a>12048 
<a name="l12049"></a>12049     <span class="keywordflow">return</span> ch;
<a name="l12050"></a>12050     }
<a name="l12051"></a>12051 
<a name="l12052"></a>12052 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12053"></a>12053 
<a name="l12054"></a>12054 <span class="keywordtype">int</span> _kbhit()
<a name="l12055"></a>12055     {
<a name="l12056"></a>12056     termios old = {}; tcgetattr (STDIN_FILENO, &amp;old);
<a name="l12057"></a>12057 
<a name="l12058"></a>12058     termios cur = old;
<a name="l12059"></a>12059     cur.c_lflag &amp;= ~(ICANON | ECHO);
<a name="l12060"></a>12060     cur.c_cc[VMIN]  = 1;
<a name="l12061"></a>12061     cur.c_cc[VTIME] = 0;
<a name="l12062"></a>12062 
<a name="l12063"></a>12063     tcsetattr (STDIN_FILENO, TCSAFLUSH, &amp;cur);
<a name="l12064"></a>12064 
<a name="l12065"></a>12065     fd_set  fd = {}; FD_SET (STDIN_FILENO, &amp;fd);
<a name="l12066"></a>12066     timeval tv = {};
<a name="l12067"></a>12067 
<a name="l12068"></a>12068     <span class="keywordtype">int</span> res = select (STDIN_FILENO + 1, &amp;fd, NULL, NULL, &amp;tv) &amp;&amp; FD_ISSET (STDIN_FILENO, &amp;fd);
<a name="l12069"></a>12069 
<a name="l12070"></a>12070     tcsetattr (STDIN_FILENO, TCSAFLUSH, &amp;old);
<a name="l12071"></a>12071 
<a name="l12072"></a>12072     <span class="keywordflow">return</span> res;
<a name="l12073"></a>12073     }
<a name="l12074"></a>12074 
<a name="l12075"></a>12075 <span class="preprocessor">#endif</span>
<a name="l12076"></a>12076 <span class="preprocessor"></span>
<a name="l12077"></a>12077 <span class="comment">//}</span>
<a name="l12078"></a>12078 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12079"></a>12079 
<a name="l12080"></a>12080 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12081"></a>12081 <span class="comment">//{          Information</span>
<a name="l12082"></a>12082 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12083"></a>12083 
<a name="l12084"></a>12084 <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keywordtype">bool</span> fileNameOnly <span class="comment">/*= true*/</span>)
<a name="l12085"></a>12085     {
<a name="l12086"></a>12086     <span class="keyword">static</span> <span class="keywordtype">char</span> name[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l12087"></a>12087 
<a name="l12088"></a>12088     <span class="keywordflow">if</span> (!*name)
<a name="l12089"></a>12089         {
<a name="l12090"></a>12090         <span class="keywordflow">if</span> (!GetModuleFileName (NULL, name, <span class="keyword">sizeof</span> (name) - 1)) *name = 0;
<a name="l12091"></a>12091 
<a name="l12092"></a>12092         <span class="keywordtype">char</span>* ext = strrchr (name, <span class="charliteral">&#39;.&#39;</span>);
<a name="l12093"></a>12093         <span class="keywordflow">if</span> (ext) _strlwr_s (ext, <span class="keyword">sizeof</span> (name) - 1 - (ext - name));
<a name="l12094"></a>12094         }
<a name="l12095"></a>12095 
<a name="l12096"></a>12096     assert (*name);
<a name="l12097"></a>12097 
<a name="l12098"></a>12098     <span class="keywordflow">if</span> (fileNameOnly) <span class="keywordflow">return</span> name;
<a name="l12099"></a>12099 
<a name="l12100"></a>12100     <span class="keyword">static</span> <span class="keywordtype">char</span> fullName[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l12101"></a>12101     strncpy_s (fullName, <span class="keyword">sizeof</span> (fullName), name, <span class="keyword">sizeof</span> (fullName) - 1);
<a name="l12102"></a>12102 
<a name="l12103"></a>12103     <span class="keywordtype">char</span>* title = strrchr (fullName, <span class="charliteral">&#39;\\&#39;</span>); <span class="keywordflow">if</span> (!title) title = fullName;
<a name="l12104"></a>12104     <span class="keywordtype">char</span>* ext   = strrchr (fullName,  <span class="charliteral">&#39;.&#39;</span>); <span class="keywordflow">if</span> (!ext)   ext   = fullName + strlen (fullName);
<a name="l12105"></a>12105 
<a name="l12106"></a>12106     <span class="keywordtype">size_t</span> sz = <span class="keyword">sizeof</span> (fullName) - (ext - fullName);
<a name="l12107"></a>12107     strncpy_s (ext, sz-1, <span class="stringliteral">&quot; - TXLib&quot;</span>, sz);
<a name="l12108"></a>12108 
<a name="l12109"></a>12109     <span class="keywordflow">return</span> title + 1;
<a name="l12110"></a>12110     }
<a name="l12111"></a>12111 
<a name="l12112"></a>12112 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12113"></a>12113 
<a name="l12114"></a>12114 <span class="keyword">const</span> <span class="keywordtype">char</span>* _txAppInfo()
<a name="l12115"></a>12115     {
<a name="l12116"></a>12116 $1  time_t timeT     = time (NULL) - clock()/CLOCKS_PER_SEC;
<a name="l12117"></a>12117     <span class="keywordtype">char</span>   timeS[32] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l12118"></a>12118     ctime_s (timeS, <span class="keyword">sizeof</span> (timeS), &amp;timeT);
<a name="l12119"></a>12119 
<a name="l12120"></a>12120     <span class="keyword">static</span> <span class="keywordtype">char</span> text[<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l12121"></a>12121     <span class="keywordtype">char</span> cwd [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l12122"></a>12122 
<a name="l12123"></a>12123     _tx_snprintf_s (text, <span class="keyword">sizeof</span> (text) - 1,
<a name="l12124"></a>12124 
<a name="l12125"></a>12125                     <span class="stringliteral">&quot;Developed with:\n\n&quot;</span>
<a name="l12126"></a>12126                     <span class="stringliteral">&quot;The Dumb Artist Library (TX Library)\n&quot;</span>
<a name="l12127"></a>12127                     _TX_VERSION <span class="stringliteral">&quot;\n&quot;</span> _TX_AUTHOR <span class="stringliteral">&quot;\n&quot;</span>
<a name="l12128"></a>12128                     <span class="stringliteral">&quot;See license on: http://txlib.ru\n\n&quot;</span>
<a name="l12129"></a>12129 
<a name="l12130"></a>12130                     <span class="stringliteral">&quot;TXLib file:&quot;</span> <span class="stringliteral">&quot;\t&quot;</span> __FILE__ <span class="stringliteral">&quot;\n&quot;</span>
<a name="l12131"></a>12131                     <span class="stringliteral">&quot;Compiled:&quot;</span>   <span class="stringliteral">&quot;\t&quot;</span> __DATE__ <span class="stringliteral">&quot; &quot;</span> __TIME__ <span class="stringliteral">&quot;, &quot;</span> <a class="code" href="a00084.htm#gadd1c9ccd036228402b807abaea14f7ee" title="Имя и версия текущего компилятора">__TX_COMPILER__</a> <span class="stringliteral">&quot;, %s, %d-bit, &quot;</span> <a class="code" href="a00084.htm#ga3e287c38947fea870d01588fbd2a5fc9" title="Имя режима сборки">_TX_BUILDMODE</a> <span class="stringliteral">&quot;\n&quot;</span>
<a name="l12132"></a>12132                     <span class="stringliteral">&quot;Started:&quot;</span>    <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%.6s %.4s %.8s\n\n&quot;</span>
<a name="l12133"></a>12133 
<a name="l12134"></a>12134                     <span class="stringliteral">&quot;Run file:&quot;</span>   <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%s\n&quot;</span>
<a name="l12135"></a>12135                     <span class="stringliteral">&quot;Directory:&quot;</span>  <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l12136"></a>12136 
<a name="l12137"></a>12137     #<span class="keywordflow">if</span>   defined (_MSC_VER)
<a name="l12138"></a>12138                     <span class="stringliteral">&quot;MSVC Runtime&quot;</span>,
<a name="l12139"></a>12139     #elif defined (__CYGWIN__)
<a name="l12140"></a>12140                     <span class="stringliteral">&quot;Cygwin Runtime&quot;</span>,
<a name="l12141"></a>12141     #elif defined (_GCC_VER) &amp;&amp; defined (_WIN64)
<a name="l12142"></a>12142                     __mingw_get_crt_info(),
<a name="l12143"></a>12143     #<span class="keywordflow">else</span>
<a name="l12144"></a>12144                     <span class="stringliteral">&quot;MinGW Runtime &quot;</span> TX_QUOTE (__MINGW32_MAJOR_VERSION) <span class="stringliteral">&quot;.&quot;</span> TX_QUOTE (__MINGW32_MINOR_VERSION),
<a name="l12145"></a>12145     #endif
<a name="l12146"></a>12146                     (<span class="keyword">sizeof</span> (<span class="keywordtype">void</span>*) == <span class="keyword">sizeof</span> (DWORD))? 32 : 64,
<a name="l12147"></a>12147 
<a name="l12148"></a>12148                     timeS + 4, timeS + 20, timeS + 11,              <span class="comment">// These offsets are ANSI standardized</span>
<a name="l12149"></a>12149                     <a class="code" href="a00081.htm#ga12ffceef73c1a081c073f4d7c2914618" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a>(),
<a name="l12150"></a>12150                     _getcwd (cwd, <span class="keyword">sizeof</span> (cwd) - 1));
<a name="l12151"></a>12151 
<a name="l12152"></a>12152     <span class="keywordflow">return</span> text;
<a name="l12153"></a>12153     }
<a name="l12154"></a>12154 
<a name="l12155"></a>12155 <span class="comment">//}</span>
<a name="l12156"></a>12156 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12157"></a>12157 
<a name="l12159"></a>12159 <span class="comment">//}</span>
<a name="l12160"></a>12160 <span class="comment">//=================================================================================================================</span>
<a name="l12161"></a>12161 
<a name="l12162"></a>12162 <span class="comment">//=================================================================================================================</span>
<a name="l12163"></a>12163 <span class="comment">//{          TXLib API implementation</span>
<a name="l12164"></a>12164 <span class="comment">//           Реализация TXLib API</span>
<a name="l12165"></a>12165 <span class="comment">//=================================================================================================================</span>
<a name="l12166"></a>12166 
<a name="l12167"></a>12167 <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00081.htm#gaf382eed71ecf8229882fe544035d66dc" title="Возвращает строку с информацией о текущей версии библиотеки.">txVersion</a>()
<a name="l12168"></a>12168     {
<a name="l12169"></a>12169     <span class="keywordflow">return</span> _TX_VERSION;
<a name="l12170"></a>12170     }
<a name="l12171"></a>12171 
<a name="l12172"></a>12172 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12173"></a>12173 
<a name="l12174"></a>12174 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#gab2c5f0eff263a7297997281c3d451b91" title="Возвращает номер версии библиотеки.">txVersionNumber</a>()
<a name="l12175"></a>12175     {
<a name="l12176"></a>12176     <span class="keywordflow">return</span> <a class="code" href="a00084.htm#ga6b76c63cd895c2be63ac8e690028623b" title="Текущая версия библиотеки.">_TX_VER</a>;
<a name="l12177"></a>12177     }
<a name="l12178"></a>12178 
<a name="l12179"></a>12179 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12180"></a>12180 
<a name="l12181"></a>12181 <span class="keyword">inline</span> HWND <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>()
<a name="l12182"></a>12182     {
<a name="l12183"></a>12183 $0  <span class="keywordflow">return</span> _txCanvas_Window;
<a name="l12184"></a>12184     }
<a name="l12185"></a>12185 
<a name="l12186"></a>12186 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12187"></a>12187 
<a name="l12188"></a>12188 <span class="keyword">inline</span> HDC&amp; <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>()
<a name="l12189"></a>12189     {
<a name="l12190"></a>12190 $0  <span class="keywordflow">return</span> _txCanvas_BackBuf[0];
<a name="l12191"></a>12191     }
<a name="l12192"></a>12192 
<a name="l12193"></a>12193 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12194"></a>12194 
<a name="l12195"></a>12195 <span class="keyword">inline</span> RGBQUAD* <a class="code" href="a00081.htm#ga3a8ec79acc0dcbcc04bff3aecc235b4e" title="Возвращает буфер памяти, связанный с холстом (HDC) TXLib.">txVideoMemory</a>()
<a name="l12196"></a>12196     {
<a name="l12197"></a>12197     <span class="keywordflow">return</span> _txCanvas_Pixels;
<a name="l12198"></a>12198     }
<a name="l12199"></a>12199 
<a name="l12200"></a>12200 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12201"></a>12201 
<a name="l12202"></a>12202 POINT <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12203"></a>12203     {
<a name="l12204"></a>12204 $0  <span class="keyword">static</span> POINT err = {-1, -1};
<a name="l12205"></a>12205 
<a name="l12206"></a>12206     <span class="keywordflow">if</span> (!dc) {$ POINT screen = { GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN) }; <span class="keywordflow">return</span> screen; };
<a name="l12207"></a>12207 
<a name="l12208"></a>12208     <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) {$ <span class="keywordflow">return</span> err; }
<a name="l12209"></a>12209 
<a name="l12210"></a>12210 $   BITMAP bmap = {};
<a name="l12211"></a>12211 $   <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (Win32::GetObject (Win32::GetCurrentObject (dc, OBJ_BITMAP), <span class="keyword">sizeof</span> (bmap), &amp;bmap), dc) asserted;
<a name="l12212"></a>12212 
<a name="l12213"></a>12213 $   POINT  size = { bmap.bmWidth, bmap.bmHeight };
<a name="l12214"></a>12214 $   <span class="keywordflow">return</span> size;
<a name="l12215"></a>12215     }
<a name="l12216"></a>12216 
<a name="l12217"></a>12217 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12218"></a>12218 
<a name="l12219"></a>12219 <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gab79782d80f6c61587d02f0633aa2f198" title="Возвращает ширину окна или холста.">txGetExtentX</a> (HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12220"></a>12220     {
<a name="l12221"></a>12221     <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (dc) .x;
<a name="l12222"></a>12222     }
<a name="l12223"></a>12223 
<a name="l12224"></a>12224 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12225"></a>12225 
<a name="l12226"></a>12226 <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gaa9bb7fd84e0b9f59c96be89d70c74321" title="Возвращает высоту окна или холста.">txGetExtentY</a> (HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12227"></a>12227     {
<a name="l12228"></a>12228     <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (dc) .y;
<a name="l12229"></a>12229     }
<a name="l12230"></a>12230 
<a name="l12231"></a>12231 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12232"></a>12232 
<a name="l12233"></a>12233 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga0a3cf3a018cea9d5889d2626e9a37136" title="Уничтожает окно.">txDestroyWindow</a> (HWND wnd <span class="comment">/*= txWindow()*/</span>)
<a name="l12234"></a>12234     {
<a name="l12235"></a>12235 $1  <span class="keywordflow">if</span> (!wnd || !<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12236"></a>12236 
<a name="l12237"></a>12237 $   <span class="keywordflow">if</span> (wnd != <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>())
<a name="l12238"></a>12238         {
<a name="l12239"></a>12239 $       <span class="keywordflow">return</span> !!SendNotifyMessage (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), _TX_WM_DESTROYWND, 0, (LPARAM) wnd);
<a name="l12240"></a>12240         }
<a name="l12241"></a>12241 
<a name="l12242"></a>12242 $   <span class="keywordflow">if</span> (SendNotifyMessage (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), (_txMain? WM_CLOSE : WM_DESTROY), 0, 0) == 0) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12243"></a>12243 
<a name="l12244"></a>12244 $   <span class="keywordflow">if</span> (_txMain)
<a name="l12245"></a>12245         {
<a name="l12246"></a>12246 $       <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_WARNING, NULL, <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Очень, очень плохо завершать программу через txDestroyWindow().\n\n&quot;</span>
<a name="l12247"></a>12247                                                <span class="stringliteral">&quot;Возвращайтесь через main(), там вам будут рады.\n&quot;</span>);
<a name="l12248"></a>12248 $       Sleep (<a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l12249"></a>12249         }
<a name="l12250"></a>12250 
<a name="l12251"></a>12251 $   _txWaitFor (!_txCanvas_Window, <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>);
<a name="l12252"></a>12252 
<a name="l12253"></a>12253 $   <span class="keywordflow">return</span> _txCanvas_Window == NULL;
<a name="l12254"></a>12254     }
<a name="l12255"></a>12255 
<a name="l12256"></a>12256 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12257"></a>12257 
<a name="l12258"></a>12258 HPEN <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (COLORREF color, <span class="keywordtype">double</span> thickness <span class="comment">/*= 1*/</span>, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12259"></a>12259     {
<a name="l12260"></a>12260 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> NULL;
<a name="l12261"></a>12261 
<a name="l12262"></a>12262 $   HPEN pen = Win32::CreatePen ((color == <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>? PS_NULL : PS_SOLID), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (thickness), color);
<a name="l12263"></a>12263 
<a name="l12264"></a>12264 $   <span class="keywordflow">if</span> (!pen) <span class="keywordflow">return</span> (HPEN) NULL;
<a name="l12265"></a>12265 
<a name="l12266"></a>12266 $   <span class="keywordflow">if</span> (!_txBuffer_Select (pen, dc))
<a name="l12267"></a>12267         {
<a name="l12268"></a>12268 $       Win32::DeleteObject (pen);
<a name="l12269"></a>12269 $       <span class="keywordflow">return</span> (HPEN) NULL;
<a name="l12270"></a>12270         }
<a name="l12271"></a>12271 
<a name="l12272"></a>12272 $   <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (Win32::SetTextColor (dc, color), dc) == CLR_INVALID)
<a name="l12273"></a>12273         {$ <span class="keywordflow">return</span> (HPEN) NULL; }
<a name="l12274"></a>12274 
<a name="l12275"></a>12275 $   <span class="keywordflow">return</span> pen;
<a name="l12276"></a>12276     }
<a name="l12277"></a>12277 
<a name="l12278"></a>12278 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12279"></a>12279 
<a name="l12280"></a>12280 COLORREF txColor (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l12281"></a>12281     {
<a name="l12282"></a>12282 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l12283"></a>12283 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l12284"></a>12284 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l12285"></a>12285 
<a name="l12286"></a>12286 $   COLORREF color = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (red * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (green * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (blue * 255));
<a name="l12287"></a>12287 
<a name="l12288"></a>12288 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga66facc5848748507d3ea48c75b33ba23" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (color)? color : CLR_INVALID;
<a name="l12289"></a>12289     }
<a name="l12290"></a>12290 
<a name="l12291"></a>12291 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12292"></a>12292 
<a name="l12293"></a>12293 COLORREF <a class="code" href="a00081.htm#gab6462db4dbcca4915d460036c6c8896d" title="Возвращает текущий цвет линий и текста.">txGetColor</a> (HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12294"></a>12294     {
<a name="l12295"></a>12295 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l12296"></a>12296 
<a name="l12297"></a>12297 $   HGDIOBJ obj = <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetCurrentObject (dc, OBJ_PEN)), dc);
<a name="l12298"></a>12298 $   assert (obj); <span class="keywordflow">if</span> (!obj) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l12299"></a>12299 
<a name="l12300"></a>12300 $   <span class="keyword">union </span>{ EXTLOGPEN extLogPen; LOGPEN LogPen; } buf = {};
<a name="l12301"></a>12301 
<a name="l12302"></a>12302 $   <span class="keywordtype">int</span> size = Win32::GetObject (obj, 0, NULL);
<a name="l12303"></a>12303 $   Win32::GetObject (obj, <span class="keyword">sizeof</span> (buf), &amp;buf) asserted;
<a name="l12304"></a>12304 
<a name="l12305"></a>12305 $   return (size == sizeof (LOGPEN))? buf.LogPen.lopnColor : buf.extLogPen.elpColor;
<a name="l12306"></a>12306     }
<a name="l12307"></a>12307 
<a name="l12308"></a>12308 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12309"></a>12309 
<a name="l12310"></a>12310 HBRUSH <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (COLORREF color, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12311"></a>12311     {
<a name="l12312"></a>12312 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> NULL;
<a name="l12313"></a>12313 
<a name="l12314"></a>12314 $   HBRUSH brush = (color == <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>)? (HBRUSH) Win32::GetStockObject (HOLLOW_BRUSH) : Win32::CreateSolidBrush (color);
<a name="l12315"></a>12315 
<a name="l12316"></a>12316 $   <span class="keywordflow">return</span> (_txBuffer_Select (brush, dc))? brush : (Win32::DeleteObject (brush), (HBRUSH) NULL);
<a name="l12317"></a>12317     }
<a name="l12318"></a>12318 
<a name="l12319"></a>12319 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12320"></a>12320 
<a name="l12321"></a>12321 COLORREF txFillColor (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l12322"></a>12322     {
<a name="l12323"></a>12323 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l12324"></a>12324 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l12325"></a>12325 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l12326"></a>12326 
<a name="l12327"></a>12327 $   COLORREF color = <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (red * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (green * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (blue * 255));
<a name="l12328"></a>12328 
<a name="l12329"></a>12329 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#gad21ad5660a5423f31c2c8e77329758b2" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (color)? color : CLR_INVALID;
<a name="l12330"></a>12330     }
<a name="l12331"></a>12331 
<a name="l12332"></a>12332 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12333"></a>12333 
<a name="l12334"></a>12334 COLORREF <a class="code" href="a00081.htm#ga4d83b7e2d67f422cf703e15f2d7c4dfa" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a> (HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12335"></a>12335     {
<a name="l12336"></a>12336 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l12337"></a>12337 
<a name="l12338"></a>12338 $   HGDIOBJ obj = <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetCurrentObject (dc, OBJ_BRUSH)), dc);
<a name="l12339"></a>12339 $   assert (obj); <span class="keywordflow">if</span> (!obj) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l12340"></a>12340 
<a name="l12341"></a>12341 $   LOGBRUSH buf = {};
<a name="l12342"></a>12342 $   <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetObject (obj, <span class="keyword">sizeof</span> (buf), &amp;buf)), dc) asserted;
<a name="l12343"></a>12343 
<a name="l12344"></a>12344 $   return buf.lbColor;
<a name="l12345"></a>12345     }
<a name="l12346"></a>12346 
<a name="l12347"></a>12347 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12348"></a>12348 
<a name="l12349"></a>12349 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga78e83baeb6a02d5fa33dd8b062e513d9" title="Стирает холст текущим цветом заполнения.">txClear</a> (HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12350"></a>12350     {
<a name="l12351"></a>12351 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12352"></a>12352 
<a name="l12353"></a>12353 $   POINT size = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (dc);
<a name="l12354"></a>12354 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::PatBlt (dc, 0, 0, size.x, size.y, PATCOPY)), dc);
<a name="l12355"></a>12355     }
<a name="l12356"></a>12356 
<a name="l12357"></a>12357 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12358"></a>12358 
<a name="l12359"></a>12359 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gafafd861ab7dc599b2e68b258b6727c85" title="Рисует пиксель (точку на экране).">txSetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, COLORREF color, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12360"></a>12360     {
<a name="l12361"></a>12361 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12362"></a>12362 
<a name="l12363"></a>12363 $   <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::SetPixel (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y), color)), dc);
<a name="l12364"></a>12364 
<a name="l12365"></a>12365 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l12366"></a>12366     }
<a name="l12367"></a>12367 
<a name="l12368"></a>12368 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12369"></a>12369 
<a name="l12370"></a>12370 <span class="keyword">inline</span> <span class="keywordtype">bool</span> txPixel (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12371"></a>12371     {
<a name="l12372"></a>12372 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l12373"></a>12373 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l12374"></a>12374 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l12375"></a>12375 
<a name="l12376"></a>12376 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#gafafd861ab7dc599b2e68b258b6727c85" title="Рисует пиксель (точку на экране).">txSetPixel</a> (x, y, <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (red * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (green * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (blue * 255)), dc);
<a name="l12377"></a>12377     }
<a name="l12378"></a>12378 
<a name="l12379"></a>12379 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12380"></a>12380 
<a name="l12381"></a>12381 <span class="keyword">inline</span> COLORREF <a class="code" href="a00081.htm#ga90daedc95ac28938003edb5b50479542" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12382"></a>12382     {
<a name="l12383"></a>12383 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l12384"></a>12384 
<a name="l12385"></a>12385 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetPixel (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y))), dc);
<a name="l12386"></a>12386     }
<a name="l12387"></a>12387 
<a name="l12388"></a>12388 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12389"></a>12389 
<a name="l12390"></a>12390 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaaee38df6f38b6f1729b9db1c4ac23e65" title="Рисует линию.">txLine</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12391"></a>12391     {
<a name="l12392"></a>12392 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12393"></a>12393 
<a name="l12394"></a>12394 $   <span class="keywordtype">bool</span> ok  = <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::MoveToEx (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), NULL)), dc);
<a name="l12395"></a>12395 $        ok &amp;= <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::LineTo   (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1)      )), dc);
<a name="l12396"></a>12396 
<a name="l12397"></a>12397 $   <span class="keywordflow">return</span> ok;
<a name="l12398"></a>12398     }
<a name="l12399"></a>12399 
<a name="l12400"></a>12400 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12401"></a>12401 
<a name="l12402"></a>12402 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga18a0418f3c06463e958077cddf2a4864" title="Рисует прямоугольник.">txRectangle</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12403"></a>12403     {
<a name="l12404"></a>12404 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12405"></a>12405 
<a name="l12406"></a>12406 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::Rectangle (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1))), dc);
<a name="l12407"></a>12407     }
<a name="l12408"></a>12408 
<a name="l12409"></a>12409 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12410"></a>12410 
<a name="l12411"></a>12411 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gacbbb638439ad7ba88804178516019fb1" title="Рисует ломаную линию или многоугольник.">txPolygon</a> (<span class="keyword">const</span> POINT points[], <span class="keywordtype">int</span> numPoints, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12412"></a>12412     {
<a name="l12413"></a>12413 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED    (points)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12414"></a>12414 $   <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc))     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12415"></a>12415 
<a name="l12416"></a>12416 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Polygon (dc, points, numPoints)), dc);
<a name="l12417"></a>12417     }
<a name="l12418"></a>12418 
<a name="l12419"></a>12419 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12420"></a>12420 
<a name="l12421"></a>12421 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaaf82e7c5a0fd06548f42c757f73d3dae" title="Рисует эллипс.">txEllipse</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12422"></a>12422     {
<a name="l12423"></a>12423 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12424"></a>12424 
<a name="l12425"></a>12425 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::Ellipse (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1))), dc);
<a name="l12426"></a>12426     }
<a name="l12427"></a>12427 
<a name="l12428"></a>12428 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12429"></a>12429 
<a name="l12430"></a>12430 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> r)
<a name="l12431"></a>12431     {
<a name="l12432"></a>12432 $1  <span class="keywordflow">return</span> <a class="code" href="a00081.htm#gaaf82e7c5a0fd06548f42c757f73d3dae" title="Рисует эллипс.">txEllipse</a> (x-r, y-r, x+r, y+r);
<a name="l12433"></a>12433     }
<a name="l12434"></a>12434 
<a name="l12435"></a>12435 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12436"></a>12436 
<a name="l12437"></a>12437 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga5e1e4cc39cc18962bb480c4adfa1344d" title="Рисует дугу эллипса.">txArc</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12438"></a>12438     {
<a name="l12439"></a>12439 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12440"></a>12440 
<a name="l12441"></a>12441 $   POINT center = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((x0 + x1) /2), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((y0 + y1) /2) };
<a name="l12442"></a>12442 
<a name="l12443"></a>12443 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l12444"></a>12444            end   = (startAngle + totalAngle) * <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l12445"></a>12445 
<a name="l12446"></a>12446 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Arc (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1),
<a name="l12447"></a>12447                                      <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (start)), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (start)),
<a name="l12448"></a>12448                                      <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (end)),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (end)))), dc);
<a name="l12449"></a>12449     }
<a name="l12450"></a>12450 
<a name="l12451"></a>12451 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12452"></a>12452 
<a name="l12453"></a>12453 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga8e06e3abcb6b3724d332feb8aa83a8df" title="Рисует сектор эллипса.">txPie</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12454"></a>12454     {
<a name="l12455"></a>12455 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12456"></a>12456 
<a name="l12457"></a>12457 $   POINT center = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((x0 + x1) /2), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((y0 + y1) /2) };
<a name="l12458"></a>12458 
<a name="l12459"></a>12459 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l12460"></a>12460            end   = (startAngle + totalAngle) * <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l12461"></a>12461 
<a name="l12462"></a>12462 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Pie (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1),
<a name="l12463"></a>12463                                      <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (start)), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (start)),
<a name="l12464"></a>12464                                      <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (end)),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (end)))), dc);
<a name="l12465"></a>12465     }
<a name="l12466"></a>12466 
<a name="l12467"></a>12467 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12468"></a>12468 
<a name="l12469"></a>12469 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga59468ca0fd4c182ac0a03573267eb3e9" title="Рисует хорду эллипса.">txChord</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12470"></a>12470     {
<a name="l12471"></a>12471 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12472"></a>12472 
<a name="l12473"></a>12473 $   POINT center = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((x0 + x1) /2), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((y0 + y1) /2) };
<a name="l12474"></a>12474 
<a name="l12475"></a>12475 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l12476"></a>12476            end   = (startAngle + totalAngle) * <a class="code" href="a00080.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l12477"></a>12477 
<a name="l12478"></a>12478 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Chord (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1),
<a name="l12479"></a>12479                                        <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (start)), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (start)),
<a name="l12480"></a>12480                                        <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (end)),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (end)))), dc);
<a name="l12481"></a>12481     }
<a name="l12482"></a>12482 
<a name="l12483"></a>12483 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12484"></a>12484 
<a name="l12485"></a>12485 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga8adde0a20efa7597d8653653817353b2" title="Заливает произвольный контур текущим цветом заполнения.">txFloodFill</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y,
<a name="l12486"></a>12486                   COLORREF color <span class="comment">/*= TX_TRANSPARENT*/</span>, DWORD mode <span class="comment">/*= FLOODFILLSURFACE*/</span>, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12487"></a>12487     {
<a name="l12488"></a>12488 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12489"></a>12489 
<a name="l12490"></a>12490 $   <span class="keywordflow">if</span> (color == <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>) color = <a class="code" href="a00081.htm#ga90daedc95ac28938003edb5b50479542" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (x, y, dc);
<a name="l12491"></a>12491 
<a name="l12492"></a>12492 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::ExtFloodFill (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y), color, mode)), dc);
<a name="l12493"></a>12493     }
<a name="l12494"></a>12494 
<a name="l12495"></a>12495 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12496"></a>12496 
<a name="l12497"></a>12497 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> text[], HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12498"></a>12498     {
<a name="l12499"></a>12499 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED    (text)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12500"></a>12500 $   <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12501"></a>12501 
<a name="l12502"></a>12502 $   <span class="keywordtype">int</span> len = (int) strlen (text);
<a name="l12503"></a>12503 $   <span class="keywordtype">bool</span> ok = <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::TextOut (dc, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y), text, len)), dc);
<a name="l12504"></a>12504 
<a name="l12505"></a>12505 $   <span class="keywordflow">return</span> ok;
<a name="l12506"></a>12506     }
<a name="l12507"></a>12507 
<a name="l12508"></a>12508 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12509"></a>12509 
<a name="l12510"></a>12510 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaf6a9b31e58b6a0523ce1636a97053606" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keyword">const</span> <span class="keywordtype">char</span> text[],
<a name="l12511"></a>12511                  <span class="keywordtype">unsigned</span> format <span class="comment">/*= DT_CENTER | DT_VCENTER | DT_WORDBREAK | DT_WORD_ELLIPSIS*/</span>,
<a name="l12512"></a>12512                  HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12513"></a>12513     {
<a name="l12514"></a>12514 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED    (text)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12515"></a>12515 $   <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12516"></a>12516 
<a name="l12517"></a>12517 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l12518"></a>12518 <span class="preprocessor"></span>
<a name="l12519"></a>12519 $   <span class="keywordflow">if</span> (x0 &gt; x1)
<a name="l12520"></a>12520         {
<a name="l12521"></a>12521 $       SetLastError (ERROR_INVALID_DATA);
<a name="l12522"></a>12522 $       <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Параметр x0 = %lg больше, чем x1 = %lg. Текст выводиться не будет.&quot;</span>, x0, x1);
<a name="l12523"></a>12523         }
<a name="l12524"></a>12524 
<a name="l12525"></a>12525 $   <span class="keywordflow">if</span> (y0 &gt; y1)
<a name="l12526"></a>12526         {
<a name="l12527"></a>12527 $       SetLastError (ERROR_INVALID_DATA);
<a name="l12528"></a>12528 $       <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Параметр y0 = %lg больше, чем y1 = %lg. Текст выводиться не будет.&quot;</span>, y0, y1);
<a name="l12529"></a>12529         }
<a name="l12530"></a>12530 
<a name="l12531"></a>12531 <span class="preprocessor">#endif</span>
<a name="l12532"></a>12532 <span class="preprocessor"></span>
<a name="l12533"></a>12533 $   RECT r = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1) };
<a name="l12534"></a>12534 
<a name="l12535"></a>12535 $   <span class="keywordflow">if</span> (!strchr (text, <span class="charliteral">&#39;\n&#39;</span>)) format |= DT_SINGLELINE;
<a name="l12536"></a>12536 
<a name="l12537"></a>12537 $   <span class="keywordtype">unsigned</span> prev = <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a> (TA_LEFT | TA_TOP | TA_NOUPDATECP, dc);
<a name="l12538"></a>12538 
<a name="l12539"></a>12539 $   <span class="keywordtype">bool</span> ok = <span class="keyword">false</span>;
<a name="l12540"></a>12540 
<a name="l12541"></a>12541 $   <span class="keywordflow">if</span> (Win32::DrawText)
<a name="l12542"></a>12542         {
<a name="l12543"></a>12543 $       ok = !!<a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::DrawText (dc, text, -1, &amp;r, format)), dc);
<a name="l12544"></a>12544 $       Win32::GetPixel (dc, 0, 0);
<a name="l12545"></a>12545 $       ok = <span class="keyword">true</span>;
<a name="l12546"></a>12546         }
<a name="l12547"></a>12547     <span class="keywordflow">else</span>
<a name="l12548"></a>12548         {
<a name="l12549"></a>12549 $       <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a> ((x0 + x1) / 2, (y0 + y1) / 2, text);
<a name="l12550"></a>12550 $       ok = <span class="keyword">false</span>;
<a name="l12551"></a>12551         }
<a name="l12552"></a>12552 
<a name="l12553"></a>12553 $   <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a> (prev, dc);
<a name="l12554"></a>12554 
<a name="l12555"></a>12555 $   <span class="keywordflow">return</span> ok;
<a name="l12556"></a>12556     }
<a name="l12557"></a>12557 
<a name="l12558"></a>12558 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12559"></a>12559 
<a name="l12560"></a>12560 HFONT <a class="code" href="a00081.htm#ga6689b9a89add9c5eb5cf54a8c86539a4" title="Выбирает текущий шрифт, его размер и другие атрибуты.">txSelectFont</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[], <span class="keywordtype">double</span> sizeY, <span class="keywordtype">double</span> sizeX <span class="comment">/*= -1*/</span>,
<a name="l12561"></a>12561                     <span class="keywordtype">int</span> bold <span class="comment">/*= FW_DONTCARE*/</span>, <span class="keywordtype">bool</span> italic <span class="comment">/*= false*/</span>, <span class="keywordtype">bool</span> underline <span class="comment">/*= false*/</span>,
<a name="l12562"></a>12562                     <span class="keywordtype">bool</span> strikeout <span class="comment">/*= false*/</span>, <span class="keywordtype">double</span> angle <span class="comment">/*= 0*/</span>,
<a name="l12563"></a>12563                     HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12564"></a>12564     {
<a name="l12565"></a>12565 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED    (name)) <span class="keywordflow">return</span> NULL;
<a name="l12566"></a>12566 $   <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc))   <span class="keywordflow">return</span> NULL;
<a name="l12567"></a>12567 
<a name="l12568"></a>12568 $   HFONT font = <a class="code" href="a00081.htm#ga794901725b6c4a96f585742b70c0ea05" title="Ищет шрифт по его названию.">txFontExist</a> (name)?
<a name="l12569"></a>12569                      Win32::CreateFont (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeY), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((sizeX &gt;= 0)? sizeX : sizeY/3),
<a name="l12570"></a>12570                                         <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (angle*10), 0, bold, italic, underline, strikeout,
<a name="l12571"></a>12571                                         RUSSIAN_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l12572"></a>12572                                         DEFAULT_QUALITY, DEFAULT_PITCH, name)
<a name="l12573"></a>12573                      :
<a name="l12574"></a>12574                      (HFONT) Win32::GetStockObject (SYSTEM_FIXED_FONT);
<a name="l12575"></a>12575 
<a name="l12576"></a>12576 $   _txBuffer_Select (font, dc);
<a name="l12577"></a>12577 
<a name="l12578"></a>12578 $   <span class="keywordflow">return</span> font;
<a name="l12579"></a>12579     }
<a name="l12580"></a>12580 
<a name="l12581"></a>12581 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12582"></a>12582 
<a name="l12583"></a>12583 SIZE <a class="code" href="a00081.htm#ga64af5f87cd652548278ff98d26f58148" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[], HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12584"></a>12584     {
<a name="l12585"></a>12585 $1  SIZE size = {-1, -1};
<a name="l12586"></a>12586 
<a name="l12587"></a>12587 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED    (text)) <span class="keywordflow">return</span> size;
<a name="l12588"></a>12588 $   <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc))   <span class="keywordflow">return</span> size;
<a name="l12589"></a>12589 
<a name="l12590"></a>12590 $   <span class="keywordtype">size_t</span> len = strlen (text);
<a name="l12591"></a>12591 $   <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetTextExtentPoint32 (dc, text, (<span class="keywordtype">int</span>) len, &amp;size)), dc) asserted;
<a name="l12592"></a>12592 
<a name="l12593"></a>12593 $   return size;
<a name="l12594"></a>12594     }
<a name="l12595"></a>12595 
<a name="l12596"></a>12596 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12597"></a>12597 
<a name="l12598"></a>12598 <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gad5483eacac697420a84f66733e45ed02" title="Вычисляет ширину текстовой надписи.">txGetTextExtentX</a> (const <span class="keywordtype">char</span> text[], HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12599"></a>12599     {
<a name="l12600"></a>12600 $1  <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga64af5f87cd652548278ff98d26f58148" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (text, dc) .cx;
<a name="l12601"></a>12601     }
<a name="l12602"></a>12602 
<a name="l12603"></a>12603 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12604"></a>12604 
<a name="l12605"></a>12605 <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gac021e9984ef217a7a8c14094e3d684c9" title="Вычисляет высоту текстовой надписи.">txGetTextExtentY</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[], HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12606"></a>12606     {
<a name="l12607"></a>12607 $1  <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga64af5f87cd652548278ff98d26f58148" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (text, dc) .cy;
<a name="l12608"></a>12608     }
<a name="l12609"></a>12609 
<a name="l12610"></a>12610 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12611"></a>12611 
<a name="l12612"></a>12612 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#ga09938df8859ae8b62638a3af76ee6735" title="Устанавливает текущее выравнивание текста (влево/вправо/по центру).">txSetTextAlign</a> (<span class="keywordtype">unsigned</span> align <span class="comment">/*= TA_CENTER | TA_BASELINE*/</span>, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12613"></a>12613     {
<a name="l12614"></a>12614 $1  <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12615"></a>12615 
<a name="l12616"></a>12616 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::SetTextAlign (dc, align)), dc);
<a name="l12617"></a>12617     }
<a name="l12618"></a>12618 
<a name="l12619"></a>12619 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12620"></a>12620 
<a name="l12621"></a>12621 LOGFONT* <a class="code" href="a00081.htm#ga794901725b6c4a96f585742b70c0ea05" title="Ищет шрифт по его названию.">txFontExist</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[])
<a name="l12622"></a>12622     {
<a name="l12623"></a>12623 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (name)) <span class="keywordflow">return</span> NULL;
<a name="l12624"></a>12624 
<a name="l12625"></a>12625 $   <span class="keyword">static</span> LOGFONT font = {};
<a name="l12626"></a>12626 $   font.lfCharSet = DEFAULT_CHARSET;
<a name="l12627"></a>12627 $   strncpy_s (font.lfFaceName, sizeof (font.lfFaceName), name, sizeof (font.lfFaceName) - 1);
<a name="l12628"></a>12628 
<a name="l12629"></a>12629 $   <span class="keyword">struct </span>tools
<a name="l12630"></a>12630         {
<a name="l12631"></a>12631         <span class="keyword">static</span> <span class="keywordtype">int</span> CALLBACK enumFonts (<span class="keyword">const</span> LOGFONT* fnt, <span class="keyword">const</span> TEXTMETRIC*, DWORD, LPARAM data)
<a name="l12632"></a>12632             {
<a name="l12633"></a>12633 $           <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (fnt))  <span class="keywordflow">return</span> 0;
<a name="l12634"></a>12634 $           <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (data)) <span class="keywordflow">return</span> 0;
<a name="l12635"></a>12635 
<a name="l12636"></a>12636 <span class="preprocessor">            #ifndef __STRICT_ANSI__</span>
<a name="l12637"></a>12637 <span class="preprocessor"></span>$           <span class="keywordflow">return</span> _strnicmp (fnt-&gt;lfFaceName, ((LOGFONT*)data)-&gt;lfFaceName, LF_FACESIZE);
<a name="l12638"></a>12638 
<a name="l12639"></a>12639 <span class="preprocessor">            #else</span>
<a name="l12640"></a>12640 <span class="preprocessor"></span>$           <span class="keywordflow">return</span>  strncmp  (fnt-&gt;lfFaceName, ((LOGFONT*)data)-&gt;lfFaceName, LF_FACESIZE);
<a name="l12641"></a>12641 
<a name="l12642"></a>12642 <span class="preprocessor">            #endif</span>
<a name="l12643"></a>12643 <span class="preprocessor"></span>            }
<a name="l12644"></a>12644         };
<a name="l12645"></a>12645 
<a name="l12646"></a>12646 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::EnumFontFamiliesEx (NULL, &amp;font, tools::enumFonts, (LPARAM) &amp;font, 0)), NULL) == 0? &amp;font : NULL;
<a name="l12647"></a>12647     }
<a name="l12648"></a>12648 
<a name="l12649"></a>12649 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12650"></a>12650 
<a name="l12651"></a>12651 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gabc64e03f4ca966e76bc714bbe8173761" title="Устанавливает текущий активный объект GDI.">txSelectObject</a> (HGDIOBJ obj, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l12652"></a>12652     {
<a name="l12653"></a>12653 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED    (obj)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12654"></a>12654 $   <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc))  <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12655"></a>12655 
<a name="l12656"></a>12656 $   <span class="keywordflow">return</span> _txBuffer_Select (obj, dc);
<a name="l12657"></a>12657     }
<a name="l12658"></a>12658 
<a name="l12659"></a>12659 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12660"></a>12660 
<a name="l12661"></a>12661 HDC <a class="code" href="a00081.htm#ga1008da052f2fbe9ec0f70c2f6b4f0700" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, HBITMAP bitmap <span class="comment">/*= NULL*/</span>)
<a name="l12662"></a>12662     {
<a name="l12663"></a>12663 $1  POINT size = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeX), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeY) };
<a name="l12664"></a>12664 
<a name="l12665"></a>12665 $   HDC dc = _txBuffer_Create (NULL, &amp;size, bitmap);
<a name="l12666"></a>12666 $   assert (dc); <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> NULL;
<a name="l12667"></a>12667 
<a name="l12668"></a>12668 $   <a class="code" href="a00081.htm#gaa72c4849ac0c9bf6f95893f4265b9843" title="Установка параметров рисования по умолчанию.">txSetDefaults</a> (dc);
<a name="l12669"></a>12669 
<a name="l12670"></a>12670 $   <span class="keywordflow">if</span> (!_txCanvas_UserDCs) <span class="keywordflow">return</span> dc;
<a name="l12671"></a>12671 
<a name="l12672"></a>12672 $   <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l12673"></a>12673 $   _txCanvas_UserDCs-&gt;push_back (dc);
<a name="l12674"></a>12674 
<a name="l12675"></a>12675 $   <span class="keywordflow">if</span> (_txCanvas_UserDCs-&gt;size() &gt;= <a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>)
<a name="l12676"></a>12676         {$ <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_WARNING, NULL, <span class="stringliteral">&quot;Вы загрузили уже %d HDC, системе может стать плохо.&quot;</span>, (<span class="keywordtype">int</span>) _txCanvas_UserDCs-&gt;size()); }
<a name="l12677"></a>12677 
<a name="l12678"></a>12678 $   <span class="keywordflow">return</span> dc;
<a name="l12679"></a>12679     }
<a name="l12680"></a>12680 
<a name="l12681"></a>12681 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12682"></a>12682 
<a name="l12683"></a>12683 HDC <a class="code" href="a00081.htm#ga7535f88c0fd15b4b49195060d38f2603" title="Создает аппаратно-независимый дополнительный холст (контекст рисования, Device Context, DC) в памяти с возможностью прямого доступа к нему как к массиву.">txCreateDIBSection</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, RGBQUAD** pixels <span class="comment">/*= NULL*/</span>)
<a name="l12684"></a>12684     {
<a name="l12685"></a>12685 $1  RGBQUAD* buf = NULL;
<a name="l12686"></a>12686 $   <span class="keywordflow">if</span> (!pixels) pixels = &amp;buf;
<a name="l12687"></a>12687 
<a name="l12688"></a>12688 $   BITMAPINFO info = {{ <span class="keyword">sizeof</span> (info), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeX), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeY), 1, WORD (<span class="keyword">sizeof</span> (RGBQUAD) * 8), BI_RGB }};
<a name="l12689"></a>12689 
<a name="l12690"></a>12690 $   HDC dc = <a class="code" href="a00081.htm#ga1008da052f2fbe9ec0f70c2f6b4f0700" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (0, 0, Win32::CreateDIBSection (NULL, &amp;info, DIB_RGB_COLORS, (<span class="keywordtype">void</span>**) pixels, NULL, 0));
<a name="l12691"></a>12691 
<a name="l12692"></a>12692 $   RGBQUAD black = { 0, 0, 0, 255 };
<a name="l12693"></a>12693 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sizeX * sizeY; i++) (*pixels)[i] = black;
<a name="l12694"></a>12694 
<a name="l12695"></a>12695 $   <span class="keywordflow">return</span> dc;
<a name="l12696"></a>12696     }
<a name="l12697"></a>12697 
<a name="l12698"></a>12698 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12699"></a>12699 
<a name="l12700"></a>12700 HDC <a class="code" href="a00081.htm#ga7535f88c0fd15b4b49195060d38f2603" title="Создает аппаратно-независимый дополнительный холст (контекст рисования, Device Context, DC) в памяти с возможностью прямого доступа к нему как к массиву.">txCreateDIBSection</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, COLORREF** pixels)
<a name="l12701"></a>12701     {
<a name="l12702"></a>12702 $1  <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga7535f88c0fd15b4b49195060d38f2603" title="Создает аппаратно-независимый дополнительный холст (контекст рисования, Device Context, DC) в памяти с возможностью прямого доступа к нему как к массиву.">txCreateDIBSection</a> (sizeX, sizeY, (RGBQUAD**) pixels);
<a name="l12703"></a>12703     }
<a name="l12704"></a>12704 
<a name="l12705"></a>12705 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12706"></a>12706 
<a name="l12707"></a>12707 HDC <a class="code" href="a00081.htm#gaec4970aac125bcf0d8a0b10a118222f7" title="Загружает из файла изображение в формате BMP. Делает это довольно медленно.">txLoadImage</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[], <span class="keywordtype">unsigned</span> imageFlags <span class="comment">/*= IMAGE_BITMAP*/</span>, <span class="keywordtype">unsigned</span> loadFlags <span class="comment">/*= LR_LOADFROMFILE*/</span>)
<a name="l12708"></a>12708     {
<a name="l12709"></a>12709 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (filename &amp;&amp; *filename)) <span class="keywordflow">return</span> NULL;
<a name="l12710"></a>12710 
<a name="l12711"></a>12711 $   HBITMAP image = (HBITMAP) Win32::LoadImage ((loadFlags &amp; LR_LOADFROMFILE)? NULL : GetModuleHandle (NULL),
<a name="l12712"></a>12712                                                  filename, imageFlags, 0, 0, loadFlags);
<a name="l12713"></a>12713 $   <span class="keywordflow">if</span> (!image) <span class="keywordflow">return</span> NULL;
<a name="l12714"></a>12714 
<a name="l12715"></a>12715 $   HDC dc = <a class="code" href="a00081.htm#ga1008da052f2fbe9ec0f70c2f6b4f0700" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (0, 0, image);
<a name="l12716"></a>12716 
<a name="l12717"></a>12717 $   <span class="keywordflow">if</span> (!(loadFlags &amp; LR_LOADFROMFILE)) <span class="keywordflow">return</span> dc;
<a name="l12718"></a>12718 
<a name="l12719"></a>12719 $   <span class="keyword">static</span> std::map &lt;std::string, unsigned&gt; loadTimes;
<a name="l12720"></a>12720 $   std::string file = filename;
<a name="l12721"></a>12721 $   <span class="keywordtype">unsigned</span> time    = GetTickCount();
<a name="l12722"></a>12722 
<a name="l12723"></a>12723 $   <span class="keywordflow">if</span> ((<span class="keywordtype">long</span>) (time - loadTimes [file]) &lt; <a class="code" href="a00084.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания событий (мс)">_TX_TIMEOUT</a>)
<a name="l12724"></a>12724         {$ <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_WARNING, NULL, <span class="stringliteral">&quot;Вы загружаете \&quot;%s\&quot; слишком часто, программа будет тормозить.&quot;</span>, filename); }
<a name="l12725"></a>12725 
<a name="l12726"></a>12726 $   loadTimes [file] = time;
<a name="l12727"></a>12727 
<a name="l12728"></a>12728 $   <span class="keywordflow">return</span> dc;
<a name="l12729"></a>12729     }
<a name="l12730"></a>12730 
<a name="l12731"></a>12731 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12732"></a>12732 
<a name="l12733"></a>12733 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC* pdc)
<a name="l12734"></a>12734     {
<a name="l12735"></a>12735 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (pdc)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12736"></a>12736 
<a name="l12737"></a>12737 $   HDC  dc = *pdc;
<a name="l12738"></a>12738 $   <span class="keywordtype">bool</span> ok = _txBuffer_Delete (pdc);
<a name="l12739"></a>12739 $   <span class="keywordflow">if</span> (!ok) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12740"></a>12740 
<a name="l12741"></a>12741 $   <span class="keywordflow">if</span> (!_txCanvas_UserDCs) <span class="keywordflow">return</span> ok;
<a name="l12742"></a>12742 
<a name="l12743"></a>12743 $   <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l12744"></a>12744 $   std::vector &lt;HDC&gt; ::iterator it = std::find (_txCanvas_UserDCs-&gt;begin(), _txCanvas_UserDCs-&gt;end(), dc);
<a name="l12745"></a>12745 $   <span class="keywordflow">if</span>  (it != _txCanvas_UserDCs-&gt;end()) { std::swap (*it, _txCanvas_UserDCs-&gt;back()); _txCanvas_UserDCs-&gt;pop_back(); }
<a name="l12746"></a>12746 
<a name="l12747"></a>12747 $   <span class="keywordflow">return</span> ok;
<a name="l12748"></a>12748     }
<a name="l12749"></a>12749 
<a name="l12750"></a>12750 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12751"></a>12751 
<a name="l12752"></a>12752 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC dc)
<a name="l12753"></a>12753     {
<a name="l12754"></a>12754 $1  <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (&amp;dc);
<a name="l12755"></a>12755     }
<a name="l12756"></a>12756 
<a name="l12757"></a>12757 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12758"></a>12758 
<a name="l12759"></a>12759 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (HDC destImage,   <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l12760"></a>12760                HDC sourceImage, <span class="keywordtype">double</span> xSource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySource <span class="comment">/*= 0*/</span>, <span class="keywordtype">unsigned</span> operation <span class="comment">/*= SRCCOPY*/</span>)
<a name="l12761"></a>12761     {
<a name="l12762"></a>12762 $1  <span class="keywordflow">if</span> (_TX_HDC_FAILED (destImage))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12763"></a>12763 $   <span class="keywordflow">if</span> (_TX_HDC_FAILED (sourceImage)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12764"></a>12764 
<a name="l12765"></a>12765 $   POINT size = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (sourceImage);
<a name="l12766"></a>12766 $   <span class="keywordflow">if</span> (!width)  width  = size.x;
<a name="l12767"></a>12767 $   <span class="keywordflow">if</span> (!height) height = size.y;
<a name="l12768"></a>12768 
<a name="l12769"></a>12769 $   <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt (destImage,   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l12770"></a>12770                                     sourceImage, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSource), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySource), operation)), destImage);
<a name="l12771"></a>12771     }
<a name="l12772"></a>12772 
<a name="l12773"></a>12773 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12774"></a>12774 
<a name="l12775"></a>12775 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (<span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, HDC sourceImage, <span class="keywordtype">double</span> xSource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySource <span class="comment">/*= 0*/</span>)
<a name="l12776"></a>12776     {
<a name="l12777"></a>12777 $1  <span class="keywordflow">if</span> (_TX_TXWINDOW_FAILED()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12778"></a>12778 
<a name="l12779"></a>12779 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (<a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>(), xDest, yDest, 0, 0, sourceImage, xSource, ySource);
<a name="l12780"></a>12780     }
<a name="l12781"></a>12781 
<a name="l12782"></a>12782 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12783"></a>12783 
<a name="l12784"></a>12784 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga54f48f0bcb9453add294e0a9f8b1fb1d" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (HDC destImage,   <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l12785"></a>12785                        HDC sourceImage, <span class="keywordtype">double</span> xSource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySource <span class="comment">/*= 0*/</span>, COLORREF transColor <span class="comment">/*= TX_BLACK*/</span>)
<a name="l12786"></a>12786     {
<a name="l12787"></a>12787 $1  <span class="keywordflow">if</span> (_TX_HDC_FAILED (destImage))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12788"></a>12788 $   <span class="keywordflow">if</span> (_TX_HDC_FAILED (sourceImage)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12789"></a>12789 
<a name="l12790"></a>12790 $   POINT size = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (sourceImage);
<a name="l12791"></a>12791 $   <span class="keywordflow">if</span> (!width)  width  = size.x;
<a name="l12792"></a>12792 $   <span class="keywordflow">if</span> (!height) height = size.y;
<a name="l12793"></a>12793 
<a name="l12794"></a>12794 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l12795"></a>12795 <span class="preprocessor"></span>
<a name="l12796"></a>12796 $   <span class="keywordflow">if</span> (!(0 &lt;= xSource &amp;&amp; xSource + width  &lt;= size.x &amp;&amp;
<a name="l12797"></a>12797           0 &lt;= ySource &amp;&amp; ySource + height &lt;= size.y))
<a name="l12798"></a>12798         {
<a name="l12799"></a>12799 $       SetLastError (ERROR_INVALID_DATA);
<a name="l12800"></a>12800 $       <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, &quot;</span>
<a name="l12801"></a>12801                   <span class="stringliteral">&quot;функция txTransparentBlt() работать не будет.&quot;</span>, xSource, ySource, xSource + width, ySource + height, 0, 0, (<span class="keywordtype">int</span>) size.x, (<span class="keywordtype">int</span>) size.y);
<a name="l12802"></a>12802         }
<a name="l12803"></a>12803 
<a name="l12804"></a>12804 <span class="preprocessor">#endif</span>
<a name="l12805"></a>12805 <span class="preprocessor"></span>
<a name="l12806"></a>12806 $   <span class="keywordtype">bool</span> ok = (Win32::TransparentBlt != NULL);
<a name="l12807"></a>12807 
<a name="l12808"></a>12808 $   <span class="keywordflow">if</span> (ok)
<a name="l12809"></a>12809         {
<a name="l12810"></a>12810 $       ok &amp;= <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::TransparentBlt (destImage,   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l12811"></a>12811                                                sourceImage, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSource), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySource), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height), transColor)),
<a name="l12812"></a>12812                                                destImage);
<a name="l12813"></a>12813         }
<a name="l12814"></a>12814     <span class="keywordflow">else</span>
<a name="l12815"></a>12815         {
<a name="l12816"></a>12816 $       ok &amp;= <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt         (destImage,   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l12817"></a>12817                                                sourceImage, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSource), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySource), SRCCOPY)),
<a name="l12818"></a>12818                                                destImage);
<a name="l12819"></a>12819         }
<a name="l12820"></a>12820 
<a name="l12821"></a>12821     <span class="keywordflow">return</span> ok;
<a name="l12822"></a>12822     }
<a name="l12823"></a>12823 
<a name="l12824"></a>12824 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12825"></a>12825 
<a name="l12826"></a>12826 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga54f48f0bcb9453add294e0a9f8b1fb1d" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (<span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, HDC sourceImage,
<a name="l12827"></a>12827                               COLORREF transColor <span class="comment">/*= TX_BLACK*/</span>, <span class="keywordtype">double</span> xSource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySource <span class="comment">/*= 0*/</span>)
<a name="l12828"></a>12828     {
<a name="l12829"></a>12829 $1  <span class="keywordflow">if</span> (_TX_TXWINDOW_FAILED()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12830"></a>12830 
<a name="l12831"></a>12831 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga54f48f0bcb9453add294e0a9f8b1fb1d" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (<a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, transColor);
<a name="l12832"></a>12832     }
<a name="l12833"></a>12833 
<a name="l12834"></a>12834 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12835"></a>12835 
<a name="l12836"></a>12836 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga4d6f780cdef622df0fda71d0b3cfee52" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом полупрозрачности...">txAlphaBlend</a> (HDC destImage,   <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l12837"></a>12837                    HDC sourceImage, <span class="keywordtype">double</span> xSource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> alpha <span class="comment">/*= 1.0*/</span>)
<a name="l12838"></a>12838     {
<a name="l12839"></a>12839     <span class="comment">// Это проверки того, правильные ли HDC вы передали в функцию.</span>
<a name="l12840"></a>12840     <span class="comment">// Не бойтесь долларов - &lt;s&gt;это не запрещенная валюта&lt;/s&gt; это макросы для отладки TXLib&#39;а.</span>
<a name="l12841"></a>12841 
<a name="l12842"></a>12842 $1  <span class="keywordflow">if</span> (_TX_HDC_FAILED (destImage))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12843"></a>12843 $   <span class="keywordflow">if</span> (_TX_HDC_FAILED (sourceImage)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12844"></a>12844 
<a name="l12845"></a>12845     <span class="comment">// Это автоматическое определение размеров картинки (точнее, HDC источника - source) с помощью txGetExtent().</span>
<a name="l12846"></a>12846 
<a name="l12847"></a>12847 $   POINT size = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (sourceImage);
<a name="l12848"></a>12848 $   <span class="keywordflow">if</span> (!width)  width  = size.x;
<a name="l12849"></a>12849 $   <span class="keywordflow">if</span> (!height) height = size.y;
<a name="l12850"></a>12850 
<a name="l12851"></a>12851     <span class="comment">// Это проверка того, что картинка (или ее часть) правильно попадает в окно (точнее, HDC приемника - destination, dest).</span>
<a name="l12852"></a>12852     <span class="comment">// Если она &quot;вылезает&quot; из окна в любую сторону, то Win32::AlphaBlend не будет работать. Эта проверка происходит только</span>
<a name="l12853"></a>12853     <span class="comment">// в режиме отладки (когда не задан макрос NDEBUG - No Debugging, без отладки).</span>
<a name="l12854"></a>12854 
<a name="l12855"></a>12855 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l12856"></a>12856 <span class="preprocessor"></span>
<a name="l12857"></a>12857 $   <span class="keywordflow">if</span> (!(0 &lt;= xSource &amp;&amp; xSource + width  &lt;= size.x &amp;&amp;
<a name="l12858"></a>12858           0 &lt;= ySource &amp;&amp; ySource + height &lt;= size.y))
<a name="l12859"></a>12859         {
<a name="l12860"></a>12860 $       SetLastError (ERROR_INVALID_DATA);
<a name="l12861"></a>12861 $       <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Прямоугольник копируемой области {%lg, %lg, %lg, %lg} не полностью лежит внутри изображения-источника {%d, %d, %d, %d}, &quot;</span>
<a name="l12862"></a>12862                   <span class="stringliteral">&quot;функция txAlphaBlend() работать не будет.&quot;</span>, xSource, ySource, xSource + width, ySource + height, 0, 0, (<span class="keywordtype">int</span>) size.x, (<span class="keywordtype">int</span>) size.y);
<a name="l12863"></a>12863         }
<a name="l12864"></a>12864 
<a name="l12865"></a>12865 <span class="preprocessor">#endif</span>
<a name="l12866"></a>12866 <span class="preprocessor"></span>
<a name="l12867"></a>12867     <span class="comment">// Это на случай, если параметр alpha вылезает за диапазон [0..1].</span>
<a name="l12868"></a>12868 
<a name="l12869"></a>12869 $   <span class="keywordflow">if</span> (alpha &lt; 0) alpha = 0;
<a name="l12870"></a>12870 $   <span class="keywordflow">if</span> (alpha &gt; 1) alpha = 1;
<a name="l12871"></a>12871 
<a name="l12872"></a>12872     <span class="comment">// Об этом см. ниже.</span>
<a name="l12873"></a>12873 
<a name="l12874"></a>12874 $   BITMAP bmap = { 0, 0, 0, 0, 0, 24 };
<a name="l12875"></a>12875 $   <span class="keywordtype">bool</span> ok = !!Win32::GetObject (<a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetCurrentObject (sourceImage, OBJ_BITMAP)), sourceImage), <span class="keyword">sizeof</span> (bmap), &amp;bmap);
<a name="l12876"></a>12876 
<a name="l12877"></a>12877     <span class="comment">//</span>
<a name="l12878"></a>12878     <span class="comment">// * Структура BLENDFUNCTION *</span>
<a name="l12879"></a>12879     <span class="comment">//</span>
<a name="l12880"></a>12880     <span class="comment">// Эта структура определяет, как цвета пикселей окна (точнее, source DC) и картинки смешиваются при рисовании с учетом</span>
<a name="l12881"></a>12881     <span class="comment">// прозрачности.</span>
<a name="l12882"></a>12882     <span class="comment">//</span>
<a name="l12883"></a>12883     <span class="comment">// Параметры смешивания помещаются в группу из переменных - так называемую структуру. Переменные, входящие в структуру,</span>
<a name="l12884"></a>12884     <span class="comment">// называются компонентами структуры.</span>
<a name="l12885"></a>12885     <span class="comment">//</span>
<a name="l12886"></a>12886     <span class="comment">// В этой структуре более всех важен ее третий компонент (см. ниже), задающий прозрачность картинки.</span>
<a name="l12887"></a>12887     <span class="comment">// Если он равен нулю - то картинка будет считаться полностью прозрачной и вызов Win32::AlphaBlend ничего не нарисует.</span>
<a name="l12888"></a>12888     <span class="comment">// Если он равен 255  - то картинка скопируется в окно полностью, без эффекта прозрачности.</span>
<a name="l12889"></a>12889     <span class="comment">//</span>
<a name="l12890"></a>12890     <span class="comment">// С помощью четвертого компонента структуры система рисования Windows (Win32 GDI) узнает, надо ли учитывать альфа-канал</span>
<a name="l12891"></a>12891     <span class="comment">// в копируемой картинке или его надо игнорировать. Если в картинке фактически есть правильно построенный альфа-канал</span>
<a name="l12892"></a>12892     <span class="comment">// (см. описание функции txAlphaBlend в системе помощи TXLib), то четвертый компонент структуры надо задать как константу</span>
<a name="l12893"></a>12893     <span class="comment">// AC_SRC_ALPHA.</span>
<a name="l12894"></a>12894     <span class="comment">//</span>
<a name="l12895"></a>12895     <span class="comment">// Если в картинке альфа-канала фактически нет, то четвертый параметр надо установить в 0.</span>
<a name="l12896"></a>12896     <span class="comment">//</span>
<a name="l12897"></a>12897     <span class="comment">// В коде ниже четвертый параметр определяется автоматически из вызова Win32::GetObject(), для универсальности применения</span>
<a name="l12898"></a>12898     <span class="comment">// функции txAlphaBlend().</span>
<a name="l12899"></a>12899     <span class="comment">//</span>
<a name="l12900"></a>12900     <span class="comment">// Пожалуйста, не надо бездумно копировать себе в программу этот код. Осмыслите его, и решите, будете ли вы использовать</span>
<a name="l12901"></a>12901     <span class="comment">// альфа-канал или нет, и установите четвертый параметр структуры либо AC_SRC_ALPHA, либо 0. Иначе этим копипастом вы</span>
<a name="l12902"></a>12902     <span class="comment">// породите невнятный паленый код и безнадежно испортите себе карму. :((</span>
<a name="l12903"></a>12903     <span class="comment">//</span>
<a name="l12904"></a>12904     <span class="comment">// На доллары ($) не обращайте внимания, они нужны для отладки библиотеки TXLib. В вашей программе их использовать не надо.</span>
<a name="l12905"></a>12905     <span class="comment">//</span>
<a name="l12906"></a>12906     <span class="comment">//                       ____1____   2   ___________3___________     _______________________4________________________</span>
<a name="l12907"></a>12907     <span class="comment">//                      /         \  |  /                       \   /                                                \.</span>
<a name="l12908"></a>12908 
<a name="l12909"></a>12909 $   BLENDFUNCTION blend = { AC_SRC_OVER, 0, (BYTE) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (alpha * 255), (BYTE) ((bmap.bmBitsPixel == 32)? AC_SRC_ALPHA : 0) };
<a name="l12910"></a>12910 
<a name="l12911"></a>12911     <span class="comment">//</span>
<a name="l12912"></a>12912     <span class="comment">// * Вызов стандартной функции Win32::AlphaBlend() *</span>
<a name="l12913"></a>12913     <span class="comment">//</span>
<a name="l12914"></a>12914     <span class="comment">// Ниже - это вызов Win32::AlphaBlend(). Он так устроен, что, если вдруг что-то не получилось (т.е. Win32::AlphaBlend()</span>
<a name="l12915"></a>12915     <span class="comment">// вернет 0), то тогда будет вызвана Win32::BitBlt(), которая просто скопирует картинку без учета прозрачности. Погуглите</span>
<a name="l12916"></a>12916     <span class="comment">// &quot;Windows AlphaBlend function&quot; и почитайте про ее параметры.</span>
<a name="l12917"></a>12917     <span class="comment">//</span>
<a name="l12918"></a>12918     <span class="comment">// Как видите, оригинальная функция из Win32 принимает размеры не только исходной, но и итоговой картинки, и если они не</span>
<a name="l12919"></a>12919     <span class="comment">// совпадают, то картинка будет уменьшена или увеличена. TXlib&#39;овская &lt;s&gt;паленая&lt;/s&gt; функция txAlphaBlend предполагает, что</span>
<a name="l12920"></a>12920     <span class="comment">// эти размеры всегда совпадают, и поэтому при работе с txAlphaBlend() масштаб будет всегда 1:1. &lt;s&gt;Так себе решение, но&lt;/s&gt;</span>
<a name="l12921"></a>12921     <span class="comment">// это сделано для упрощения вызова функции txAlphaBlend().</span>
<a name="l12922"></a>12922 
<a name="l12923"></a>12923 $   <span class="keywordflow">if</span> (Win32::AlphaBlend) <span class="comment">// Только то, что эти параметры передаются одинаковыми, не дает возможность менять масштаб картинки!   // &lt;&lt;--</span>
<a name="l12924"></a>12924         {                  <span class="comment">//                           //                                       vvvvv          vvvvvv            // &lt;&lt;--</span>
<a name="l12925"></a>12925 $       ok &amp;= <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::AlphaBlend (destImage,   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),          <span class="comment">// &lt;&lt;==</span>
<a name="l12926"></a>12926                                            sourceImage, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSource), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySource), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height), blend)), <span class="comment">// &lt;&lt;==</span>
<a name="l12927"></a>12927                                            destImage);  <span class="comment">//                                       ^^^^^          ^^^^^^            // &lt;&lt;--</span>
<a name="l12928"></a>12928         }                  <span class="comment">//                                                                    |||||          ||||||            // &lt;&lt;--</span>
<a name="l12929"></a>12929                            <span class="comment">// См. &quot;AlphaBlend function&quot; в Google, ищите смысл параметров wSrc и wDest (hSrc и hDest). Думайте!    // &lt;&lt;--</span>
<a name="l12930"></a>12930 
<a name="l12931"></a>12931     <span class="keywordflow">else</span>
<a name="l12932"></a>12932         {
<a name="l12933"></a>12933 $       ok &amp;= <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt     (destImage,   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest),   <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l12934"></a>12934                                            sourceImage, <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSource), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySource), SRCCOPY)),
<a name="l12935"></a>12935                                            destImage);
<a name="l12936"></a>12936 $       ok = <span class="keyword">false</span>;
<a name="l12937"></a>12937         }
<a name="l12938"></a>12938 
<a name="l12939"></a>12939     <span class="comment">// В этой функции проверок и комментариев больше, чем рабочего кода, и это как бы намекает, что нетрудно сделать свою</span>
<a name="l12940"></a>12940     <span class="comment">// аналогичную функцию без ограничений масштаба отображения. &lt;s&gt;Если ты дочитал до этого места,&lt;/s&gt; пересядь с иглы TXLib&#39;а</span>
<a name="l12941"></a>12941     <span class="comment">// на поверхность GDI Win32, &lt;s&gt;хотя GDI тоже так себе, так что лучше заюзай GDI+, SFML, OpenGL или DirectX, будет круто.</span>
<a name="l12942"></a>12942     <span class="comment">// Хотя это и сложнее.&lt;/s&gt;</span>
<a name="l12943"></a>12943 
<a name="l12944"></a>12944     <span class="comment">// Но помни про паленый копипаст и карму, см. выше. Я предупредил.</span>
<a name="l12945"></a>12945 
<a name="l12946"></a>12946 $   <span class="keywordflow">return</span> ok;
<a name="l12947"></a>12947     }
<a name="l12948"></a>12948 
<a name="l12949"></a>12949 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12950"></a>12950 
<a name="l12951"></a>12951 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga4d6f780cdef622df0fda71d0b3cfee52" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом полупрозрачности...">txAlphaBlend</a> (<span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, HDC sourceImage,
<a name="l12952"></a>12952                           <span class="keywordtype">double</span> xSource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySource <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> alpha <span class="comment">/*= 1.0*/</span>)
<a name="l12953"></a>12953     {
<a name="l12954"></a>12954 $1  <span class="keywordflow">if</span> (_TX_TXWINDOW_FAILED()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l12955"></a>12955 
<a name="l12956"></a>12956 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga4d6f780cdef622df0fda71d0b3cfee52" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом полупрозрачности...">txAlphaBlend</a> (<a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>(), xDest, yDest, 0, 0, sourceImage, xSource, ySource, alpha);
<a name="l12957"></a>12957     }
<a name="l12958"></a>12958 
<a name="l12959"></a>12959 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l12960"></a>12960 
<a name="l12961"></a>12961 HDC <a class="code" href="a00081.htm#ga6280d640bb3b08dc82c8dd29caf5ff47" title="Пересчитывает цвета пикселей с учетом прозрачности (переводит цвета в формат Premultiplied Alpha)...">txUseAlpha</a> (HDC image)
<a name="l12962"></a>12962     {
<a name="l12963"></a>12963 $1  <span class="keywordflow">if</span> (_TX_HDC_FAILED (image)) <span class="keywordflow">return</span> NULL;
<a name="l12964"></a>12964 
<a name="l12965"></a>12965 $   HBITMAP bitmap = (HBITMAP) Win32::GetCurrentObject (image, OBJ_BITMAP);
<a name="l12966"></a>12966 $   <span class="keywordflow">if</span> (!bitmap) <span class="keywordflow">return</span> NULL;
<a name="l12967"></a>12967 
<a name="l12968"></a>12968 $   DIBSECTION dib = {};
<a name="l12969"></a>12969 $   Win32::GetObject (bitmap, <span class="keyword">sizeof</span> (dib), &amp;dib) asserted;
<a name="l12970"></a>12970 
<a name="l12971"></a>12971 $   POINT      size = {  dib.dsBm.bmWidth, dib.dsBm.bmHeight };
<a name="l12972"></a>12972 $   BITMAPINFO info = {{ <span class="keyword">sizeof</span> (info), size.x, size.y, 1, (WORD) (<span class="keyword">sizeof</span> (RGBQUAD) * 8), BI_RGB }};
<a name="l12973"></a>12973 $   RGBQUAD*   buf  = NULL;
<a name="l12974"></a>12974 
<a name="l12975"></a>12975 $   <span class="keywordtype">bool</span> isDIB = (dib.dsBm.bmPlanes        == 1                    &amp;&amp;
<a name="l12976"></a>12976                   dib.dsBm.bmBitsPixel     == <span class="keyword">sizeof</span> (RGBQUAD) * 8 &amp;&amp;
<a name="l12977"></a>12977                   dib.dsBmih.biCompression == DIB_RGB_COLORS       &amp;&amp;
<a name="l12978"></a>12978                   dib.dsBm.bmBits);
<a name="l12979"></a>12979 $   <span class="keywordflow">if</span> (!isDIB)
<a name="l12980"></a>12980         {
<a name="l12981"></a>12981 $       buf = <span class="keyword">new</span> (std::nothrow) RGBQUAD [size.x * size.y];
<a name="l12982"></a>12982 $       if (!buf) <span class="keywordflow">return</span> NULL;
<a name="l12983"></a>12983 
<a name="l12984"></a>12984 $       Win32::GetDIBits (image, bitmap, 0, size.y, buf, &amp;info, DIB_RGB_COLORS) asserted;
<a name="l12985"></a>12985         }
<a name="l12986"></a>12986     else
<a name="l12987"></a>12987         {
<a name="l12988"></a>12988 $       buf = (RGBQUAD*) dib.dsBm.bmBits;
<a name="l12989"></a>12989         }
<a name="l12990"></a>12990 
<a name="l12991"></a>12991 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = 0; y &lt; size.y; y++)
<a name="l12992"></a>12992     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0; x &lt; size.x; x++)
<a name="l12993"></a>12993         {
<a name="l12994"></a>12994         RGBQUAD* color = &amp;buf [x + y * size.x];  <span class="comment">// Get color at (x, y) within image buffer</span>
<a name="l12995"></a>12995 
<a name="l12996"></a>12996         color-&gt;rgbRed   = (BYTE) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (color-&gt;rgbRed   * color-&gt;rgbReserved / 255.0);
<a name="l12997"></a>12997         color-&gt;rgbGreen = (BYTE) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (color-&gt;rgbGreen * color-&gt;rgbReserved / 255.0);
<a name="l12998"></a>12998         color-&gt;rgbBlue  = (BYTE) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (color-&gt;rgbBlue  * color-&gt;rgbReserved / 255.0);
<a name="l12999"></a>12999         }
<a name="l13000"></a>13000 
<a name="l13001"></a>13001 $   <span class="keywordflow">if</span> (!isDIB)
<a name="l13002"></a>13002         {
<a name="l13003"></a>13003 $       Win32::SetDIBitsToDevice (image, 0, 0, size.x, size.y, 0, 0, 0, size.y, buf, &amp;info, DIB_RGB_COLORS) asserted;
<a name="l13004"></a>13004 
<a name="l13005"></a>13005 $       delete[] buf;
<a name="l13006"></a>13006         }
<a name="l13007"></a>13007 
<a name="l13008"></a>13008 $   return image;
<a name="l13009"></a>13009     }
<a name="l13010"></a>13010 
<a name="l13011"></a>13011 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13012"></a>13012 
<a name="l13013"></a>13013 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga45389db909311454bbdfed3898d760d1" title="Сохраняет в файл изображение в формате BMP.">txSaveImage</a> (const <span class="keywordtype">char</span> filename[], HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l13014"></a>13014     {
<a name="l13015"></a>13015 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED    (filename)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l13016"></a>13016 $   <span class="keywordflow">if</span> (_TX_DEFAULT_HDC_FAILED (dc))       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l13017"></a>13017 
<a name="l13018"></a>13018 $   POINT size = <a class="code" href="a00081.htm#ga11074386e81c0c8677f36c0a16ac0aa1" title="Возвращает размер окна, картинки или холста в виде структуры POINT.">txGetExtent</a> (dc);
<a name="l13019"></a>13019 
<a name="l13020"></a>13020 $   <span class="keywordtype">size_t</span> szHdrs = <span class="keyword">sizeof</span> (BITMAPFILEHEADER) + <span class="keyword">sizeof</span> (BITMAPINFOHEADER),
<a name="l13021"></a>13021            szImg  = (size.x * size.y) * <span class="keyword">sizeof</span> (RGBQUAD);
<a name="l13022"></a>13022 
<a name="l13023"></a>13023 $   BITMAPFILEHEADER hdr  = { 0x4D42 <span class="comment">/* &#39;MB&#39; */</span>, (DWORD) (szHdrs + szImg), 0, 0, (DWORD) szHdrs };
<a name="l13024"></a>13024 $   BITMAPINFOHEADER info = { <span class="keyword">sizeof</span> (info), size.x, size.y, 1, (WORD) (<span class="keyword">sizeof</span> (RGBQUAD) * 8), BI_RGB };
<a name="l13025"></a>13025 
<a name="l13026"></a>13026 $   <span class="keywordtype">bool</span> ok = <span class="keyword">true</span>;
<a name="l13027"></a>13027 
<a name="l13028"></a>13028 $   RGBQUAD* buf = <span class="keyword">new</span> (std::nothrow) RGBQUAD [size.x * size.y];
<a name="l13029"></a>13029 $   ok &amp;= (buf != NULL);
<a name="l13030"></a>13030 
<a name="l13031"></a>13031 $   <span class="keywordflow">if</span> (ok) Win32::GetDIBits (dc, (HBITMAP) Win32::GetCurrentObject (dc, OBJ_BITMAP), 0, size.y,
<a name="l13032"></a>13032                               buf, (BITMAPINFO*) &amp;info, DIB_RGB_COLORS) asserted;
<a name="l13033"></a>13033 $   FILE* f = NULL;
<a name="l13034"></a>13034 $   if (ok) fopen_s (&amp;f, filename, &quot;wb&quot;);
<a name="l13035"></a>13035 $   ok &amp;= (f != NULL);
<a name="l13036"></a>13036 
<a name="l13037"></a>13037 $   if (ok) ok &amp;= (fwrite (&amp;hdr,  sizeof (hdr),  1, f) == 1);
<a name="l13038"></a>13038 $   if (ok) ok &amp;= (fwrite (&amp;info, sizeof (info), 1, f) == 1);
<a name="l13039"></a>13039 $   if (ok) ok &amp;= (fwrite (buf,   szImg,         1, f) == 1);
<a name="l13040"></a>13040 
<a name="l13041"></a>13041 $   ok &amp;= (f &amp;&amp; fclose (f) == 0);
<a name="l13042"></a>13042 
<a name="l13043"></a>13043 $   delete[] buf;
<a name="l13044"></a>13044 $   buf = NULL;
<a name="l13045"></a>13045 
<a name="l13046"></a>13046 $   return ok;
<a name="l13047"></a>13047     }
<a name="l13048"></a>13048 
<a name="l13049"></a>13049 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13050"></a>13050 
<a name="l13051"></a>13051 inline <span class="keywordtype">void</span> txRedrawWindow()
<a name="l13052"></a>13052     {
<a name="l13053"></a>13053 $1  <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (0);
<a name="l13054"></a>13054     }
<a name="l13055"></a>13055 
<a name="l13056"></a>13056 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13057"></a>13057 
<a name="l13058"></a>13058 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keywordtype">int</span> update <span class="comment">/*= true*/</span>)
<a name="l13059"></a>13059     {
<a name="l13060"></a>13060 $1  <span class="keywordflow">return</span> _txCanvas_SetRefreshLock (update &gt;= 0? !update : -update);
<a name="l13061"></a>13061     }
<a name="l13062"></a>13062 
<a name="l13063"></a>13063 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13064"></a>13064 
<a name="l13065"></a>13065 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00081.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin</a>()
<a name="l13066"></a>13066     {
<a name="l13067"></a>13067 $1  _txCanvas_SetRefreshLock (_txCanvas_RefreshLock + 1);
<a name="l13068"></a>13068 
<a name="l13069"></a>13069 $   <span class="keywordflow">return</span> _txCanvas_RefreshLock;
<a name="l13070"></a>13070     }
<a name="l13071"></a>13071 
<a name="l13072"></a>13072 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13073"></a>13073 
<a name="l13074"></a>13074 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00081.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd</a>()
<a name="l13075"></a>13075     {
<a name="l13076"></a>13076 $1  _txCanvas_SetRefreshLock (_txCanvas_RefreshLock - 1);
<a name="l13077"></a>13077 
<a name="l13078"></a>13078 $   <span class="keywordflow">return</span> _txCanvas_RefreshLock;
<a name="l13079"></a>13079     }
<a name="l13080"></a>13080 
<a name="l13081"></a>13081 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13082"></a>13082 
<a name="l13083"></a>13083 <span class="keywordtype">double</span> <a class="code" href="a00081.htm#ga6c293f0b0f71efebdeeb0b56a97ba50c" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<span class="keywordtype">double</span> time)
<a name="l13084"></a>13084     {
<a name="l13085"></a>13085 $1  LARGE_INTEGER start = {};
<a name="l13086"></a>13086 $   QueryPerformanceCounter (&amp;start) asserted;
<a name="l13087"></a>13087 
<a name="l13088"></a>13088 $   LARGE_INTEGER freq = {};
<a name="l13089"></a>13089 $   QueryPerformanceFrequency (&amp;freq) asserted;
<a name="l13090"></a>13090 
<a name="l13091"></a>13091 $   <span class="keywordtype">int</span> lock = _txCanvas_RefreshLock;
<a name="l13092"></a>13092 $   _txCanvas_RefreshLock = 0;
<a name="l13093"></a>13093 
<a name="l13094"></a>13094 $   HWND wnd = txWindow();
<a name="l13095"></a>13095     if (wnd) {$ RedrawWindow (wnd, NULL, NULL, RDW_INVALIDATE | RDW_INTERNALPAINT | RDW_UPDATENOW); }
<a name="l13096"></a>13096 
<a name="l13097"></a>13097 $   Sleep (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((time &gt;= 0)? time : 0));
<a name="l13098"></a>13098 
<a name="l13099"></a>13099 $   _txCanvas_RefreshLock = lock;
<a name="l13100"></a>13100 
<a name="l13101"></a>13101 $   LARGE_INTEGER stop = {};
<a name="l13102"></a>13102 $   QueryPerformanceCounter (&amp;stop) asserted;
<a name="l13103"></a>13103 
<a name="l13104"></a>13104 $   return 1000.0 * (<span class="keywordtype">double</span>) (stop.QuadPart - start.QuadPart) / (<span class="keywordtype">double</span>) freq.QuadPart;
<a name="l13105"></a>13105     }
<a name="l13106"></a>13106 
<a name="l13107"></a>13107 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13108"></a>13108 
<a name="l13109"></a>13109 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keywordtype">bool</span> wait <span class="comment">/*= true*/</span>)
<a name="l13110"></a>13110     {
<a name="l13111"></a>13111 $0  <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 || _txExit) Sleep (0);
<a name="l13112"></a>13112 
<a name="l13113"></a>13113 $   <span class="keywordflow">if</span> (wait) {$ <span class="keywordflow">return</span>      EnterCriticalSection (&amp;_txCanvas_LockBackBuf), <span class="keyword">true</span>; }
<a name="l13114"></a>13114     <span class="keywordflow">else</span>      {$ <span class="keywordflow">return</span> !!TryEnterCriticalSection (&amp;_txCanvas_LockBackBuf);       }
<a name="l13115"></a>13115     }
<a name="l13116"></a>13116 
<a name="l13117"></a>13117 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13118"></a>13118 
<a name="l13119"></a>13119 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>()
<a name="l13120"></a>13120     {
<a name="l13121"></a>13121 $0  LeaveCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l13122"></a>13122 
<a name="l13123"></a>13123 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 || _txExit) Sleep (0);
<a name="l13124"></a>13124 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l13125"></a>13125     }
<a name="l13126"></a>13126 
<a name="l13127"></a>13127 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13128"></a>13128 
<a name="l13129"></a>13129 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l13130"></a>13130 <span class="keyword">inline</span> T <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a> (T value)
<a name="l13131"></a>13131     {
<a name="l13132"></a>13132 $1  <a class="code" href="a00080.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l13133"></a>13133 $   <span class="keywordflow">return</span> value;
<a name="l13134"></a>13134     }
<a name="l13135"></a>13135 
<a name="l13136"></a>13136 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13137"></a>13137 
<a name="l13138"></a>13138 <span class="keyword">inline</span> POINT <a class="code" href="a00082.htm#ga44606f3b7f5f345d15bb20d46fcf78b6" title="Возвращает позицию Мыши!">txMousePos</a>()
<a name="l13139"></a>13139     {
<a name="l13140"></a>13140 $1  POINT pos = {};
<a name="l13141"></a>13141 $   GetCursorPos (&amp;pos);
<a name="l13142"></a>13142 
<a name="l13143"></a>13143 $   <span class="keywordflow">if</span> (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>())
<a name="l13144"></a>13144         {$ ScreenToClient (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), &amp;pos); }
<a name="l13145"></a>13145 
<a name="l13146"></a>13146 $   <span class="keywordflow">return</span> pos;
<a name="l13147"></a>13147     }
<a name="l13148"></a>13148 
<a name="l13149"></a>13149 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13150"></a>13150 
<a name="l13151"></a>13151 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00082.htm#ga2e6de35bffaf8217d577ed21a9ea6150" title="Возвращает X-Координату Мыши!">txMouseX</a>()
<a name="l13152"></a>13152     {
<a name="l13153"></a>13153     <span class="keywordflow">return</span> <a class="code" href="a00082.htm#ga44606f3b7f5f345d15bb20d46fcf78b6" title="Возвращает позицию Мыши!">txMousePos</a>() .x;
<a name="l13154"></a>13154     }
<a name="l13155"></a>13155 
<a name="l13156"></a>13156 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13157"></a>13157 
<a name="l13158"></a>13158 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00082.htm#ga47faa907390ccd05b350112bcb9fc79a" title="Возвращает Y-Координату Мыши!">txMouseY</a>()
<a name="l13159"></a>13159     {
<a name="l13160"></a>13160     <span class="keywordflow">return</span> <a class="code" href="a00082.htm#ga44606f3b7f5f345d15bb20d46fcf78b6" title="Возвращает позицию Мыши!">txMousePos</a>() .y;
<a name="l13161"></a>13161     }
<a name="l13162"></a>13162 
<a name="l13163"></a>13163 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13164"></a>13164 
<a name="l13165"></a>13165 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00082.htm#ga3317e38b22d8e6f116c29503144c2cc2" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>()
<a name="l13166"></a>13166     {
<a name="l13167"></a>13167 $1  <span class="keywordflow">return</span> ((GetAsyncKeyState (VK_LBUTTON) &amp; 0x8000) &gt;&gt; 15) |  <span class="comment">// MSB to bit 0</span>
<a name="l13168"></a>13168            ((GetAsyncKeyState (VK_RBUTTON) &amp; 0x8000) &gt;&gt; 14) |  <span class="comment">// MSB to bit 1</span>
<a name="l13169"></a>13169            ((GetAsyncKeyState (VK_MBUTTON) &amp; 0x8000) &gt;&gt; 13);   <span class="comment">// MSB to bit 2</span>
<a name="l13170"></a>13170     }
<a name="l13171"></a>13171 
<a name="l13172"></a>13172 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13173"></a>13173 
<a name="l13174"></a>13174 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (<span class="keywordtype">unsigned</span> color <span class="comment">/*= FOREGROUND_LIGHTGRAY*/</span>)
<a name="l13175"></a>13175     {
<a name="l13176"></a>13176     <span class="keywordtype">unsigned</span> oldAttr = <a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>();
<a name="l13177"></a>13177 
<a name="l13178"></a>13178     SetConsoleTextAttribute (GetStdHandle (STD_OUTPUT_HANDLE), (WORD) color);
<a name="l13179"></a>13179 
<a name="l13180"></a>13180     <span class="keywordflow">return</span> oldAttr;
<a name="l13181"></a>13181     }
<a name="l13182"></a>13182 
<a name="l13183"></a>13183 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13184"></a>13184 
<a name="l13185"></a>13185 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>()
<a name="l13186"></a>13186     {
<a name="l13187"></a>13187     CONSOLE_SCREEN_BUFFER_INFO con = {};
<a name="l13188"></a>13188     GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con);
<a name="l13189"></a>13189 
<a name="l13190"></a>13190     <span class="keywordflow">return</span> con.wAttributes;
<a name="l13191"></a>13191     }
<a name="l13192"></a>13192 
<a name="l13193"></a>13193 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13194"></a>13194 
<a name="l13195"></a>13195 POINT <a class="code" href="a00081.htm#gaee548f7b5672cbcbb99246e0291d7336" title="Устанавливает позицию мигающего курсора консоли.">txSetConsoleCursorPos</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y)
<a name="l13196"></a>13196     {
<a name="l13197"></a>13197 $1  POINT fontSz = <a class="code" href="a00081.htm#ga250455abeab8c99a51153ef8f4ec0396" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l13198"></a>13198 
<a name="l13199"></a>13199 $   CONSOLE_SCREEN_BUFFER_INFO con = {};
<a name="l13200"></a>13200 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con) asserted;
<a name="l13201"></a>13201 
<a name="l13202"></a>13202 $   COORD pos = { (short) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * x / fontSz.x + con.srWindow.Left),
<a name="l13203"></a>13203                   (short) <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * y / fontSz.y + con.srWindow.Top ) };
<a name="l13204"></a>13204 
<a name="l13205"></a>13205 $   SetConsoleCursorPosition (GetStdHandle (STD_OUTPUT_HANDLE), pos) asserted;
<a name="l13206"></a>13206 
<a name="l13207"></a>13207 $   POINT prev = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((con.dwCursorPosition.X - con.srWindow.Left) * fontSz.x),
<a name="l13208"></a>13208                    <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((con.dwCursorPosition.Y - con.srWindow.Top ) * fontSz.y) };
<a name="l13209"></a>13209 $   <span class="keywordflow">return</span> prev;
<a name="l13210"></a>13210     }
<a name="l13211"></a>13211 
<a name="l13212"></a>13212 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13213"></a>13213 
<a name="l13214"></a>13214 POINT <a class="code" href="a00081.htm#ga3227242c57eef33049cdaee655f4faee" title="Возвращает позицию мигающего курсора консоли.">txGetConsoleCursorPos</a>()
<a name="l13215"></a>13215     {
<a name="l13216"></a>13216 $1  POINT fontSz = <a class="code" href="a00081.htm#ga250455abeab8c99a51153ef8f4ec0396" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l13217"></a>13217 
<a name="l13218"></a>13218 $   CONSOLE_SCREEN_BUFFER_INFO con = {};
<a name="l13219"></a>13219 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con) asserted;
<a name="l13220"></a>13220 
<a name="l13221"></a>13221 $   POINT  pos = { <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((con.dwCursorPosition.X - con.srWindow.Left) * fontSz.x),
<a name="l13222"></a>13222                    <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((con.dwCursorPosition.Y - con.srWindow.Top ) * fontSz.y) };
<a name="l13223"></a>13223 $   <span class="keywordflow">return</span> pos;
<a name="l13224"></a>13224     }
<a name="l13225"></a>13225 
<a name="l13226"></a>13226 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13227"></a>13227 
<a name="l13228"></a>13228 POINT <a class="code" href="a00081.htm#gade3dc928a81efd7054c61fa6cb4ddc06" title="Возвращает размер консоли.">txGetConsoleExtent</a>()
<a name="l13229"></a>13229     {
<a name="l13230"></a>13230 $1  CONSOLE_SCREEN_BUFFER_INFO con = {};
<a name="l13231"></a>13231 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con) asserted;
<a name="l13232"></a>13232 
<a name="l13233"></a>13233 $   POINT  size = { con.srWindow.Right  - con.srWindow.Left + 1,
<a name="l13234"></a>13234                     con.srWindow.Bottom - con.srWindow.Top  + 1 };
<a name="l13235"></a>13235 $   <span class="keywordflow">return</span> size;
<a name="l13236"></a>13236     }
<a name="l13237"></a>13237 
<a name="l13238"></a>13238 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13239"></a>13239 
<a name="l13240"></a>13240 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga2cb63c12d9206e9ed2b2c83c9a08f68e" title="Стирает текст консоли.">txClearConsole</a>()
<a name="l13241"></a>13241     {
<a name="l13242"></a>13242 $1  HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l13243"></a>13243 
<a name="l13244"></a>13244 $   CONSOLE_SCREEN_BUFFER_INFO con = {};
<a name="l13245"></a>13245 $   GetConsoleScreenBufferInfo (out, &amp;con) asserted;
<a name="l13246"></a>13246 
<a name="l13247"></a>13247 $   COORD start = {con.srWindow.Left, con.srWindow.Top};
<a name="l13248"></a>13248 
<a name="l13249"></a>13249 $   DWORD len   = (con.srWindow.Right  - con.srWindow.Left + 1) *
<a name="l13250"></a>13250                   (con.srWindow.Bottom - con.srWindow.Top  + 1);
<a name="l13251"></a>13251 
<a name="l13252"></a>13252 $   DWORD written = 0;
<a name="l13253"></a>13253 $   FillConsoleOutputCharacter (out, 0x20 <span class="comment">/*&#39; &#39;*/</span>,    len, start, &amp;written) asserted;
<a name="l13254"></a>13254 $   FillConsoleOutputAttribute (out, con.wAttributes, len, start, &amp;written) asserted;
<a name="l13255"></a>13255 
<a name="l13256"></a>13256 $   SetConsoleCursorPosition (GetStdHandle (STD_OUTPUT_HANDLE), start) asserted;
<a name="l13257"></a>13257 
<a name="l13258"></a>13258 $   return written == len;
<a name="l13259"></a>13259     }
<a name="l13260"></a>13260 
<a name="l13261"></a>13261 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13262"></a>13262 
<a name="l13263"></a>13263 POINT <a class="code" href="a00081.htm#ga250455abeab8c99a51153ef8f4ec0396" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>()
<a name="l13264"></a>13264     {
<a name="l13265"></a>13265 $1  Win32::CONSOLE_FONT_INFO font = {0, {8, 16}};
<a name="l13266"></a>13266 
<a name="l13267"></a>13267 $   _TX_CALL (Win32::GetCurrentConsoleFont, (GetStdHandle (STD_OUTPUT_HANDLE), <span class="keyword">false</span>, &amp;font));
<a name="l13268"></a>13268 
<a name="l13269"></a>13269 $   SIZE size = { font.dwFontSize.X, font.dwFontSize.Y };
<a name="l13270"></a>13270 $   <a class="code" href="a00080.htm#gafdd807831b131ba38d5856b6ee4e8287" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (Win32::GetTextExtentPoint32 (_txCanvas_BackBuf[1], <span class="stringliteral">&quot;W&quot;</span>, 1, &amp;size), <a class="code" href="a00081.htm#ga6e641bf88bafb9bc5297354adb3aeb56" title="Возвращает холст (дескриптор контекста рисования, HDC) окна рисования TXLib.">txDC</a>());
<a name="l13271"></a>13271 
<a name="l13272"></a>13272 $   POINT sizeFont = { size.cx, size.cy };
<a name="l13273"></a>13273 $   <span class="keywordflow">return</span> sizeFont;
<a name="l13274"></a>13274     }
<a name="l13275"></a>13275 
<a name="l13276"></a>13276 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13277"></a>13277 
<a name="l13278"></a>13278 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor</a> (<span class="keywordtype">bool</span> blink <span class="comment">/*= true*/</span>)
<a name="l13279"></a>13279     {
<a name="l13280"></a>13280 $1  <span class="keywordtype">bool</span> old = _txConsole_IsBlinking;
<a name="l13281"></a>13281 
<a name="l13282"></a>13282 $   _txConsole_IsBlinking = blink;
<a name="l13283"></a>13283 
<a name="l13284"></a>13284 $   <span class="keywordflow">return</span> old;
<a name="l13285"></a>13285     }
<a name="l13286"></a>13286 
<a name="l13287"></a>13287 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13288"></a>13288 
<a name="l13289"></a>13289 <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[] <span class="comment">/*= NULL*/</span>, DWORD mode <span class="comment">/*= SND_ASYNC*/</span>)
<a name="l13290"></a>13290     {
<a name="l13291"></a>13291 $1  mode |= SND_FILENAME | SND_NODEFAULT | SND_NOWAIT;
<a name="l13292"></a>13292 $   <span class="keywordflow">if</span> (mode &amp; SND_LOOP) mode = (mode &amp; ~SND_SYNC) | SND_ASYNC;
<a name="l13293"></a>13293 
<a name="l13294"></a>13294 $   <span class="keywordflow">if</span> (!filename) mode = SND_PURGE;
<a name="l13295"></a>13295 
<a name="l13296"></a>13296 $   <span class="keywordflow">return</span> !!Win32::PlaySound (filename, NULL, mode);
<a name="l13297"></a>13297     }
<a name="l13298"></a>13298 
<a name="l13299"></a>13299 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13300"></a>13300 
<a name="l13301"></a>13301 <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gad6db0ee1b36288c7eb3f2196077971f9" title="Читает &amp;nbsp; мысли &amp;nbsp; текст вслух.">txSpeak</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text, ...)
<a name="l13302"></a>13302     {
<a name="l13303"></a>13303 $1  <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>; (void) verbose;
<a name="l13304"></a>13304 $   <span class="keywordtype">bool</span> async   = <span class="keyword">false</span>; (void) async;
<a name="l13305"></a>13305 
<a name="l13306"></a>13306 $   <span class="keywordflow">for</span> (; text &amp;&amp; *text; text++)
<a name="l13307"></a>13307         {
<a name="l13308"></a>13308         <span class="keywordflow">if</span>      (*text == <span class="charliteral">&#39;\a&#39;</span>) {$ async   = <span class="keyword">true</span>; }
<a name="l13309"></a>13309         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*text == <span class="charliteral">&#39;\v&#39;</span>) {$ verbose = <span class="keyword">true</span>; }
<a name="l13310"></a>13310         <span class="keywordflow">else</span> <span class="keywordflow">break</span>;
<a name="l13311"></a>13311         }
<a name="l13312"></a>13312 
<a name="l13313"></a>13313 $   <span class="keywordtype">char</span> textA [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;You asked to speak empty text. I would rather say that TX Library is cool! Cats rules!&quot;</span>;
<a name="l13314"></a>13314 
<a name="l13315"></a>13315 $   va_list arg; va_start (arg, text);
<a name="l13316"></a>13316     <span class="keywordflow">if</span> (text &amp;&amp; *text) {$ _tx_vsnprintf_s (textA, <span class="keyword">sizeof</span> (textA) - 1, text, arg); }
<a name="l13317"></a>13317 $   va_end (arg);
<a name="l13318"></a>13318 
<a name="l13319"></a>13319 <span class="preprocessor">#ifdef TX_USE_SPEAK</span>
<a name="l13320"></a>13320 <span class="preprocessor"></span>
<a name="l13321"></a>13321     <span class="keywordflow">if</span> (text &amp;&amp; verbose) {$ printf (<span class="stringliteral">&quot;%s&quot;</span>, textA); }
<a name="l13322"></a>13322 
<a name="l13323"></a>13323 $   <span class="keywordtype">int</span> time = GetTickCount();
<a name="l13324"></a>13324 
<a name="l13325"></a>13325 $   <span class="keyword">static</span> <span class="keywordtype">wchar_t</span> textW [<a class="code" href="a00084.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> * <span class="keyword">sizeof</span> (wchar_t)] = L<span class="stringliteral">&quot;&quot;</span>;
<a name="l13326"></a>13326 $   MultiByteToWideChar (_TX_CODEPAGE, 0, textA, -1, textW, <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (textW));
<a name="l13327"></a>13327 
<a name="l13328"></a>13328 $   <span class="keyword">static</span> ISpVoice* voice = NULL;
<a name="l13329"></a>13329 
<a name="l13330"></a>13330 $   <span class="keywordflow">if</span> (text &amp;&amp; !voice)
<a name="l13331"></a>13331         {
<a name="l13332"></a>13332 $       HRESULT res = Win32::CoInitialize (NULL);
<a name="l13333"></a>13333         <span class="keywordflow">if</span> (res == S_OK) {$ Win32::CoCreateInstance (Win32::CLSID_SpVoice, NULL, CLSCTX_ALL, Win32::IID_ISpVoice, (<span class="keywordtype">void</span>**) &amp;voice); }
<a name="l13334"></a>13334         }
<a name="l13335"></a>13335 
<a name="l13336"></a>13336 $   <span class="keywordflow">if</span> (text &amp;&amp; voice)
<a name="l13337"></a>13337         {
<a name="l13338"></a>13338 $       Win32::_fpreset();
<a name="l13339"></a>13339 $       voice-&gt;Speak (textW, SPF_PERSIST_XML | SPF_PURGEBEFORESPEAK | (async? SPF_ASYNC : 0), NULL);
<a name="l13340"></a>13340 $       <a class="code" href="a00080.htm#ga5de732de72c46b992ac2feeac2de7e42" title="Переинициализирует математический сопроцессор">tx_fpreset</a>();
<a name="l13341"></a>13341         }
<a name="l13342"></a>13342 
<a name="l13343"></a>13343 $   <span class="keywordflow">if</span> (!text &amp;&amp; voice)
<a name="l13344"></a>13344         {
<a name="l13345"></a>13345 $       voice-&gt;Release();
<a name="l13346"></a>13346 $       voice = NULL;
<a name="l13347"></a>13347 
<a name="l13348"></a>13348 $       Win32::CoUninitialize();
<a name="l13349"></a>13349         }
<a name="l13350"></a>13350 
<a name="l13351"></a>13351 $   <span class="keywordflow">return</span> (voice)? GetTickCount() - time : -1;
<a name="l13352"></a>13352 
<a name="l13353"></a>13353 <span class="preprocessor">#else</span>
<a name="l13354"></a>13354 <span class="preprocessor"></span>
<a name="l13355"></a>13355 $   <span class="keywordflow">if</span> (text)
<a name="l13356"></a>13356         {
<a name="l13357"></a>13357 $       <span class="keywordtype">unsigned</span> oldAttr = <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_LIGHTRED | BACKGROUND_BLACK);
<a name="l13358"></a>13358 
<a name="l13359"></a>13359 $       <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_ERROR, <span class="stringliteral">&quot;txSpeak(): Не могу произнести (нужен TX_USE_SPEAK, см. TXLib Help)&quot;</span>, <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>, textA);
<a name="l13360"></a>13360 
<a name="l13361"></a>13361 $       <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (oldAttr);
<a name="l13362"></a>13362         }
<a name="l13363"></a>13363 
<a name="l13364"></a>13364 $   <span class="keywordflow">return</span> -1;
<a name="l13365"></a>13365 
<a name="l13366"></a>13366 <span class="preprocessor">#endif</span>
<a name="l13367"></a>13367 <span class="preprocessor"></span>    }
<a name="l13368"></a>13368 
<a name="l13369"></a>13369 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13370"></a>13370 
<a name="l13371"></a>13371 intptr_t <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, <span class="keyword">const</span> <span class="keywordtype">char</span> fileName[],
<a name="l13372"></a>13372                       <span class="keywordtype">double</span> zoom <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> gain <span class="comment">/*= 1*/</span>, HWND wnd <span class="comment">/*= txWindow()*/</span>)
<a name="l13373"></a>13373     {
<a name="l13374"></a>13374 $1  <span class="keywordflow">if</span> (wnd &amp;&amp; wnd == <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>() &amp;&amp; _TX_TXWINDOW_FAILED()) <span class="keywordflow">return</span> -1;
<a name="l13375"></a>13375 
<a name="l13376"></a>13376 $   <span class="keywordtype">int</span> time = GetTickCount();
<a name="l13377"></a>13377 
<a name="l13378"></a>13378 $   <span class="keyword">static</span> <span class="keywordtype">char</span> processUID [64] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l13379"></a>13379     <span class="keywordflow">if</span> (!*processUID)
<a name="l13380"></a>13380         {
<a name="l13381"></a>13381 $       FILETIME startTime = {}, null = {};
<a name="l13382"></a>13382 $       GetProcessTimes (GetCurrentProcess(), &amp;startTime, &amp;null, &amp;null, &amp;null) asserted;
<a name="l13383"></a>13383 $       _snprintf_s (processUID, sizeof (processUID) - 1, &quot;TXLib[%08X%08X]::<a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a>&quot;,
<a name="l13384"></a>13384                     (<span class="keywordtype">unsigned</span>) startTime.dwHighDateTime, (<span class="keywordtype">unsigned</span>) startTime.dwLowDateTime) &lt; (<span class="keywordtype">int</span>) sizeof (processUID) asserted;
<a name="l13385"></a>13385         }
<a name="l13386"></a>13386 
<a name="l13387"></a>13387 $   if (!fileName)
<a name="l13388"></a>13388         {
<a name="l13389"></a>13389 $       txTaskKill (<span class="stringliteral">&quot;vlc.exe&quot;</span>, processUID, 0);  <span class="comment">// Kill&#39;em all, by command line pattern</span>
<a name="l13390"></a>13390 $       <span class="keywordflow">return</span> 0;
<a name="l13391"></a>13391         }
<a name="l13392"></a>13392 
<a name="l13393"></a>13393 $   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* vlcPath = _txPlayVideo_FindVLC();
<a name="l13394"></a>13394 
<a name="l13395"></a>13395 $   <span class="keywordflow">if</span> (!vlcPath || _access (vlcPath, 0) != 0)
<a name="l13396"></a>13396         {
<a name="l13397"></a>13397 $       <span class="keyword">static</span> <span class="keywordtype">int</span> once = <span class="keyword">false</span>;
<a name="l13398"></a>13398 
<a name="l13399"></a>13399 $       <span class="keywordflow">if</span> (*fileName &amp;&amp; !once++)
<a name="l13400"></a>13400             {$ <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Не найден видеопроигрыватель VideoLAN (vlc.exe). Cкачайте его с сайта VideoLAN.org &quot;</span>
<a name="l13401"></a>13401                                     <span class="stringliteral">&quot;и установите. Без установки VideoLAN видео воспроизводиться не будет :(\n\n&quot;</span>
<a name="l13402"></a>13402                                     <span class="stringliteral">&quot;--\n&quot;</span> <span class="stringliteral">&quot;Всегда Ваша, функция &quot;</span> <span class="comment">/* как бы */</span> <span class="stringliteral">&quot;txPlayVideo()...\n&quot;</span>
<a name="l13403"></a>13403                                     <span class="stringliteral">&quot;P.S. См. мое описание в TXLib Help.&quot;</span>); }
<a name="l13404"></a>13404 $       <span class="keywordflow">return</span> INT_MIN;
<a name="l13405"></a>13405         }
<a name="l13406"></a>13406 
<a name="l13407"></a>13407 $   <span class="keywordtype">bool</span> async = <span class="keyword">false</span>;
<a name="l13408"></a>13408     <span class="keywordflow">if</span> (*fileName == <span class="charliteral">&#39;\a&#39;</span>) {$ async = <span class="keyword">true</span>; fileName++; }
<a name="l13409"></a>13409 
<a name="l13410"></a>13410 $   RECT rect = {};
<a name="l13411"></a>13411     <span class="keywordflow">if</span> (wnd) {$ GetClientRect (wnd, &amp;rect); }
<a name="l13412"></a>13412 
<a name="l13413"></a>13413     <span class="keywordflow">if</span> (!width)  {$ width  = rect.right;  }
<a name="l13414"></a>13414     <span class="keywordflow">if</span> (!height) {$ height = rect.bottom; }
<a name="l13415"></a>13415 
<a name="l13416"></a>13416     <span class="comment">// Create a child window to hold the video stream</span>
<a name="l13417"></a>13417 
<a name="l13418"></a>13418 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* errPos = <span class="stringliteral">&quot;ВНЕЗАПНО&quot;</span>;
<a name="l13419"></a>13419 
<a name="l13420"></a>13420 $   <span class="keyword">volatile</span> HWND child = NULL;
<a name="l13421"></a>13421 $   <span class="keywordflow">if</span> (wnd &amp;&amp; (wnd == <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>()))
<a name="l13422"></a>13422         {
<a name="l13423"></a>13423 $       <span class="keyword">const</span> <span class="keywordtype">char</span>* wndClass = txRegisterClass (<span class="stringliteral">&quot;txPlayVideo&quot;</span>, _txPlayVideo_WndProc, 0, NULL_BRUSH, 1);
<a name="l13424"></a>13424 
<a name="l13425"></a>13425 $       <span class="keyword">static</span> <span class="keywordtype">int</span> number = 1;
<a name="l13426"></a>13426 $       CREATESTRUCT createData = { NULL, NULL, (HMENU) (<span class="keywordtype">size_t</span>) number++, <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), height, width, y, x,
<a name="l13427"></a>13427                                     WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, __func__, wndClass };
<a name="l13428"></a>13428 $       child = txCreateExtraWindow (createData);
<a name="l13429"></a>13429 $       <span class="keywordflow">if</span> (!child)
<a name="l13430"></a>13430             {
<a name="l13431"></a>13431 $           <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_ERROR, <span class="stringliteral">&quot;txPlayVideo() сообщает&quot;</span>, <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l13432"></a>13432                                        strstr (_txError (NULL, 0, NULL, 0, <span class="stringliteral">&quot;\f&quot;</span> <span class="stringliteral">&quot;Не могу создать окно для видео :(&quot;</span>), errPos));
<a name="l13433"></a>13433 $           <span class="keywordflow">return</span> INT_MIN+3;
<a name="l13434"></a>13434             }
<a name="l13435"></a>13435 
<a name="l13436"></a>13436 $       BringWindowToTop (child);
<a name="l13437"></a>13437 
<a name="l13438"></a>13438 $       wnd = child;
<a name="l13439"></a>13439         }
<a name="l13440"></a>13440 
<a name="l13441"></a>13441     <span class="comment">// Build the command line</span>
<a name="l13442"></a>13442 
<a name="l13443"></a>13443     <span class="keywordflow">if</span> (!zoom &amp;&amp; !wnd) {$ zoom = 1; }
<a name="l13444"></a>13444 
<a name="l13445"></a>13445 $   <span class="keywordtype">char</span> sZoom [64] = <span class="stringliteral">&quot;--autoscale&quot;</span>;
<a name="l13446"></a>13446     <span class="keywordflow">if</span> (zoom) {$ _snprintf_s (sZoom, <span class="keyword">sizeof</span> (sZoom) - 1, <span class="stringliteral">&quot;--no-autoscale --zoom=%.10g&quot;</span>, zoom) &lt; (int) <span class="keyword">sizeof</span> (sZoom) <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>; }
<a name="l13447"></a>13447 
<a name="l13448"></a>13448 $   <span class="keyword">static</span> <span class="keywordtype">char</span> cmd [MAX_PATH*2 + 1024] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l13449"></a>13449 
<a name="l13450"></a>13450 $   _snprintf_s (cmd, <span class="keyword">sizeof</span> (cmd) - 1, <span class="stringliteral">&quot;\&quot;%s\&quot; \&quot;%s\&quot; vlc://quit&quot;</span>
<a name="l13451"></a>13451 
<a name="l13452"></a>13452                  <span class="stringliteral">&quot; %s --gain=%.10g --drawable-hwnd=%&quot;</span> PRIu64 <span class="stringliteral">&quot; --video-title=\&quot;%s\&quot; --logfile=%s&quot;</span>
<a name="l13453"></a>13453 
<a name="l13454"></a>13454                  <span class="stringliteral">&quot; --live-caching=500 --network-caching=500 --quiet-synchro --no-embedded-video --file-logging&quot;</span>
<a name="l13455"></a>13455 
<a name="l13456"></a>13456                  <span class="stringliteral">&quot; --ignore-config --reset-config --no-one-instance --play-and-exit&quot;</span>
<a name="l13457"></a>13457                  <span class="stringliteral">&quot; --intf=dummy --dummy-quiet --quiet --no-video-deco --no-video-title-show --no-stats --no-sub-autodetect-file&quot;</span>
<a name="l13458"></a>13458                  <span class="stringliteral">&quot; --no-disable-screensaver --no-snapshot-preview --no-auto-preparse --no-mouse-events --no-keyboard-events&quot;</span>,
<a name="l13459"></a>13459 
<a name="l13460"></a>13460                  vlcPath, (*fileName? fileName : <span class="stringliteral">&quot;fileName&quot;</span>), sZoom, gain, (uint64_t) wnd, processUID, <a class="code" href="a00084.htm#ga6a2db5c9af56bfbab367902179189895" title="Имя лог-файла TXLib.">_txLogName</a>) &lt; (int) <span class="keyword">sizeof</span> (cmd) <a class="code" href="a00080.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l13461"></a>13461 
<a name="l13462"></a>13462 $   <a class="code" href="a00080.htm#ga372c7e43cc383da3f8e8e00fc60be91f" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;txPlayVideo (%d, %d, %d, %d, \&quot;%s\&quot;, %lg, %lg, %p): [%s]\n\n&quot;</span>,
<a name="l13463"></a>13463                          x, y, width, height, fileName, zoom, gain, wnd, cmd);
<a name="l13464"></a>13464 $   <span class="keywordflow">if</span> (!*fileName)
<a name="l13465"></a>13465         {
<a name="l13466"></a>13466         <span class="keywordflow">if</span> (child) {$ <a class="code" href="a00081.htm#ga0a3cf3a018cea9d5889d2626e9a37136" title="Уничтожает окно.">txDestroyWindow</a> (child); }
<a name="l13467"></a>13467 $       <span class="keywordflow">return</span> (intptr_t) cmd;
<a name="l13468"></a>13468         }
<a name="l13469"></a>13469 
<a name="l13470"></a>13470 $   <span class="keywordflow">if</span> (!strstr (fileName, <span class="stringliteral">&quot;://&quot;</span>) &amp;&amp; _access (fileName, 0) != 0)
<a name="l13471"></a>13471         {
<a name="l13472"></a>13472 $       <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_ERROR, <span class="stringliteral">&quot;txPlayVideo() сообщает&quot;</span>, <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l13473"></a>13473                                    strstr (_txError (NULL, 0, NULL, 0, <span class="stringliteral">&quot;\f&quot;</span> <span class="stringliteral">&quot;Не найден файл \&quot;%s\&quot;&quot;</span>, fileName), errPos));
<a name="l13474"></a>13474 
<a name="l13475"></a>13475         <span class="keywordflow">if</span> (child) {$ <a class="code" href="a00081.htm#ga0a3cf3a018cea9d5889d2626e9a37136" title="Уничтожает окно.">txDestroyWindow</a> (child); }
<a name="l13476"></a>13476 $       <span class="keywordflow">return</span> INT_MIN+1;
<a name="l13477"></a>13477         }
<a name="l13478"></a>13478 
<a name="l13479"></a>13479     <span class="comment">// Run VLC, run</span>
<a name="l13480"></a>13480 
<a name="l13481"></a>13481 $   PROCESS_INFORMATION vlc   = {};
<a name="l13482"></a>13482 $   STARTUPINFO         start = { <span class="keyword">sizeof</span> (start) };
<a name="l13483"></a>13483 $   DWORD               ret   = 0;
<a name="l13484"></a>13484 
<a name="l13485"></a>13485 $   <span class="keywordflow">if</span> (CreateProcess (NULL, cmd, NULL, NULL, <span class="keyword">true</span>, 0, NULL, NULL, &amp;start, &amp;vlc) &amp;&amp;
<a name="l13486"></a>13486         vlc.hProcess &amp;&amp; vlc.hThread)
<a name="l13487"></a>13487         {
<a name="l13488"></a>13488 $       <span class="keywordflow">if</span> (child)
<a name="l13489"></a>13489             {
<a name="l13490"></a>13490 $           assert (wnd == child);
<a name="l13491"></a>13491 $           SetWindowLongPtr (wnd, GWLP_USERDATA, (LONG_PTR) vlc.hProcess);
<a name="l13492"></a>13492             }
<a name="l13493"></a>13493 
<a name="l13494"></a>13494 $       <span class="keywordflow">if</span> (!async)
<a name="l13495"></a>13495             {
<a name="l13496"></a>13496 $           WaitForSingleObject (vlc.hProcess, INFINITE);
<a name="l13497"></a>13497 $           GetExitCodeProcess  (vlc.hProcess, &amp;ret) asserted;
<a name="l13498"></a>13498             }
<a name="l13499"></a>13499 
<a name="l13500"></a>13500 $       if (!child)
<a name="l13501"></a>13501             {
<a name="l13502"></a>13502 $           CloseHandle (vlc.hProcess) asserted;
<a name="l13503"></a>13503             }
<a name="l13504"></a>13504 
<a name="l13505"></a>13505 $       CloseHandle (vlc.hThread) asserted;
<a name="l13506"></a>13506 
<a name="l13507"></a>13507 $       return (async? (intptr_t) wnd : (ret == 0)? time - GetTickCount() : - (<span class="keywordtype">int</span>) ret);
<a name="l13508"></a>13508         }
<a name="l13509"></a>13509     else
<a name="l13510"></a>13510         {
<a name="l13511"></a>13511 $       <a class="code" href="a00080.htm#ga03a5e3473a7e7e22764939ebb13f4e63" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_ERROR, <span class="stringliteral">&quot;txPlayVideo() сообщает&quot;</span>, <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l13512"></a>13512                                    strstr (_txError (NULL, 0, NULL, 0, <span class="stringliteral">&quot;\f&quot;</span> <span class="stringliteral">&quot;Ошибка запуска VideoLAN (%s)&quot;</span>, cmd), errPos));
<a name="l13513"></a>13513 $       <span class="keywordflow">if</span> (child)
<a name="l13514"></a>13514             {$ <a class="code" href="a00081.htm#ga0a3cf3a018cea9d5889d2626e9a37136" title="Уничтожает окно.">txDestroyWindow</a> (child); }
<a name="l13515"></a>13515 
<a name="l13516"></a>13516 $       <span class="keywordflow">return</span> INT_MIN+4;
<a name="l13517"></a>13517         }
<a name="l13518"></a>13518 
<a name="l13519"></a>13519 <span class="preprocessor">    #undef PROCESS_UID_</span>
<a name="l13520"></a>13520 <span class="preprocessor"></span>    }
<a name="l13521"></a>13521 
<a name="l13522"></a>13522 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13523"></a>13523 
<a name="l13524"></a>13524 <span class="keyword">inline</span> intptr_t <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> fileName[], <span class="keywordtype">double</span> zoom <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> gain <span class="comment">/*= 0*/</span>, HWND wnd <span class="comment">/*= txWindow()*/</span>)
<a name="l13525"></a>13525     {
<a name="l13526"></a>13526 $1  <span class="keywordflow">return</span> <a class="code" href="a00080.htm#ga3d4731dd56b60635c80bc662c295c821" title="Проигрывает видео.">txPlayVideo</a> (0, 0, 0, 0, fileName, zoom, gain, wnd);
<a name="l13527"></a>13527     }
<a name="l13528"></a>13528 
<a name="l13529"></a>13529 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13530"></a>13530 
<a name="l13531"></a>13531 LRESULT CALLBACK _txPlayVideo_WndProc (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar)
<a name="l13532"></a>13532     {
<a name="l13533"></a>13533     <span class="keyword">const</span> UINT_PTR checkTimer = 1;
<a name="l13534"></a>13534 
<a name="l13535"></a>13535     <span class="keywordflow">switch</span> (msg)
<a name="l13536"></a>13536         {
<a name="l13537"></a>13537         <span class="keywordflow">case</span> WM_CREATE:
<a name="l13538"></a>13538             {
<a name="l13539"></a>13539 $1          SetTimer  (wnd, checkTimer, 5*<a class="code" href="a00084.htm#gaf2070fcdbd473d328f17f130623db80a" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>, NULL) asserted;
<a name="l13540"></a>13540             }
<a name="l13541"></a>13541             break;
<a name="l13542"></a>13542 
<a name="l13543"></a>13543         case WM_DESTROY:
<a name="l13544"></a>13544             {
<a name="l13545"></a>13545 $1          KillTimer (wnd, checkTimer) asserted;
<a name="l13546"></a>13546 
<a name="l13547"></a>13547 $           HANDLE vlc = (HANDLE)(uintptr_t) GetWindowLongPtr (wnd, GWLP_USERDATA);
<a name="l13548"></a>13548 
<a name="l13549"></a>13549 $           if (vlc)
<a name="l13550"></a>13550                 {
<a name="l13551"></a>13551 $               Win32::TerminateProcess (vlc, 0);
<a name="l13552"></a>13552 
<a name="l13553"></a>13553 $               CloseHandle (vlc) asserted;
<a name="l13554"></a>13554 
<a name="l13555"></a>13555 $               SetWindowLongPtr (wnd, GWLP_USERDATA, 0);
<a name="l13556"></a>13556                 }
<a name="l13557"></a>13557             }
<a name="l13558"></a>13558             break;
<a name="l13559"></a>13559 
<a name="l13560"></a>13560         case WM_TIMER:
<a name="l13561"></a>13561             {
<a name="l13562"></a>13562             HANDLE vlc = (HANDLE)(uintptr_t) GetWindowLongPtr (wnd, GWLP_USERDATA);
<a name="l13563"></a>13563 
<a name="l13564"></a>13564             <span class="keywordflow">if</span> (vlc &amp;&amp; WaitForSingleObject (vlc, 0) != WAIT_TIMEOUT)
<a name="l13565"></a>13565                 {
<a name="l13566"></a>13566 $1              DestroyWindow (wnd) asserted;
<a name="l13567"></a>13567                 }
<a name="l13568"></a>13568             }
<a name="l13569"></a>13569             break;
<a name="l13570"></a>13570 
<a name="l13571"></a>13571         default:
<a name="l13572"></a>13572             break;
<a name="l13573"></a>13573         }
<a name="l13574"></a>13574 
<a name="l13575"></a>13575     return DefWindowProc (wnd, msg, wpar, lpar);
<a name="l13576"></a>13576     }
<a name="l13577"></a>13577 
<a name="l13578"></a>13578 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13579"></a>13579 
<a name="l13580"></a>13580 const <span class="keywordtype">char</span>* _txPlayVideo_FindVLC()
<a name="l13581"></a>13581     {
<a name="l13582"></a>13582 $1  <span class="keyword">static</span> <span class="keywordtype">char</span> vlcPath [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l13583"></a>13583 
<a name="l13584"></a>13584 $   <span class="keywordflow">if</span> (SearchPath (NULL, <span class="stringliteral">&quot;vlc.bat&quot;</span>, NULL, <span class="keyword">sizeof</span> (vlcPath), vlcPath, NULL))
<a name="l13585"></a>13585         {
<a name="l13586"></a>13586         <span class="keywordflow">if</span> (_access (vlcPath, 0) == 0) {$ <span class="keywordflow">return</span> vlcPath; }
<a name="l13587"></a>13587         }
<a name="l13588"></a>13588 
<a name="l13589"></a>13589 $   <span class="keywordflow">if</span> (SearchPath (NULL, <span class="stringliteral">&quot;vlc.exe&quot;</span>, NULL, <span class="keyword">sizeof</span> (vlcPath), vlcPath, NULL))
<a name="l13590"></a>13590         {
<a name="l13591"></a>13591         <span class="keywordflow">if</span> (_access (vlcPath, 0) == 0) {$ <span class="keywordflow">return</span> vlcPath; }
<a name="l13592"></a>13592         }
<a name="l13593"></a>13593 
<a name="l13594"></a>13594 $   <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gad942f797bce07af74cd11c88d50ddd3e" title="Читает информацию из реестра Windows.">txRegQuery</a> (<span class="stringliteral">&quot;HKLM\\Software\\VideoLAN\\VLC&quot;</span>, NULL, vlcPath, <span class="keyword">sizeof</span> (vlcPath)))
<a name="l13595"></a>13595         {
<a name="l13596"></a>13596         <span class="keywordflow">if</span> (_access (vlcPath, 0) == 0) {$ <span class="keywordflow">return</span> vlcPath; }
<a name="l13597"></a>13597         }
<a name="l13598"></a>13598 
<a name="l13599"></a>13599 $   <span class="keywordflow">if</span> (<a class="code" href="a00080.htm#gad942f797bce07af74cd11c88d50ddd3e" title="Читает информацию из реестра Windows.">txRegQuery</a> (<span class="stringliteral">&quot;HKLM\\Software\\VideoLAN\\VLC&quot;</span>, <span class="stringliteral">&quot;InstallDir&quot;</span>, vlcPath, <span class="keyword">sizeof</span> (vlcPath)))
<a name="l13600"></a>13600         {
<a name="l13601"></a>13601 $       strncat_s (vlcPath, <span class="keyword">sizeof</span> (vlcPath) - 1, <span class="stringliteral">&quot;\\vlc.exe&quot;</span>, INT_MAX);
<a name="l13602"></a>13602 
<a name="l13603"></a>13603         <span class="keywordflow">if</span> (_access (vlcPath, 0) == 0) {$ <span class="keywordflow">return</span> vlcPath; }
<a name="l13604"></a>13604         }
<a name="l13605"></a>13605 
<a name="l13606"></a>13606 $   strncpy_s (vlcPath, <span class="keyword">sizeof</span> (vlcPath), <span class="stringliteral">&quot;C:\\Program Files&quot;</span>    <span class="stringliteral">&quot;\\VideoLAN\\VLC\\vlc.exe&quot;</span>, UINT_MAX);
<a name="l13607"></a>13607         {
<a name="l13608"></a>13608         <span class="keywordflow">if</span> (_access (vlcPath, 0) == 0) {$ <span class="keywordflow">return</span> vlcPath; }
<a name="l13609"></a>13609         }
<a name="l13610"></a>13610 
<a name="l13611"></a>13611 $   strncpy_s (vlcPath, <span class="keyword">sizeof</span> (vlcPath), <span class="stringliteral">&quot;C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe&quot;</span>, UINT_MAX);
<a name="l13612"></a>13612         {
<a name="l13613"></a>13613         <span class="keywordflow">if</span> (_access (vlcPath, 0) == 0) {$ <span class="keywordflow">return</span> vlcPath; }
<a name="l13614"></a>13614         }
<a name="l13615"></a>13615 
<a name="l13616"></a>13616 $   <span class="keywordflow">return</span> NULL;
<a name="l13617"></a>13617     }
<a name="l13618"></a>13618 
<a name="l13619"></a>13619 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13620"></a>13620 
<a name="l13621"></a>13621 <span class="comment">// +--&lt;&lt;&lt; Это вряд ли имеет отношение к тому, что вы ищете :)</span>
<a name="l13622"></a>13622 <span class="comment">// V      Полезно смотреть не только вверх, но и вниз</span>
<a name="l13623"></a>13623 
<a name="l13624"></a>13624 WNDPROC <a class="code" href="a00080.htm#ga30fb1a6913174dfcea5079391f655be2" title="Устанавливает альтернативную функцию обработки оконных сообщений Windows (оконную функцию) для окна T...">txSetWindowsHook</a> (WNDPROC wndProc <span class="comment">/*= NULL*/</span>)
<a name="l13625"></a>13625     {
<a name="l13626"></a>13626 $1  WNDPROC old = _txAltWndProc; _txAltWndProc = wndProc;
<a name="l13627"></a>13627 $   <span class="keywordflow">return</span>  old;
<a name="l13628"></a>13628     }
<a name="l13629"></a>13629 
<a name="l13630"></a>13630 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13631"></a>13631 
<a name="l13632"></a>13632 <span class="comment">//     +--&lt;&lt;&lt; А это, наконец, искомое определение этой функции.</span>
<a name="l13633"></a>13633 <span class="comment">//     |      Смотрите по сторонам! Нужная вам функция где-то рядом.</span>
<a name="l13634"></a>13634 <span class="comment">//     |</span>
<a name="l13635"></a>13635 <span class="comment">//     v</span>
<a name="l13636"></a>13636 <span class="keywordtype">bool</span> <a class="code" href="a00081.htm#ga93cecf6b117fc403c0488f388b78a6d1" title="Делает нечто иногда удобное. См. название функции.">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture</a>()
<a name="l13637"></a>13637     {
<a name="l13638"></a>13638     <a class="code" href="a00080.htm#gaf9be7d98f32c0737a2d7f30039a60c0a" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Это запланированная ошибка. Такое бывает. Вы хотели вызвать:\n\n&quot;</span>
<a name="l13639"></a>13639 
<a name="l13640"></a>13640                   <span class="stringliteral">&quot;txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture()\n\n&quot;</span>
<a name="l13641"></a>13641 
<a name="l13642"></a>13642                   <span class="stringliteral">&quot;Хоть вы долго [копировали]набирали это имя, на самом деле эта функция не реализована. &quot;</span>
<a name="l13643"></a>13643                   <span class="stringliteral">&quot;Есть другая функция, которая убирает авто-паузу в конце программы, но в хелпе про нее не написано.\n\n&quot;</span>
<a name="l13644"></a>13644 
<a name="l13645"></a>13645                   <span class="stringliteral">&quot;Но не все так плохо. Определение нужной функции есть в исходных текстах TXLib.h, оно лежит рядом &quot;</span>
<a name="l13646"></a>13646                   <span class="stringliteral">&quot;с определением той функции с длинным названием, которую вы сейчас вызвали.\n\n&quot;</span>
<a name="l13647"></a>13647 
<a name="l13648"></a>13648                   <span class="stringliteral">&quot;Нажмите в редакторе Ctrl+O, найдите и откройте файл TXLib.h (он лежит в папке, куда вы &quot;</span>
<a name="l13649"></a>13649                   <span class="stringliteral">&quot;установили TXLib), затем нажмите Ctrl+F и ищите \&quot;txIDontWant\&quot;. Удачи!\n\n&quot;</span>,
<a name="l13650"></a>13650 
<a name="l13651"></a>13651                   <span class="stringliteral">&quot;Не получилось&quot;</span>, MB_ICONSTOP);
<a name="l13652"></a>13652 
<a name="l13653"></a>13653     <span class="comment">// The truth is out there... (C++files)</span>
<a name="l13654"></a>13654 
<a name="l13655"></a>13655     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l13656"></a>13656     }
<a name="l13657"></a>13657 
<a name="l13658"></a>13658 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13659"></a>13659 
<a name="l13660"></a>13660 <span class="comment">// Bingo! Now you are learned to use the Sources, Luke. And may the Source be with you.</span>
<a name="l13661"></a>13661 
<a name="l13662"></a>13662 <span class="keyword">inline</span> <span class="keywordtype">bool</span> txDisableAutoPause()
<a name="l13663"></a>13663     {
<a name="l13664"></a>13664     _txExit = <span class="keyword">true</span>;
<a name="l13665"></a>13665     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l13666"></a>13666     }
<a name="l13667"></a>13667 
<a name="l13668"></a>13668 <span class="comment">// P.S. This library contains more undocumented functions. Search them via &quot;Luke&quot; keyword.</span>
<a name="l13669"></a>13669 
<a name="l13670"></a>13670 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13671"></a>13671 
<a name="l13672"></a>13672 <span class="keywordtype">void</span> _txDump (<span class="keyword">const</span> <span class="keywordtype">void</span>* address, <span class="keyword">const</span> <span class="keywordtype">char</span> name[] <span class="comment">/*= &quot;_txDump()&quot;*/</span>, <span class="keywordtype">bool</span> pause <span class="comment">/*= true*/</span>)
<a name="l13673"></a>13673     {
<a name="l13674"></a>13674 $1  assert (!_txIsBadReadPtr (address));
<a name="l13675"></a>13675 
<a name="l13676"></a>13676     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* p = (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) address;
<a name="l13677"></a>13677 $   <span class="keywordtype">unsigned</span> x = 0;
<a name="l13678"></a>13678 
<a name="l13679"></a>13679 $   <span class="keywordtype">unsigned</span> attr = <a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>();
<a name="l13680"></a>13680 
<a name="l13681"></a>13681 $   <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_WHITE);
<a name="l13682"></a>13682 $   printf (<span class="stringliteral">&quot;\n%*.*s &quot;</span>, (<span class="keywordtype">int</span>) <span class="keyword">sizeof</span> (address) * 2, (<span class="keywordtype">int</span>) <span class="keyword">sizeof</span> (address) * 2, ((name)? name : <span class="stringliteral">&quot;&quot;</span>));
<a name="l13683"></a>13683 
<a name="l13684"></a>13684 $   <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_YELLOW);
<a name="l13685"></a>13685 $   <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++) printf (<span class="stringliteral">&quot;%02X &quot;</span>, x);
<a name="l13686"></a>13686 $   <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++) printf (<span class="stringliteral">&quot;%X&quot;</span>,    x);
<a name="l13687"></a>13687 
<a name="l13688"></a>13688 $   <span class="keyword">const</span> <span class="keywordtype">char</span>   isCtrl[] = <span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;\b&quot;</span> <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;\r&quot;</span> <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;\0&quot;</span>;
<a name="l13689"></a>13689 $   <span class="keyword">const</span> <span class="keywordtype">char</span>   xlatCh[] =  <span class="stringliteral">&quot;·&quot;</span>  <span class="stringliteral">&quot;·&quot;</span>  <span class="stringliteral">&quot;·&quot;</span>  <span class="stringliteral">&quot;·&quot;</span>  <span class="stringliteral">&quot;·&quot;</span>  <span class="stringliteral">&quot;·&quot;</span>;
<a name="l13690"></a>13690 $   <span class="keyword">const</span> <span class="keywordtype">size_t</span> szCtrl   = <span class="keyword">sizeof</span> (isCtrl) - 1;
<a name="l13691"></a>13691 
<a name="l13692"></a>13692 $   <span class="keywordtype">int</span> oldCP = GetConsoleOutputCP();
<a name="l13693"></a>13693 
<a name="l13694"></a>13694 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = 0; y &lt; 16; y++, p += 16)
<a name="l13695"></a>13695         {
<a name="l13696"></a>13696         <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_YELLOW);
<a name="l13697"></a>13697 
<a name="l13698"></a>13698         printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;%*p &quot;</span>, (<span class="keywordtype">int</span>) <span class="keyword">sizeof</span> (address) * 2, p);
<a name="l13699"></a>13699 
<a name="l13700"></a>13700         <span class="keywordtype">int</span> color = FOREGROUND_LIGHTGREEN;
<a name="l13701"></a>13701 
<a name="l13702"></a>13702         <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++)
<a name="l13703"></a>13703             {
<a name="l13704"></a>13704             <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (color + x/4%2);
<a name="l13705"></a>13705             printf (<span class="stringliteral">&quot;%02X &quot;</span>, p[x]);
<a name="l13706"></a>13706             }
<a name="l13707"></a>13707 
<a name="l13708"></a>13708         <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++)
<a name="l13709"></a>13709             {
<a name="l13710"></a>13710             <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (color + x/4%2);
<a name="l13711"></a>13711 
<a name="l13712"></a>13712             <span class="keywordtype">char</span> c = p[x];
<a name="l13713"></a>13713             <span class="keyword">const</span> <span class="keywordtype">char</span>* ctrl = (<span class="keyword">const</span> <span class="keywordtype">char</span>*) memchr (isCtrl, c, szCtrl);
<a name="l13714"></a>13714             <span class="keywordflow">if</span> (ctrl) c = xlatCh [ctrl - isCtrl];
<a name="l13715"></a>13715 
<a name="l13716"></a>13716             <span class="keywordflow">if</span> (ctrl) SetConsoleOutputCP (1251);
<a name="l13717"></a>13717 
<a name="l13718"></a>13718             printf (<span class="stringliteral">&quot;%c&quot;</span>, c);
<a name="l13719"></a>13719 
<a name="l13720"></a>13720             <span class="keywordflow">if</span> (ctrl) SetConsoleOutputCP (oldCP);
<a name="l13721"></a>13721             }
<a name="l13722"></a>13722         }
<a name="l13723"></a>13723 
<a name="l13724"></a>13724 $   <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr);
<a name="l13725"></a>13725 $   printf (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l13726"></a>13726 
<a name="l13727"></a>13727 $   <span class="keywordflow">if</span> (pause)
<a name="l13728"></a>13728         {
<a name="l13729"></a>13729 $       SetConsoleOutputCP (_TX_CODEPAGE);
<a name="l13730"></a>13730 
<a name="l13731"></a>13731 $       fprintf (stderr, <span class="stringliteral">&quot;[Нажмите любую клавишу для продолжения]                          CodePage = %5d\n&quot;</span>, oldCP);
<a name="l13732"></a>13732 $       (void)_getch();
<a name="l13733"></a>13733 
<a name="l13734"></a>13734 $       SetConsoleOutputCP (oldCP);
<a name="l13735"></a>13735         }
<a name="l13736"></a>13736     }
<a name="l13737"></a>13737 
<a name="l13738"></a>13738 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13739"></a>13739 
<a name="l13740"></a>13740 <span class="keywordtype">void</span> _txStackBackTrace (<span class="keyword">const</span> <span class="keywordtype">char</span> file[] <span class="comment">/*= &quot;?&quot;*/</span>, <span class="keywordtype">int</span> line <span class="comment">/*= 0*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> func[] <span class="comment">/*= &quot;?&quot;*/</span>,
<a name="l13741"></a>13741                         <span class="keywordtype">bool</span> readSource <span class="comment">/*= true*/</span>)
<a name="l13742"></a>13742     {
<a name="l13743"></a>13743 $1  <span class="keywordtype">unsigned</span> attr = <a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>();
<a name="l13744"></a>13744 $   <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (FOREGROUND_LIGHTCYAN);
<a name="l13745"></a>13745 
<a name="l13746"></a>13746 $   fprintf (stderr, <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>
<a name="l13747"></a>13747                           <span class="stringliteral">&quot;Трассировка стека из \&quot;%s\&quot; at %s (%d):\n\n&quot;</span>
<a name="l13748"></a>13748                           <span class="stringliteral">&quot;%s\n\n&quot;</span>
<a name="l13749"></a>13749                           <span class="stringliteral">&quot;--------------------------------------------------\n\n&quot;</span>,
<a name="l13750"></a>13750                           func, file, line, _txCaptureStackBackTrace (1, readSource));
<a name="l13751"></a>13751 
<a name="l13752"></a>13752 $   <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr);
<a name="l13753"></a>13753     }
<a name="l13754"></a>13754 
<a name="l13755"></a>13755 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13756"></a>13756 
<a name="l13757"></a>13757 <span class="keywordtype">char</span>* <a class="code" href="a00080.htm#gafbd4278ff893fc1c1e28b086197adebe" title="Преобразует декорированное имя С++ в название типа.">txDemangle</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* mangledName, std::nomeow_t)
<a name="l13758"></a>13758     {
<a name="l13759"></a>13759 $1  <span class="keywordflow">if</span> (!mangledName) <span class="keywordflow">return</span> NULL;
<a name="l13760"></a>13760 
<a name="l13761"></a>13761 $   <span class="keywordtype">char</span>* typeName = NULL;
<a name="l13762"></a>13762 
<a name="l13763"></a>13763 <span class="preprocessor">    #if defined (_GCC_VER)</span>
<a name="l13764"></a>13764 <span class="preprocessor"></span>
<a name="l13765"></a>13765 $   <span class="keywordtype">int</span> err = 1;
<a name="l13766"></a>13766 $   typeName = ::abi::__cxa_demangle (mangledName, 0, 0, &amp;err); (void) err;
<a name="l13767"></a>13767     <span class="keywordflow">if</span> (typeName) {$ <span class="keywordflow">return</span> typeName; }
<a name="l13768"></a>13768 
<a name="l13769"></a>13769 <span class="preprocessor">    #endif</span>
<a name="l13770"></a>13770 <span class="preprocessor"></span>
<a name="l13771"></a>13771 $   <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> flags = 0;
<a name="l13772"></a>13772 
<a name="l13773"></a>13773 $   <span class="keywordflow">if</span> (mangledName[0] == <span class="charliteral">&#39;.&#39;</span>)
<a name="l13774"></a>13774         {
<a name="l13775"></a>13775 $       mangledName++;
<a name="l13776"></a>13776 $       flags = 0x2800;  <span class="comment">// UNDNAME_32_BIT_DECODE | UNDNAME_TYPE_ONLY</span>
<a name="l13777"></a>13777         }
<a name="l13778"></a>13778 
<a name="l13779"></a>13779 $   typeName = _TX_CALL (Win32::__unDName, (NULL, mangledName, 0, malloc, free, flags));
<a name="l13780"></a>13780     <span class="keywordflow">if</span> (typeName) {$ <span class="keywordflow">return</span> typeName; }
<a name="l13781"></a>13781 
<a name="l13782"></a>13782 $   <span class="keywordflow">return</span> _strdup (mangledName);
<a name="l13783"></a>13783     }
<a name="l13784"></a>13784 
<a name="l13785"></a>13785 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13786"></a>13786 
<a name="l13787"></a>13787 std::string <a class="code" href="a00080.htm#gafbd4278ff893fc1c1e28b086197adebe" title="Преобразует декорированное имя С++ в название типа.">txDemangle</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* mangledName)
<a name="l13788"></a>13788     {
<a name="l13789"></a>13789 $1  <span class="keywordtype">char</span>* typeName = <a class="code" href="a00080.htm#gafbd4278ff893fc1c1e28b086197adebe" title="Преобразует декорированное имя С++ в название типа.">txDemangle</a> (mangledName, std::nomeow);
<a name="l13790"></a>13790 $   std::string name (typeName? typeName : <span class="stringliteral">&quot;&quot;</span>);
<a name="l13791"></a>13791 $   free (typeName);
<a name="l13792"></a>13792 
<a name="l13793"></a>13793 $   <span class="keywordflow">return</span> name;
<a name="l13794"></a>13794     }
<a name="l13795"></a>13795 
<a name="l13796"></a>13796 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13797"></a>13797 
<a name="l13798"></a>13798 <span class="keywordtype">double</span> <a class="code" href="a00081.htm#ga49983bddca35d531c521cf04c6c2449f" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>()
<a name="l13799"></a>13799     {
<a name="l13800"></a>13800 $1  <span class="keywordtype">int</span> maxTime    =  500;
<a name="l13801"></a>13801 $   <span class="keywordtype">int</span> maxSamples =  100;
<a name="l13802"></a>13802 $   POINT size     = {100, 100};
<a name="l13803"></a>13803 
<a name="l13804"></a>13804 $   HDC dc = _txBuffer_Create (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>(), &amp;size, NULL);
<a name="l13805"></a>13805 $   assert (dc); <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> -1;
<a name="l13806"></a>13806 
<a name="l13807"></a>13807 $   DWORD mask = (DWORD) SetThreadAffinityMask (GetCurrentThread(), 1);
<a name="l13808"></a>13808 $   assert (mask);
<a name="l13809"></a>13809 
<a name="l13810"></a>13810 $   LARGE_INTEGER freq = {};
<a name="l13811"></a>13811 $   QueryPerformanceFrequency (&amp;freq) asserted;
<a name="l13812"></a>13812 
<a name="l13813"></a>13813 $   LARGE_INTEGER start = {};
<a name="l13814"></a>13814 $   QueryPerformanceCounter (&amp;start) asserted;
<a name="l13815"></a>13815 
<a name="l13816"></a>13816 $   <span class="keywordtype">int</span> samples = 0;
<a name="l13817"></a>13817 $   while (samples++ &lt; maxSamples)
<a name="l13818"></a>13818         {
<a name="l13819"></a>13819 $       LARGE_INTEGER cur = {};
<a name="l13820"></a>13820 $       QueryPerformanceCounter (&amp;cur) asserted;
<a name="l13821"></a>13821 
<a name="l13822"></a>13822 $       <span class="keywordtype">double</span> t = 1000.0 * (<span class="keywordtype">double</span>) (cur.QuadPart - start.QuadPart) / (<span class="keywordtype">double</span>) freq.QuadPart;
<a name="l13823"></a>13823 $       if (t &gt; maxTime) break;
<a name="l13824"></a>13824 
<a name="l13825"></a>13825         <span class="comment">// Draw test scene</span>
<a name="l13826"></a>13826 
<a name="l13827"></a>13827 $       for (<span class="keywordtype">int</span> y = 0; y &lt; size.y; y++)
<a name="l13828"></a>13828         for (<span class="keywordtype">int</span> x = 0; x &lt; size.x; x++)     <a class="code" href="a00081.htm#gafafd861ab7dc599b2e68b258b6727c85" title="Рисует пиксель (точку на экране).">txSetPixel</a> (x, y, TX_BLACK, dc);
<a name="l13829"></a>13829 
<a name="l13830"></a>13830 $       for (<span class="keywordtype">int</span> y = 0; y &lt; size.y; y += 10)
<a name="l13831"></a>13831         for (<span class="keywordtype">int</span> x = 0; x &lt; size.x; x += 50) <a class="code" href="a00081.htm#ga52e119361961d9eee33c176a3084e55d" title="Рисует текст.">txTextOut</a>  (x, y, &quot;*&quot;, dc);
<a name="l13832"></a>13832 
<a name="l13833"></a>13833 $       <a class="code" href="a00081.htm#gaaf82e7c5a0fd06548f42c757f73d3dae" title="Рисует эллипс.">txEllipse</a> (0, 0, size.x, size.y, dc);
<a name="l13834"></a>13834 $       <a class="code" href="a00081.htm#ga8adde0a20efa7597d8653653817353b2" title="Заливает произвольный контур текущим цветом заполнения.">txFloodFill</a> (size.x/2, size.y/2, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>, FLOODFILLSURFACE, dc);
<a name="l13835"></a>13835 
<a name="l13836"></a>13836 $       <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2,        0, size.x/2, size.y/2, dc,        0,        0) asserted;
<a name="l13837"></a>13837 $       <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2, size.y/2, size.x/2, size.y/2, dc,        0, size.y/2) asserted;
<a name="l13838"></a>13838 $       <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc,        0, size.y/2, size.x/2, size.y/2, dc,        0,        0) asserted;
<a name="l13839"></a>13839 $       <a class="code" href="a00081.htm#ga6dfb121b4a1116f987baeb515713cbbf" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2, size.y/2, size.x/2, size.y/2, dc, size.x/2,        0) asserted;
<a name="l13840"></a>13840         }
<a name="l13841"></a>13841 
<a name="l13842"></a>13842 $   mask = (DWORD) SetThreadAffinityMask (GetCurrentThread(), mask);
<a name="l13843"></a>13843 $   assert (mask);
<a name="l13844"></a>13844 
<a name="l13845"></a>13845 $   _txBuffer_Delete (&amp;dc);
<a name="l13846"></a>13846 
<a name="l13847"></a>13847 $   return 3.0 * samples / sqrt (1.0 * size.x * size.y);
<a name="l13848"></a>13848     }
<a name="l13849"></a>13849 
<a name="l13850"></a>13850 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13851"></a>13851 
<a name="l13852"></a>13852 <span class="preprocessor">#if defined (_TX_CPP11)</span>
<a name="l13853"></a>13853 <span class="preprocessor"></span><span class="keyword">template</span> &lt;<span class="keywordtype">int</span> txFramesToAverage&gt;
<a name="l13854"></a>13854 <span class="preprocessor">#endif</span>
<a name="l13855"></a>13855 <span class="preprocessor"></span>
<a name="l13856"></a>13856 <span class="keywordtype">double</span> <a class="code" href="a00081.htm#ga1aca71127c9986f995b2372903d65964" title="Выдает количество кадров (вызовов этой функции) в секунду.">txGetFPS</a> (<span class="keywordtype">int</span> minFrames)
<a name="l13857"></a>13857     {
<a name="l13858"></a>13858 $1  <span class="keyword">static</span> LARGE_INTEGER time0 = {}; <span class="keywordflow">if</span> (!time0.QuadPart) QueryPerformanceCounter (&amp;time0);
<a name="l13859"></a>13859 $          LARGE_INTEGER time  = {};                      QueryPerformanceCounter (&amp;time);
<a name="l13860"></a>13860 
<a name="l13861"></a>13861 $   <span class="keywordflow">if</span> (time.QuadPart - time0.QuadPart == 0)
<a name="l13862"></a>13862         {$ <span class="keywordflow">return</span> 0; }
<a name="l13863"></a>13863 
<a name="l13864"></a>13864 $   LARGE_INTEGER freq = {}; QueryPerformanceFrequency (&amp;freq);
<a name="l13865"></a>13865 
<a name="l13866"></a>13866 $   <span class="keywordtype">double</span> fps = (double) freq.QuadPart / (<span class="keywordtype">double</span>) (time.QuadPart - time0.QuadPart);
<a name="l13867"></a>13867 $   time0 = time;
<a name="l13868"></a>13868 
<a name="l13869"></a>13869 $   <span class="keywordflow">if</span> (txFramesToAverage == 0) <span class="keywordflow">return</span> fps;
<a name="l13870"></a>13870 
<a name="l13871"></a>13871 $   <span class="keyword">static</span> <span class="keywordtype">double</span> average [txFramesToAverage] = {};
<a name="l13872"></a>13872 $   <span class="keyword">static</span> <span class="keywordtype">unsigned</span> n = 0;
<a name="l13873"></a>13873 
<a name="l13874"></a>13874 $   average [n++ % txFramesToAverage] = fps;
<a name="l13875"></a>13875 
<a name="l13876"></a>13876 $   <span class="keywordtype">unsigned</span> nn = <a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (n, (<span class="keywordtype">unsigned</span>) <a class="code" href="a00080.htm#ga799c47c1a2a151647cd765e1fa4b27b5" title="Вычисление размера массива в элементах">sizearr</a> (average));
<a name="l13877"></a>13877 
<a name="l13878"></a>13878 $   <span class="keyword">static</span> <span class="keywordtype">double</span> median  [txFramesToAverage] = {};
<a name="l13879"></a>13879 $   std::copy (average, average + nn, median);
<a name="l13880"></a>13880 $   std::nth_element (median, median + nn/2, median + nn);
<a name="l13881"></a>13881 
<a name="l13882"></a>13882 $   fps = (median [(nn-1) / 2] + median [nn / 2]) / 2.0;
<a name="l13883"></a>13883 
<a name="l13884"></a>13884 $   <span class="keywordflow">return</span> ((<span class="keywordtype">int</span>)n &gt;= <a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (minFrames, txFramesToAverage))? fps : 0;
<a name="l13885"></a>13885     }
<a name="l13886"></a>13886 
<a name="l13887"></a>13887 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13888"></a>13888 
<a name="l13889"></a>13889 <span class="keywordtype">unsigned</span> <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (COLORREF color, COLORREF component)
<a name="l13890"></a>13890     {
<a name="l13891"></a>13891 $1  <span class="keywordflow">switch</span> (component)
<a name="l13892"></a>13892         {
<a name="l13893"></a>13893         <span class="keywordflow">case</span> <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>:
<a name="l13894"></a>13894         <span class="keywordflow">case</span> <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>:        $ <span class="keywordflow">return</span> (color &gt;&gt;  0) &amp; 0xFF;
<a name="l13895"></a>13895 
<a name="l13896"></a>13896         <span class="keywordflow">case</span> <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>:
<a name="l13897"></a>13897         <span class="keywordflow">case</span> <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>: $ <span class="keywordflow">return</span> (color &gt;&gt;  8) &amp; 0xFF;
<a name="l13898"></a>13898 
<a name="l13899"></a>13899         <span class="keywordflow">case</span> <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет. Плохо виден.">TX_BLUE</a>:
<a name="l13900"></a>13900         <span class="keywordflow">case</span> <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>:  $ <span class="keywordflow">return</span> (color &gt;&gt; 16) &amp; 0xFF;
<a name="l13901"></a>13901 
<a name="l13902"></a>13902         <span class="keywordflow">default</span>:            $ <span class="keywordflow">return</span> CLR_INVALID;
<a name="l13903"></a>13903         }
<a name="l13904"></a>13904     }
<a name="l13905"></a>13905 
<a name="l13906"></a>13906 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13907"></a>13907 
<a name="l13908"></a>13908 COLORREF <a class="code" href="a00081.htm#ga1350174ec2a2c83182437f04c88c2d95" title="Преобразует цвет из формата RGB в формат HSL.">txRGB2HSL</a> (COLORREF rgbColor)
<a name="l13909"></a>13909     {
<a name="l13910"></a>13910 $1  <span class="keywordtype">int</span> r = (int) <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>),
<a name="l13911"></a>13911         g = (int) <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>),
<a name="l13912"></a>13912         b = (int) <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет. Плохо виден.">TX_BLUE</a>);
<a name="l13913"></a>13913 
<a name="l13914"></a>13914 $   <span class="keywordtype">double</span> m1 = <a class="code" href="a00080.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX</a> (<a class="code" href="a00080.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX</a> (r, g), b) / 255.0,
<a name="l13915"></a>13915            m2 = <a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (<a class="code" href="a00080.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (r, g), b) / 255.0,
<a name="l13916"></a>13916            dm = m1 - m2,
<a name="l13917"></a>13917            sm = m1 + m2,
<a name="l13918"></a>13918 
<a name="l13919"></a>13919            ir = r / 255.0,
<a name="l13920"></a>13920            ig = g / 255.0,
<a name="l13921"></a>13921            ib = b / 255.0,
<a name="l13922"></a>13922 
<a name="l13923"></a>13923            ih = 0,
<a name="l13924"></a>13924            is = 0,
<a name="l13925"></a>13925            il = sm / 2;
<a name="l13926"></a>13926 
<a name="l13927"></a>13927 $   <span class="keyword">const</span> <span class="keywordtype">double</span> prec = 0.001;
<a name="l13928"></a>13928 
<a name="l13929"></a>13929 $   <span class="keywordflow">if</span> (fabs (dm) &lt; prec)
<a name="l13930"></a>13930         {
<a name="l13931"></a>13931 $       is = dm / ((sm &lt;= 1)? sm : (2-sm));
<a name="l13932"></a>13932 
<a name="l13933"></a>13933 $       <span class="keywordtype">double</span> cr = (m1 - ir) / dm,
<a name="l13934"></a>13934                cg = (m1 - ig) / dm,
<a name="l13935"></a>13935                cb = (m1 - ib) / dm;
<a name="l13936"></a>13936 
<a name="l13937"></a>13937 $       <span class="keywordflow">if</span> (fabs (ir - m1) &lt; prec) ih =     cb - cg;
<a name="l13938"></a>13938 $       <span class="keywordflow">if</span> (fabs (ig - m1) &lt; prec) ih = 2 + cr - cb;
<a name="l13939"></a>13939 $       <span class="keywordflow">if</span> (fabs (ib - m1) &lt; prec) ih = 4 + cg - cr;
<a name="l13940"></a>13940         }
<a name="l13941"></a>13941 
<a name="l13942"></a>13942 $   ih = (ih &gt;= 0)? ih*60 : ih*60 + 360;
<a name="l13943"></a>13943 
<a name="l13944"></a>13944 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ih / 360 * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (is * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (il * 255));
<a name="l13945"></a>13945     }
<a name="l13946"></a>13946 
<a name="l13947"></a>13947 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13948"></a>13948 
<a name="l13949"></a>13949 COLORREF <a class="code" href="a00081.htm#ga6d5e95c1f234d32b8859826859127244" title="Преобразует цвет из формата HSL в формат RGB.">txHSL2RGB</a> (COLORREF hslColor)
<a name="l13950"></a>13950     {
<a name="l13951"></a>13951 $1  <span class="keyword">struct </span>xRGB
<a name="l13952"></a>13952         {
<a name="l13953"></a>13953         <span class="keyword">static</span> <span class="keywordtype">double</span> calc (<span class="keywordtype">double</span> h, <span class="keywordtype">double</span> m1, <span class="keywordtype">double</span> m2)
<a name="l13954"></a>13954             {
<a name="l13955"></a>13955 $           <span class="keywordflow">if</span> (h &lt; 0)   h += 360;
<a name="l13956"></a>13956 $           <span class="keywordflow">if</span> (h &gt; 360) h -= 360;
<a name="l13957"></a>13957 
<a name="l13958"></a>13958 $           <span class="keywordflow">return</span> (h &lt;  60)? m1 + (m2-m1) *      h  / 60 :
<a name="l13959"></a>13959                    (h &lt; 180)? m2 :
<a name="l13960"></a>13960                    (h &lt; 240)? m1 + (m2-m1) * (240-h) / 60 :
<a name="l13961"></a>13961                               m1;
<a name="l13962"></a>13962             }
<a name="l13963"></a>13963         };
<a name="l13964"></a>13964 
<a name="l13965"></a>13965 $   <span class="keywordtype">int</span> h = (int) <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>),
<a name="l13966"></a>13966         s = (int) <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>),
<a name="l13967"></a>13967         l = (int) <a class="code" href="a00081.htm#gac2b196b6826392229fa209e01817f941" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00081.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>);
<a name="l13968"></a>13968 
<a name="l13969"></a>13969 $   <span class="keywordtype">double</span> ih = h / 255.0 * 360.0,
<a name="l13970"></a>13970            il = l / 100.0,
<a name="l13971"></a>13971            is = s / 100.0,
<a name="l13972"></a>13972 
<a name="l13973"></a>13973            m2 = (il &lt;= 0.5)? il * (1 + is) : il + is - il * is,
<a name="l13974"></a>13974            m1 = 2 * il - m2,
<a name="l13975"></a>13975 
<a name="l13976"></a>13976            ir = s? xRGB::calc (ih + 120, m1, m2) : il,
<a name="l13977"></a>13977            ig = s? xRGB::calc (ih,       m1, m2) : il,
<a name="l13978"></a>13978            ib = s? xRGB::calc (ih - 120, m1, m2) : il;
<a name="l13979"></a>13979 
<a name="l13980"></a>13980 $   <span class="keywordflow">return</span> <a class="code" href="a00081.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ir * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ig * 255), <a class="code" href="a00080.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ib * 255));
<a name="l13981"></a>13981     }
<a name="l13982"></a>13982 
<a name="l13983"></a>13983 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13984"></a>13984 
<a name="l13985"></a>13985 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (std::nomeow_t, <span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right)
<a name="l13986"></a>13986     {
<a name="l13987"></a>13987     <span class="keywordflow">return</span> left + (right - left) * ((<span class="keywordtype">double</span>) rand() / RAND_MAX);
<a name="l13988"></a>13988     }
<a name="l13989"></a>13989 
<a name="l13990"></a>13990 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13991"></a>13991 
<a name="l13992"></a>13992 template &lt;typename Tx, typename Ta, typename Tb&gt;
<a name="l13993"></a>13993 inline <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow_t, Tx x, Ta a, Tb b)
<a name="l13994"></a>13994     {
<a name="l13995"></a>13995     <span class="keywordflow">return</span> a &lt;= x &amp;&amp; x &lt;= b;
<a name="l13996"></a>13996     }
<a name="l13997"></a>13997 
<a name="l13998"></a>13998 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l13999"></a>13999 
<a name="l14000"></a>14000 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (<span class="keywordtype">int</span> range)
<a name="l14001"></a>14001     {
<a name="l14002"></a>14002     <span class="keywordflow">if</span> (rand() % 100 == 0) fprintf (stderr, <span class="stringliteral">&quot;%.4s &quot;</span>, (<span class="keyword">const</span> <span class="keyword">volatile</span> <span class="keywordtype">char</span>*) ((rand() &amp; 0x0F)? &amp;_txCanaryFirst : &amp;_txCanaryLast));
<a name="l14003"></a>14003 
<a name="l14004"></a>14004     <span class="keywordflow">return</span> rand() % range;
<a name="l14005"></a>14005     }
<a name="l14006"></a>14006 
<a name="l14007"></a>14007 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14008"></a>14008 
<a name="l14009"></a>14009 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (<span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right)
<a name="l14010"></a>14010     {
<a name="l14011"></a>14011     <span class="keywordflow">if</span> (rand() % 100 == 0) fprintf (stderr, <span class="stringliteral">&quot;%.4s &quot;</span>, (<span class="keyword">const</span> <span class="keyword">volatile</span> <span class="keywordtype">char</span>*) ((rand() &amp; 0x0F)? &amp;_txCanaryFirst : &amp;_txCanaryLast));
<a name="l14012"></a>14012 
<a name="l14013"></a>14013     <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gaa81c1c7c499d76619d5d9d3369560881" title="Генератор случайных чисел">random</a> (std::nomeow, left, right);
<a name="l14014"></a>14014     }
<a name="l14015"></a>14015 
<a name="l14016"></a>14016 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14017"></a>14017 
<a name="l14018"></a>14018 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tx, <span class="keyword">typename</span> Ta, <span class="keyword">typename</span> Tb&gt;
<a name="l14019"></a>14019 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (Tx x, Ta a, Tb b)
<a name="l14020"></a>14020     {
<a name="l14021"></a>14021     <span class="keywordflow">if</span> (rand() % 100 == 0) fprintf (stderr, <span class="stringliteral">&quot;%.4s &quot;</span>, (<span class="keyword">const</span> <span class="keyword">volatile</span> <span class="keywordtype">char</span>*) ((rand() &amp; 0x0F)? &amp;_txCanaryFirst : &amp;_txCanaryLast));
<a name="l14022"></a>14022 
<a name="l14023"></a>14023     <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, x, a, b);
<a name="l14024"></a>14024     }
<a name="l14025"></a>14025 
<a name="l14026"></a>14026 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14027"></a>14027 
<a name="l14028"></a>14028 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> POINT&amp; pt, <span class="keyword">const</span> RECT&amp; rect)
<a name="l14029"></a>14029     {
<a name="l14030"></a>14030     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;pt))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l14031"></a>14031     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;rect)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l14032"></a>14032 
<a name="l14033"></a>14033     <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, pt.x, rect.left, rect.right) &amp;&amp;
<a name="l14034"></a>14034            <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, pt.y, rect.top,  rect.bottom);
<a name="l14035"></a>14035     }
<a name="l14036"></a>14036 
<a name="l14037"></a>14037 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14038"></a>14038 
<a name="l14039"></a>14039 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> COORD&amp; pt, <span class="keyword">const</span> SMALL_RECT&amp; rect)
<a name="l14040"></a>14040     {
<a name="l14041"></a>14041     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;pt))   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l14042"></a>14042     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;rect)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l14043"></a>14043 
<a name="l14044"></a>14044     <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, pt.X, rect.Left, rect.Right) &amp;&amp;
<a name="l14045"></a>14045            <a class="code" href="a00080.htm#gab7d5f6591f73008dd7c4034ed94d7528" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (std::nomeow, pt.Y, rect.Top,  rect.Bottom);
<a name="l14046"></a>14046     }
<a name="l14047"></a>14047 
<a name="l14048"></a>14048 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14049"></a>14049 
<a name="l14050"></a>14050 <span class="keywordtype">void</span> <a class="code" href="a00080.htm#ga5de732de72c46b992ac2feeac2de7e42" title="Переинициализирует математический сопроцессор">tx_fpreset</a>()
<a name="l14051"></a>14051     {
<a name="l14052"></a>14052 $1  <a class="code" href="a00016.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l14053"></a>14053 
<a name="l14054"></a>14054 $   Win32::_fpreset();
<a name="l14055"></a>14055 
<a name="l14056"></a>14056 $   <span class="keywordtype">unsigned</span> new87 = 0x0008001C;  <span class="comment">// _EM_INVALID | _EM_DENORMAL | _EM_ZERODIVIDE | _EM_OVERFLOW | _EM_UNDERFLOW</span>
<a name="l14057"></a>14057 
<a name="l14058"></a>14058 <span class="preprocessor">    #if !defined (__CYGWIN__)</span>
<a name="l14059"></a>14059 <span class="preprocessor"></span>
<a name="l14060"></a>14060 $   <span class="keywordtype">unsigned</span> old87 = 0;
<a name="l14061"></a>14061 $   <span class="keywordflow">if</span> (_controlfp_s (&amp;old87, 0, 0) == 0)
<a name="l14062"></a>14062         {$ (void) _controlfp_s (&amp;old87, old87  &amp; ~new87, 0x0008001F); }  <span class="comment">// _MCW_EM</span>
<a name="l14063"></a>14063 
<a name="l14064"></a>14064 <span class="preprocessor">    #else</span>
<a name="l14065"></a>14065 <span class="preprocessor"></span>
<a name="l14066"></a>14066 $   Win32::_controlfp (Win32::_controlfp (0, 0) &amp; ~new87, 0x0008001F);    <span class="comment">// _MCW_EM</span>
<a name="l14067"></a>14067 
<a name="l14068"></a>14068 <span class="preprocessor">    #endif</span>
<a name="l14069"></a>14069 <span class="preprocessor"></span>    }
<a name="l14070"></a>14070 
<a name="l14071"></a>14071 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14072"></a>14072 
<a name="l14073"></a>14073 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l14074"></a>14074 <span class="keyword">inline</span> T zero() { T __zero = {}; <span class="keywordflow">return</span> __zero; }
<a name="l14075"></a>14075 
<a name="l14076"></a>14076 <span class="comment">//}</span>
<a name="l14077"></a>14077 <span class="comment">//=================================================================================================================</span>
<a name="l14078"></a>14078 
<a name="l14079"></a>14079 <span class="comment">//=================================================================================================================</span>
<a name="l14080"></a>14080 <span class="comment">//{          txPrintf() implementation</span>
<a name="l14081"></a>14081 <span class="comment">//           Реализация txPrintf()</span>
<a name="l14082"></a>14082 <span class="comment">//=================================================================================================================</span>
<a name="l14083"></a>14083 
<a name="l14084"></a>14084 <span class="preprocessor">#if defined (_TX_CPP11)</span>
<a name="l14085"></a>14085 <span class="preprocessor"></span>
<a name="l14086"></a>14086 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt; <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt,                                  <span class="keyword">const</span> T&amp; arg, ArgsT... args);
<a name="l14087"></a>14087 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt; <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, width_t width,                   <span class="keyword">const</span> T&amp; arg, ArgsT... args);
<a name="l14088"></a>14088 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt; <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt,                precision_t prec, <span class="keyword">const</span> T&amp; arg, ArgsT... args);
<a name="l14089"></a>14089 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt; <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, width_t width, precision_t prec, <span class="keyword">const</span> T&amp; arg, ArgsT... args);
<a name="l14090"></a>14090                                          <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt);
<a name="l14091"></a>14091 
<a name="l14092"></a>14092 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;                    <span class="keywordtype">void</span> _txPrintV (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, <span class="keyword">const</span> T&amp; arg);
<a name="l14093"></a>14093                                          <span class="keywordtype">void</span> _txPrintV (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, <span class="keywordtype">int</span>*     arg);
<a name="l14094"></a>14094                                          <span class="keywordtype">void</span> _txPrintV (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt);
<a name="l14095"></a>14095 
<a name="l14096"></a>14096 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14097"></a>14097 
<a name="l14098"></a>14098 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt;
<a name="l14099"></a>14099 <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, <span class="keyword">const</span> T&amp; arg, ArgsT... args)
<a name="l14100"></a>14100     {
<a name="l14101"></a>14101 $1  assert (fmt);
<a name="l14102"></a>14102 
<a name="l14103"></a>14103 $   _txPrintV (stream, format, n,   fmt);
<a name="l14104"></a>14104 
<a name="l14105"></a>14105     <span class="keywordflow">if</span> (fmt[0] == <span class="charliteral">&#39;%&#39;</span>) {$}
<a name="l14106"></a>14106     <span class="keywordflow">else</span> {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\&quot;%%$\&quot; required to print an argument in ...\&quot;%s\&quot; while printing %s argument %d in \&quot;%s\&quot;&quot;</span>, fmt, txTypename (arg), n, format); }
<a name="l14107"></a>14107 
<a name="l14108"></a>14108 $   _txPrintV (stream, format, n,   fmt, arg);
<a name="l14109"></a>14109 
<a name="l14110"></a>14110 $   _txPrintF (stream, format, n+1, fmt, args...);
<a name="l14111"></a>14111     }
<a name="l14112"></a>14112 
<a name="l14113"></a>14113 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14114"></a>14114 
<a name="l14115"></a>14115 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt;
<a name="l14116"></a>14116 <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, width_t width, <span class="keyword">const</span> T&amp; arg, ArgsT... args)
<a name="l14117"></a>14117     {
<a name="l14118"></a>14118 $1  assert (&amp;stream);
<a name="l14119"></a>14119 $   assert (fmt);
<a name="l14120"></a>14120 
<a name="l14121"></a>14121 $   _txPrintV (stream, format, n,   fmt);
<a name="l14122"></a>14122 
<a name="l14123"></a>14123     <span class="keywordflow">if</span> (fmt[0] == <span class="charliteral">&#39;%&#39;</span> &amp;&amp; fmt[1] == <span class="charliteral">&#39;*&#39;</span>) {$ stream &lt;&lt; std::setw (width); }
<a name="l14124"></a>14124     <span class="keywordflow">else</span> {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\&quot;%%*\&quot; required to setwidth (%d) in ...\&quot;%s\&quot; while printing %s argument %d in \&quot;%s\&quot;&quot;</span>, width, fmt, txTypename (arg), n, format); }
<a name="l14125"></a>14125 
<a name="l14126"></a>14126 $   _txPrintV (stream, format, n,   fmt, arg);
<a name="l14127"></a>14127 
<a name="l14128"></a>14128 $   _txPrintF (stream, format, n+1, fmt, args...);
<a name="l14129"></a>14129     }
<a name="l14130"></a>14130 
<a name="l14131"></a>14131 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14132"></a>14132 
<a name="l14133"></a>14133 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt;
<a name="l14134"></a>14134 <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, precision_t prec, <span class="keyword">const</span> T&amp; arg, ArgsT... args)
<a name="l14135"></a>14135     {
<a name="l14136"></a>14136 $1  assert (&amp;stream);
<a name="l14137"></a>14137 $   assert (fmt);
<a name="l14138"></a>14138 
<a name="l14139"></a>14139 $   _txPrintV (stream, format, n,   fmt);
<a name="l14140"></a>14140 
<a name="l14141"></a>14141     <span class="keywordflow">if</span> (fmt[0] == <span class="charliteral">&#39;%&#39;</span> &amp;&amp; fmt[1] == <span class="charliteral">&#39;.&#39;</span> &amp;&amp; fmt[2] == <span class="charliteral">&#39;*&#39;</span>) {$ stream &lt;&lt; std::setprecision (prec+1); }
<a name="l14142"></a>14142     <span class="keywordflow">else</span> {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\&quot;%%.*\&quot; required to setprecision (%d) in ...\&quot;%s\&quot; while printing %s argument %d in \&quot;%s\&quot;&quot;</span>, prec, fmt, txTypename (arg), n, format); }
<a name="l14143"></a>14143 
<a name="l14144"></a>14144 $   _txPrintV (stream, format, n,   fmt, arg);
<a name="l14145"></a>14145 
<a name="l14146"></a>14146 $   _txPrintF (stream, format, n+1, fmt, args...);
<a name="l14147"></a>14147     }
<a name="l14148"></a>14148 
<a name="l14149"></a>14149 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14150"></a>14150 
<a name="l14151"></a>14151 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ArgsT&gt;
<a name="l14152"></a>14152 <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, width_t width, precision_t prec, <span class="keyword">const</span> T&amp; arg, ArgsT... args)
<a name="l14153"></a>14153     {
<a name="l14154"></a>14154 $1  assert (&amp;stream);
<a name="l14155"></a>14155 $   assert (fmt);
<a name="l14156"></a>14156 
<a name="l14157"></a>14157 $   _txPrintV (stream, format, n,   fmt);
<a name="l14158"></a>14158 
<a name="l14159"></a>14159     <span class="keywordflow">if</span> (fmt[0] == <span class="charliteral">&#39;%&#39;</span> &amp;&amp; fmt[1] == <span class="charliteral">&#39;*&#39;</span> &amp;&amp; fmt[2] == <span class="charliteral">&#39;.&#39;</span> &amp;&amp; fmt[3] == <span class="charliteral">&#39;*&#39;</span>) {$ stream &lt;&lt; std::setw (width) &lt;&lt; std::setprecision (prec+1); }
<a name="l14160"></a>14160     <span class="keywordflow">else</span> {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\&quot;%%*.*\&quot; required to setwidth (%d) and setprecision (%d) in ...\&quot;%s\&quot; while printing %s argument %d in \&quot;%s\&quot;&quot;</span>, width, prec, fmt, txTypename (arg), n, format); }
<a name="l14161"></a>14161 
<a name="l14162"></a>14162 $   _txPrintV (stream, format, n,   fmt, arg);
<a name="l14163"></a>14163 
<a name="l14164"></a>14164 $   _txPrintF (stream, format, n+1, fmt, args...);
<a name="l14165"></a>14165     }
<a name="l14166"></a>14166 
<a name="l14167"></a>14167 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14168"></a>14168 
<a name="l14169"></a>14169 <span class="keywordtype">void</span> _txPrintF (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt)
<a name="l14170"></a>14170     {
<a name="l14171"></a>14171 $1  assert (fmt);
<a name="l14172"></a>14172 
<a name="l14173"></a>14173 $   _txPrintV (stream, format, n,   fmt);
<a name="l14174"></a>14174 
<a name="l14175"></a>14175     <span class="keywordflow">if</span> (!fmt[0]) {$}
<a name="l14176"></a>14176     <span class="keywordflow">else</span> {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;No argument provided for %% in \&quot;%s\&quot; while printing \&quot;%s\&quot;&quot;</span>, fmt, format); }
<a name="l14177"></a>14177     }
<a name="l14178"></a>14178 
<a name="l14179"></a>14179 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14180"></a>14180 
<a name="l14181"></a>14181 <span class="keywordtype">void</span> _txPrintV (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>*, <span class="keywordtype">int</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt)
<a name="l14182"></a>14182     {
<a name="l14183"></a>14183 $1  assert (&amp;stream);
<a name="l14184"></a>14184 $   assert (fmt);
<a name="l14185"></a>14185 
<a name="l14186"></a>14186 $   <span class="keywordflow">while</span> (*fmt)
<a name="l14187"></a>14187         {
<a name="l14188"></a>14188         <span class="keywordflow">if</span> (fmt[0] == <span class="charliteral">&#39;%&#39;</span>)
<a name="l14189"></a>14189             {
<a name="l14190"></a>14190             <span class="keywordflow">if</span> (fmt[1] == <span class="charliteral">&#39;%&#39;</span>) fmt++;
<a name="l14191"></a>14191             <span class="keywordflow">else</span> <span class="keywordflow">break</span>;
<a name="l14192"></a>14192             }
<a name="l14193"></a>14193 
<a name="l14194"></a>14194         stream &lt;&lt; *fmt++;
<a name="l14195"></a>14195         }
<a name="l14196"></a>14196 $   }
<a name="l14197"></a>14197 
<a name="l14198"></a>14198 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14199"></a>14199 
<a name="l14200"></a>14200 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l14201"></a>14201 <span class="keywordtype">void</span> _txPrintV (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, <span class="keyword">const</span> T&amp; arg)
<a name="l14202"></a>14202     {
<a name="l14203"></a>14203 $1  assert (&amp;stream);
<a name="l14204"></a>14204 $   assert (fmt);
<a name="l14205"></a>14205 
<a name="l14206"></a>14206 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;arg)) <span class="keywordflow">return</span>;
<a name="l14207"></a>14207 
<a name="l14208"></a>14208     <span class="keywordflow">if</span> (fmt[0] == <span class="charliteral">&#39;%&#39;</span>) {$}
<a name="l14209"></a>14209     <span class="keywordflow">else</span> {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\&quot;%%$\&quot; required to print an argument in ...\&quot;%s\&quot; while printing %s argument %d in \&quot;%s\&quot;&quot;</span>, fmt, txTypename (arg), n, format); }
<a name="l14210"></a>14210 
<a name="l14211"></a>14211 $   fmt++;
<a name="l14212"></a>14212 
<a name="l14213"></a>14213 $   <span class="keywordtype">char</span>                    oldFill  = stream.fill (<span class="charliteral">&#39; &#39;</span>);
<a name="l14214"></a>14214 $   std::ios_base::fmtflags oldFlags = stream.flags();
<a name="l14215"></a>14215 
<a name="l14216"></a>14216 $   <span class="keywordflow">for</span> (;;) <span class="keywordflow">switch</span> (*fmt)
<a name="l14217"></a>14217         {
<a name="l14218"></a>14218         <span class="keywordflow">case</span> <span class="charliteral">&#39;-&#39;</span>: $ stream &lt;&lt; std::left;     fmt++; <span class="keywordflow">break</span>;
<a name="l14219"></a>14219         <span class="keywordflow">case</span> <span class="charliteral">&#39;+&#39;</span>: $ stream &lt;&lt; std::showpos;  fmt++; <span class="keywordflow">break</span>;
<a name="l14220"></a>14220         <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>: $ stream.fill (<span class="charliteral">&#39; &#39;</span>);       fmt++; <span class="keywordflow">break</span>;
<a name="l14221"></a>14221         <span class="keywordflow">case</span> <span class="charliteral">&#39;#&#39;</span>: $ stream &lt;&lt; std::showbase; fmt++; <span class="keywordflow">break</span>;
<a name="l14222"></a>14222         <span class="keywordflow">case</span> <span class="charliteral">&#39;0&#39;</span>: $ stream.fill (<span class="charliteral">&#39;0&#39;</span>);       fmt++; <span class="keywordflow">break</span>;
<a name="l14223"></a>14223 
<a name="l14224"></a>14224         <span class="keywordflow">default</span>:  $ <span class="keywordflow">goto</span> end;
<a name="l14225"></a>14225         }
<a name="l14226"></a>14226     end:
<a name="l14227"></a>14227 
<a name="l14228"></a>14228 $   <span class="keywordtype">int</span> width = (*fmt != <span class="charliteral">&#39;*&#39;</span>)?                  (<span class="keywordtype">int</span>) strtoul (fmt, const_cast &lt;char**&gt; (&amp;fmt), 10) : (fmt++, 0);
<a name="l14229"></a>14229 $   <span class="keywordtype">int</span> prec  = (*fmt == <span class="charliteral">&#39;.&#39;</span>)? (*++fmt != <span class="charliteral">&#39;*&#39;</span>)? (int) strtoul (fmt, const_cast &lt;char**&gt; (&amp;fmt), 10) : (fmt++, 0) : 0;
<a name="l14230"></a>14230 
<a name="l14231"></a>14231     <span class="keywordflow">if</span> (width) {$ stream &lt;&lt; std::setw (width);        }
<a name="l14232"></a>14232     <span class="keywordflow">if</span> (prec)  {$ stream &lt;&lt; std::setprecision (prec); }
<a name="l14233"></a>14233 
<a name="l14234"></a>14234 $   fmt += strspn (fmt, <span class="stringliteral">&quot;hljztL&quot;</span>);
<a name="l14235"></a>14235 
<a name="l14236"></a>14236 $   <span class="keywordflow">switch</span> (*fmt)
<a name="l14237"></a>14237         {
<a name="l14238"></a>14238         <span class="keywordflow">case</span> <span class="charliteral">&#39;$&#39;</span>:
<a name="l14239"></a>14239         <span class="keywordflow">case</span> <span class="charliteral">&#39;?&#39;</span>: $                                              <span class="keywordflow">break</span>;
<a name="l14240"></a>14240 
<a name="l14241"></a>14241         <span class="keywordflow">case</span> <span class="charliteral">&#39;d&#39;</span>:
<a name="l14242"></a>14242         <span class="keywordflow">case</span> <span class="charliteral">&#39;i&#39;</span>:
<a name="l14243"></a>14243         <span class="keywordflow">case</span> <span class="charliteral">&#39;u&#39;</span>: $ stream &lt;&lt; std::dec;                          <span class="keywordflow">break</span>;
<a name="l14244"></a>14244 
<a name="l14245"></a>14245         <span class="keywordflow">case</span> <span class="charliteral">&#39;o&#39;</span>: $ stream &lt;&lt; std::oct;                          <span class="keywordflow">break</span>;
<a name="l14246"></a>14246 
<a name="l14247"></a>14247         <span class="keywordflow">case</span> <span class="charliteral">&#39;x&#39;</span>: $ stream &lt;&lt; std::hex;                          <span class="keywordflow">break</span>;
<a name="l14248"></a>14248         <span class="keywordflow">case</span> <span class="charliteral">&#39;X&#39;</span>: $ stream &lt;&lt; std::hex        &lt;&lt; std::uppercase; <span class="keywordflow">break</span>;
<a name="l14249"></a>14249 
<a name="l14250"></a>14250         <span class="keywordflow">case</span> <span class="charliteral">&#39;f&#39;</span>: $ stream &lt;&lt; std::fixed;                        <span class="keywordflow">break</span>;
<a name="l14251"></a>14251         <span class="keywordflow">case</span> <span class="charliteral">&#39;F&#39;</span>: $ stream &lt;&lt; std::fixed      &lt;&lt; std::uppercase; <span class="keywordflow">break</span>;
<a name="l14252"></a>14252 
<a name="l14253"></a>14253         <span class="keywordflow">case</span> <span class="charliteral">&#39;e&#39;</span>: $ stream &lt;&lt; std::scientific;                   <span class="keywordflow">break</span>;
<a name="l14254"></a>14254         <span class="keywordflow">case</span> <span class="charliteral">&#39;E&#39;</span>: $ stream &lt;&lt; std::scientific &lt;&lt; std::uppercase; <span class="keywordflow">break</span>;
<a name="l14255"></a>14255 
<a name="l14256"></a>14256         <span class="keywordflow">case</span> <span class="charliteral">&#39;g&#39;</span>: $                                              <span class="keywordflow">break</span>;
<a name="l14257"></a>14257         <span class="keywordflow">case</span> <span class="charliteral">&#39;G&#39;</span>: $ stream                    &lt;&lt; std::uppercase; <span class="keywordflow">break</span>;
<a name="l14258"></a>14258 
<a name="l14259"></a>14259         <span class="keywordflow">case</span> <span class="charliteral">&#39;a&#39;</span>: $                                              <span class="keywordflow">break</span>;
<a name="l14260"></a>14260         <span class="keywordflow">case</span> <span class="charliteral">&#39;A&#39;</span>: $ stream                    &lt;&lt; std::uppercase; <span class="keywordflow">break</span>;
<a name="l14261"></a>14261 
<a name="l14262"></a>14262         <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
<a name="l14263"></a>14263         <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:
<a name="l14264"></a>14264         <span class="keywordflow">case</span> <span class="charliteral">&#39;p&#39;</span>: $                                              <span class="keywordflow">break</span>;
<a name="l14265"></a>14265 
<a name="l14266"></a>14266         <span class="keywordflow">default</span>:  $ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Invalid format &#39;%.1s&#39; at \&quot;%s\&quot; while printing %s argument %d in \&quot;%s\&quot;&quot;</span>, fmt, fmt, txTypename (arg), n, format); <span class="keywordflow">break</span>;
<a name="l14267"></a>14267         }
<a name="l14268"></a>14268 
<a name="l14269"></a>14269 $   fmt++;
<a name="l14270"></a>14270 
<a name="l14271"></a>14271     <span class="keywordflow">if</span> (&amp;arg) {$ stream &lt;&lt; arg;      }
<a name="l14272"></a>14272     <span class="keywordflow">else</span>      {$ stream &lt;&lt; <span class="stringliteral">&quot;(null)&quot;</span>; }
<a name="l14273"></a>14273 
<a name="l14274"></a>14274 $   stream.fill  (oldFill);
<a name="l14275"></a>14275 $   stream.flags (oldFlags);
<a name="l14276"></a>14276     }
<a name="l14277"></a>14277 
<a name="l14278"></a>14278 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14279"></a>14279 
<a name="l14280"></a>14280 <span class="keywordtype">void</span> _txPrintV (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; fmt, <span class="keywordtype">int</span>* arg)
<a name="l14281"></a>14281     {
<a name="l14282"></a>14282 $1  assert (fmt);
<a name="l14283"></a>14283 
<a name="l14284"></a>14284     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (arg)) <span class="keywordflow">return</span>;
<a name="l14285"></a>14285 
<a name="l14286"></a>14286     <span class="keywordflow">if</span> (fmt[0] == <span class="charliteral">&#39;%&#39;</span> &amp;&amp; fmt[1] == <span class="charliteral">&#39;n&#39;</span>) {$}
<a name="l14287"></a>14287     <span class="keywordflow">else</span> {$ <a class="code" href="a00080.htm#ga2e7d012000ed9e784d32859d10c103f6" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\&quot;%%n\&quot; required to store print length in int* argument %d in \&quot;%s\&quot;&quot;</span>, n, format); }
<a name="l14288"></a>14288 
<a name="l14289"></a>14289 $   *arg = (int) stream.str().length();
<a name="l14290"></a>14290 
<a name="l14291"></a>14291 $   fmt += 2;
<a name="l14292"></a>14292     }
<a name="l14293"></a>14293 
<a name="l14294"></a>14294 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14295"></a>14295 
<a name="l14296"></a>14296 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> T&amp;    _txPrintfNormalizeArg (<span class="keyword">const</span> T&amp;           arg) { <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;arg)) {;}          <span class="keywordflow">return</span> arg;         }
<a name="l14297"></a>14297                       <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* _txPrintfNormalizeArg (<span class="keyword">const</span> std::string&amp; arg) { <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;arg)) <span class="keywordflow">return</span> NULL; <span class="keywordflow">return</span> arg.c_str(); }
<a name="l14298"></a>14298 
<a name="l14299"></a>14299 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14300"></a>14300 
<a name="l14301"></a>14301 <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... ArgsT&gt;
<a name="l14302"></a>14302 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (std::ostringstream&amp; stream, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args)
<a name="l14303"></a>14303     {
<a name="l14304"></a>14304 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;stream)) <span class="keywordflow">return</span> 0;
<a name="l14305"></a>14305 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;format)) <span class="keywordflow">return</span> 0;
<a name="l14306"></a>14306 
<a name="l14307"></a>14307 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* fmt = format;
<a name="l14308"></a>14308 $   _txPrintF (stream, format, 2, fmt, _txPrintfNormalizeArg (args)...);
<a name="l14309"></a>14309 
<a name="l14310"></a>14310 $   <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) stream.str().length();
<a name="l14311"></a>14311     }
<a name="l14312"></a>14312 
<a name="l14313"></a>14313 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14314"></a>14314 
<a name="l14315"></a>14315 <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... ArgsT&gt;
<a name="l14316"></a>14316 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (<span class="keywordtype">char</span> buffer[], <span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args)
<a name="l14317"></a>14317     {
<a name="l14318"></a>14318 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;buffer)) <span class="keywordflow">return</span> 0;
<a name="l14319"></a>14319 $   <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;format)) <span class="keywordflow">return</span> 0;
<a name="l14320"></a>14320 
<a name="l14321"></a>14321 $   <span class="keywordflow">if</span> (size &gt; 0) size--;
<a name="l14322"></a>14322 $   buffer[size] = 0;
<a name="l14323"></a>14323 
<a name="l14324"></a>14324 $   <span class="keywordflow">if</span> (!size) <span class="keywordflow">return</span> 0;
<a name="l14325"></a>14325 
<a name="l14326"></a>14326 $   std::ostringstream stream;
<a name="l14327"></a>14327 $   stream.rdbuf() -&gt; pubsetbuf (buffer, size);
<a name="l14328"></a>14328 
<a name="l14329"></a>14329 $   <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (stream, format, args...);
<a name="l14330"></a>14330 
<a name="l14331"></a>14331 $   <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) stream.str().length();
<a name="l14332"></a>14332     }
<a name="l14333"></a>14333 
<a name="l14334"></a>14334 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14335"></a>14335 
<a name="l14336"></a>14336 <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... ArgsT&gt;
<a name="l14337"></a>14337 <span class="keyword">inline</span> std::string <a class="code" href="a00080.htm#ga06beb201bdba586f44f029ffc5083bcf" title="Форматирует строку, как sprintf().">txFormat</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args)
<a name="l14338"></a>14338     {
<a name="l14339"></a>14339 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;format)) <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;
<a name="l14340"></a>14340 
<a name="l14341"></a>14341 $   std::ostringstream stream;
<a name="l14342"></a>14342 
<a name="l14343"></a>14343 $   <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (stream, format, args...);
<a name="l14344"></a>14344 
<a name="l14345"></a>14345 $   <span class="keywordflow">return</span> stream.str();
<a name="l14346"></a>14346     }
<a name="l14347"></a>14347 
<a name="l14348"></a>14348 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14349"></a>14349 
<a name="l14350"></a>14350 <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... ArgsT&gt;
<a name="l14351"></a>14351 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00080.htm#ga9b529d93a8ebfa5ec2d02fa80819331a" title="Добрый дядюшка Принтф. Теперь шаболонный.">txPrintf</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* format, ArgsT... args)
<a name="l14352"></a>14352     {
<a name="l14353"></a>14353 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;format)) <span class="keywordflow">return</span> 0;
<a name="l14354"></a>14354 
<a name="l14355"></a>14355 $   <span class="keywordflow">return</span> printf (<span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="a00080.htm#ga06beb201bdba586f44f029ffc5083bcf" title="Форматирует строку, как sprintf().">txFormat</a> (format, args...) .c_str());
<a name="l14356"></a>14356     }
<a name="l14357"></a>14357 
<a name="l14358"></a>14358 <span class="preprocessor">#endif</span>
<a name="l14359"></a>14359 <span class="preprocessor"></span>
<a name="l14360"></a>14360 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14361"></a>14361 
<a name="l14362"></a>14362        <span class="keywordtype">int</span> _txPrintfCheck (<span class="keyword">const</span> <span class="keywordtype">char</span>* format, ...) tx_printfy (1);
<a name="l14363"></a>14363 inline <span class="keywordtype">int</span> _txPrintfCheck (const <span class="keywordtype">char</span>*,        ...) { <span class="keywordflow">return</span> 0; }
<a name="l14364"></a>14364 
<a name="l14365"></a>14365 <span class="comment">//}</span>
<a name="l14366"></a>14366 <span class="comment">//=================================================================================================================</span>
<a name="l14367"></a>14367 
<a name="l14368"></a>14368 <span class="comment">//=================================================================================================================</span>
<a name="l14369"></a>14369 <span class="comment">//{          txDialog methods implementation</span>
<a name="l14370"></a>14370 <span class="comment">//           Реализация методов класса txDialog</span>
<a name="l14371"></a>14371 <span class="comment">//</span>
<a name="l14372"></a>14372 <span class="comment">//           See [1] http://msdn.microsoft.com/ru-ru/library/windows/desktop/ms645389%28v=vs.85%29.aspx</span>
<a name="l14373"></a>14373 <span class="comment">//               [2] http://blogs.msdn.microsoft.com/oldnewthing/20050429-00/?p=35743</span>
<a name="l14374"></a>14374 <span class="comment">//               [3] http://blogs.msdn.microsoft.com/oldnewthing/20040623-00/?p=38753</span>
<a name="l14375"></a>14375 <span class="comment">//=================================================================================================================</span>
<a name="l14376"></a>14376 
<a name="l14377"></a>14377 <a class="code" href="a00017.htm#a2c09320a023bef21f6857d2dae75931b" title="Конструктор.">txDialog::txDialog</a> () :
<a name="l14378"></a>14378     layout_ (NULL)
<a name="l14379"></a>14379     {$1}
<a name="l14380"></a>14380 
<a name="l14381"></a>14381 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14382"></a>14382 
<a name="l14383"></a>14383 <a class="code" href="a00017.htm#a2c09320a023bef21f6857d2dae75931b" title="Конструктор.">txDialog::txDialog</a> (<span class="keyword">const</span> Layout* layout) :
<a name="l14384"></a>14384     layout_ (layout)
<a name="l14385"></a>14385     {$1}
<a name="l14386"></a>14386 
<a name="l14387"></a>14387 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14388"></a>14388 
<a name="l14389"></a>14389 <span class="keyword">const</span> <a class="code" href="a00014.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a>* <a class="code" href="a00017.htm#a963d3281c5a4cf4989fa63552f9b52de" title="Устанавливает текущий макет диалогового окна.">txDialog::setLayout</a> (<span class="keyword">const</span> Layout* layout)
<a name="l14390"></a>14390     {
<a name="l14391"></a>14391 $1  assert (layout);
<a name="l14392"></a>14392 
<a name="l14393"></a>14393 $   return ::std::swap (layout_, layout), layout;
<a name="l14394"></a>14394     }
<a name="l14395"></a>14395 
<a name="l14396"></a>14396 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14397"></a>14397 
<a name="l14398"></a>14398 intptr_t <a class="code" href="a00017.htm#aa16fa949174963ad7b04c3e9d7bd49ed" title="Запускает диалоговое окно.">txDialog::dialogBox</a> (WORD resourceID)
<a name="l14399"></a>14399     {
<a name="l14400"></a>14400 $1  <span class="keyword">const</span> <span class="keywordtype">char</span>* resName = (<span class="keywordtype">char</span>*)(uintptr_t) resourceID;
<a name="l14401"></a>14401 
<a name="l14402"></a>14402 $   <span class="keywordflow">if</span> (!FindResource (NULL, resName, RT_DIALOG)) <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Не найден ресурс диалога %d&quot;</span>, resourceID), 0;
<a name="l14403"></a>14403 
<a name="l14404"></a>14404 $   <span class="keywordflow">return</span> DialogBoxParam (NULL, resName, NULL, (DLGPROC) <a class="code" href="a00017.htm#a90548841fc9510cfdd9bcd4a5ba99477" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна in32 должна быть статическ...">DialogProc_</a>, (LPARAM) <span class="keyword">this</span>);
<a name="l14405"></a>14405     }
<a name="l14406"></a>14406 
<a name="l14407"></a>14407 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14408"></a>14408 
<a name="l14409"></a>14409 intptr_t <a class="code" href="a00017.htm#aa16fa949174963ad7b04c3e9d7bd49ed" title="Запускает диалоговое окно.">txDialog::dialogBox</a> (<span class="keyword">const</span> <a class="code" href="a00014.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a>* layout <span class="comment">/*= NULL*/</span>, <span class="keywordtype">size_t</span> bufsize <span class="comment">/*= 0*/</span>)
<a name="l14410"></a>14410     {
<a name="l14411"></a>14411 $1  <span class="keywordflow">if</span> (!layout)  layout = <a class="code" href="a00017.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7" title="Текущий макет диалога.">layout_</a>;
<a name="l14412"></a>14412 $   <span class="keywordflow">if</span> (!layout)  <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Не установлен динамический шаблон диалога&quot;</span>), 0;
<a name="l14413"></a>14413 
<a name="l14414"></a>14414 $   <span class="keywordflow">if</span> (!bufsize) bufsize = 1024;
<a name="l14415"></a>14415 
<a name="l14416"></a>14416 $   DLGTEMPLATE* tmpl = (DLGTEMPLATE*) GlobalAlloc (GPTR, bufsize);
<a name="l14417"></a>14417 $   <span class="keywordflow">if</span> (!tmpl) <span class="keywordflow">return</span> <a class="code" href="a00080.htm#gabe7d5b7083c7588b457f73c1e0461044" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;GlobalAlloc(): Нет памяти для шаблона диалога&quot;</span>), 0;
<a name="l14418"></a>14418 
<a name="l14419"></a>14419 $   <span class="keyword">const</span> Layout* dlg = &amp;layout[0];
<a name="l14420"></a>14420 $   <span class="keyword">const</span> Layout  def = { <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230" title="Начало описания диалога">DIALOG</a>, NULL, 0, 0,0,0,0, WS_CAPTION | WS_SYSMENU | DS_MODALFRAME | DS_CENTER, <span class="stringliteral">&quot;MS Shell Dlg&quot;</span>, 8 };
<a name="l14421"></a>14421 
<a name="l14422"></a>14422 $   <span class="keywordtype">void</span>* ptr = _tx_DLGTEMPLATE_Create (tmpl, bufsize,
<a name="l14423"></a>14423                                        (dlg-&gt;style? dlg-&gt;style : def.style) | DS_SETFONT, 0, 0,
<a name="l14424"></a>14424                                         dlg-&gt;x, dlg-&gt;y, dlg-&gt;sx, dlg-&gt;sy,
<a name="l14425"></a>14425                                         dlg-&gt;caption?  dlg-&gt;caption  : def.caption,
<a name="l14426"></a>14426                                         dlg-&gt;font?     dlg-&gt;font     : def.font,
<a name="l14427"></a>14427                                         dlg-&gt;fontsize? dlg-&gt;fontsize : def.fontsize, NULL);
<a name="l14428"></a>14428 $   WORD i = 0;
<a name="l14429"></a>14429 $   <span class="keywordflow">for</span> (i = 1; layout[i].<a class="code" href="a00014.htm#aef0e185c3b1c26598c04af6fc185afd2" title="Тип контрола">wndclass</a> != <a class="code" href="a00083.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924" title="Конец описания диалога">END</a>; ++i)
<a name="l14430"></a>14430         {
<a name="l14431"></a>14431 $       <span class="keyword">const</span> Layout* item = &amp;layout[i];
<a name="l14432"></a>14432 
<a name="l14433"></a>14433 $       ptr = _tx_DLGTEMPLATE_Add (ptr, bufsize - ((<span class="keywordtype">char</span>*)ptr - (<span class="keywordtype">char</span>*)tmpl),
<a name="l14434"></a>14434                                    item-&gt;style | WS_VISIBLE, 0, item-&gt;x, item-&gt;y, item-&gt;sx, item-&gt;sy,
<a name="l14435"></a>14435                                    item-&gt;id, (<span class="keyword">const</span> <span class="keywordtype">char</span>*)(uintptr_t) item-&gt;wndclass, item-&gt;caption);
<a name="l14436"></a>14436         }
<a name="l14437"></a>14437 
<a name="l14438"></a>14438 $   tmpl-&gt;cdit = (<span class="keywordtype">unsigned</span> short) (i-1);
<a name="l14439"></a>14439 
<a name="l14440"></a>14440 $   intptr_t res = DialogBoxIndirectParam (NULL, tmpl, NULL, (DLGPROC) <a class="code" href="a00017.htm#a90548841fc9510cfdd9bcd4a5ba99477" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна in32 должна быть статическ...">DialogProc_</a>, (LPARAM) <span class="keyword">this</span>);
<a name="l14441"></a>14441 
<a name="l14442"></a>14442 $   GlobalFree (tmpl);
<a name="l14443"></a>14443 
<a name="l14444"></a>14444 $   <span class="keywordflow">return</span> res;
<a name="l14445"></a>14445     }
<a name="l14446"></a>14446 
<a name="l14447"></a>14447 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14448"></a>14448 
<a name="l14449"></a>14449 <span class="keywordtype">int</span> <a class="code" href="a00017.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc</a> (HWND wnd, UINT msg, WPARAM wParam, LPARAM)
<a name="l14450"></a>14450     {
<a name="l14451"></a>14451 $1  <span class="keywordflow">switch</span> (msg)
<a name="l14452"></a>14452         {
<a name="l14453"></a>14453         <span class="keywordflow">case</span> WM_INITDIALOG: $ SetForegroundWindow (wnd);
<a name="l14454"></a>14454                             $ <span class="keywordflow">break</span>;
<a name="l14455"></a>14455 
<a name="l14456"></a>14456         <span class="keywordflow">case</span> WM_COMMAND:    $ <span class="keywordflow">switch</span> (LOWORD (wParam))
<a name="l14457"></a>14457             {
<a name="l14458"></a>14458             <span class="keywordflow">case</span> IDOK:
<a name="l14459"></a>14459             <span class="keywordflow">case</span> IDCANCEL:  $ SetForegroundWindow (<a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>()? <a class="code" href="a00081.htm#gafa31ebd8ed957c41713900a407497cf8" title="Возвращает дескриптор окна рисования">txWindow</a>() : Win32::GetConsoleWindow());
<a name="l14460"></a>14460                             $ EndDialog (wnd, (uintptr_t) <span class="keyword">this</span>);
<a name="l14461"></a>14461                             $ <span class="keywordflow">break</span>;
<a name="l14462"></a>14462 
<a name="l14463"></a>14463             <span class="keywordflow">default</span>:        $ <span class="keywordflow">break</span>;
<a name="l14464"></a>14464             }
<a name="l14465"></a>14465                             $ <span class="keywordflow">break</span>;
<a name="l14466"></a>14466         <span class="keywordflow">default</span>:            $ <span class="keywordflow">break</span>;
<a name="l14467"></a>14467         }
<a name="l14468"></a>14468 
<a name="l14469"></a>14469 $   <span class="keywordflow">return</span> FALSE;
<a name="l14470"></a>14470     }
<a name="l14471"></a>14471 
<a name="l14472"></a>14472 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14473"></a>14473 
<a name="l14474"></a>14474 intptr_t CALLBACK <a class="code" href="a00017.htm#a90548841fc9510cfdd9bcd4a5ba99477" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна in32 должна быть статическ...">txDialog::DialogProc_</a> (HWND wnd, UINT msg, WPARAM wParam, LPARAM lParam)
<a name="l14475"></a>14475     {
<a name="l14476"></a>14476 $1  <span class="keyword">static</span> txDialog* this__ = NULL;
<a name="l14477"></a>14477 $   <span class="keywordflow">if</span> (msg == WM_INITDIALOG) this__ = (txDialog*) lParam;
<a name="l14478"></a>14478 $   <span class="keywordflow">if</span> (!this__) <span class="keywordflow">return</span> FALSE;
<a name="l14479"></a>14479 
<a name="l14480"></a>14480 $   <span class="keywordflow">return</span> this__-&gt; <a class="code" href="a00017.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">dialogProc</a> (wnd, msg, wParam, lParam);
<a name="l14481"></a>14481     }
<a name="l14482"></a>14482 
<a name="l14483"></a>14483 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14484"></a>14484 
<a name="l14485"></a>14485 <span class="keywordtype">void</span>* _tx_DLGTEMPLATE_Create (<span class="keywordtype">void</span>* globalMem, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l14486"></a>14486                               WORD controls, <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l14487"></a>14487                               <span class="keyword">const</span> <span class="keywordtype">char</span> caption[], <span class="keyword">const</span> <span class="keywordtype">char</span> font[], WORD fontsize, <span class="keyword">const</span> <span class="keywordtype">char</span> menu[])
<a name="l14488"></a>14488     {
<a name="l14489"></a>14489 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (globalMem)) <span class="keywordflow">return</span> NULL;
<a name="l14490"></a>14490 
<a name="l14491"></a>14491 $   WORD* pw = (WORD*) globalMem;
<a name="l14492"></a>14492 
<a name="l14493"></a>14493 $   DLGTEMPLATE* tmpl = ((DLGTEMPLATE*&amp;) pw)++;
<a name="l14494"></a>14494 
<a name="l14495"></a>14495 $   tmpl-&gt;style = style;
<a name="l14496"></a>14496 $   tmpl-&gt;dwExtendedStyle = exStyle;
<a name="l14497"></a>14497 $   tmpl-&gt;cdit  = controls;
<a name="l14498"></a>14498 $   tmpl-&gt;x     = x;
<a name="l14499"></a>14499 $   tmpl-&gt;y     = y;
<a name="l14500"></a>14500 $   tmpl-&gt;cx    = cx;
<a name="l14501"></a>14501 $   tmpl-&gt;cy    = cy;
<a name="l14502"></a>14502 
<a name="l14503"></a>14503 $   <span class="keywordflow">if</span> (menu &gt; (<span class="keyword">const</span> <span class="keywordtype">char</span>*) 0xFFFF)
<a name="l14504"></a>14504         {
<a name="l14505"></a>14505 $       pw  += MultiByteToWideChar  (_TX_CODEPAGE, 0, (menu?    menu    : <span class="stringliteral">&quot;&quot;</span>), -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l14506"></a>14506                                     (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*) pw - (<span class="keywordtype">char</span>*) globalMem) : 0xFFFF));
<a name="l14507"></a>14507         }
<a name="l14508"></a>14508     <span class="keywordflow">else</span>
<a name="l14509"></a>14509         {
<a name="l14510"></a>14510 $       *pw++ = (WORD)(uintptr_t) (menu? 0xFFFF : 0);
<a name="l14511"></a>14511 $       *pw++ = (WORD)(uintptr_t)  menu;
<a name="l14512"></a>14512         }
<a name="l14513"></a>14513 
<a name="l14514"></a>14514 $   <span class="keywordflow">if</span> (caption)
<a name="l14515"></a>14515         {
<a name="l14516"></a>14516 $       pw  += MultiByteToWideChar  (_TX_CODEPAGE, 0, (caption? caption : <span class="stringliteral">&quot;&quot;</span>), -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l14517"></a>14517                                     (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*) pw - (<span class="keywordtype">char</span>*) globalMem) : 0xFFFF));
<a name="l14518"></a>14518         }
<a name="l14519"></a>14519 
<a name="l14520"></a>14520 $   <span class="keywordflow">if</span> (style &amp; DS_SETFONT)
<a name="l14521"></a>14521         {
<a name="l14522"></a>14522 $       *pw++ = fontsize;
<a name="l14523"></a>14523 $        pw  += MultiByteToWideChar (_TX_CODEPAGE, 0, (font?    font    : <span class="stringliteral">&quot;&quot;</span>), -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l14524"></a>14524                                     (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*) pw - (<span class="keywordtype">char</span>*) globalMem) : 0xFFFF));
<a name="l14525"></a>14525         }
<a name="l14526"></a>14526 
<a name="l14527"></a>14527 $   <span class="keywordflow">return</span> pw;
<a name="l14528"></a>14528     }
<a name="l14529"></a>14529 
<a name="l14530"></a>14530 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14531"></a>14531 
<a name="l14532"></a>14532 <span class="keywordtype">void</span>* _tx_DLGTEMPLATE_Add (<span class="keywordtype">void</span>* dlgTemplatePtr, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l14533"></a>14533                            <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l14534"></a>14534                            WORD <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> wclass[], <span class="keyword">const</span> <span class="keywordtype">char</span> caption[])
<a name="l14535"></a>14535     {
<a name="l14536"></a>14536 $1  <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (dlgTemplatePtr)) <span class="keywordflow">return</span> NULL;
<a name="l14537"></a>14537 
<a name="l14538"></a>14538 $   WORD* pw = (LPWORD) dlgTemplatePtr;  <span class="comment">// Force align at word boundary</span>
<a name="l14539"></a>14539 $   ((ULONG&amp;) pw)  += 3;
<a name="l14540"></a>14540 $   ((ULONG&amp;) pw) &gt;&gt;= 2;
<a name="l14541"></a>14541 $   ((ULONG&amp;) pw) &lt;&lt;= 2;
<a name="l14542"></a>14542 
<a name="l14543"></a>14543 $   DLGITEMTEMPLATE* tmpl = ((DLGITEMTEMPLATE*&amp;) pw)++;
<a name="l14544"></a>14544 
<a name="l14545"></a>14545 $   tmpl-&gt;style = style;
<a name="l14546"></a>14546 $   tmpl-&gt;dwExtendedStyle = exStyle;
<a name="l14547"></a>14547 $   tmpl-&gt;x     = x;
<a name="l14548"></a>14548 $   tmpl-&gt;y     = y;
<a name="l14549"></a>14549 $   tmpl-&gt;cx    = cx;
<a name="l14550"></a>14550 $   tmpl-&gt;cy    = cy;
<a name="l14551"></a>14551 $   tmpl-&gt;id    = id;
<a name="l14552"></a>14552 
<a name="l14553"></a>14553 $   <span class="keywordflow">if</span> (HIWORD (wclass) == 0xFFFF)
<a name="l14554"></a>14554         {
<a name="l14555"></a>14555 $       *pw++ = (WORD) (HIWORD ((uintptr_t) wclass));
<a name="l14556"></a>14556 $       *pw++ = (WORD) (LOWORD ((uintptr_t) wclass));
<a name="l14557"></a>14557         }
<a name="l14558"></a>14558     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (wclass)
<a name="l14559"></a>14559         {
<a name="l14560"></a>14560 $       pw  += MultiByteToWideChar (_TX_CODEPAGE, 0, const_cast &lt;char*&gt; (wclass), -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l14561"></a>14561                                    (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*) pw - (<span class="keywordtype">char</span>*) dlgTemplatePtr) : 0xFFFF));
<a name="l14562"></a>14562         }
<a name="l14563"></a>14563     <span class="keywordflow">else</span>
<a name="l14564"></a>14564         {
<a name="l14565"></a>14565 $       *pw++ = 0;
<a name="l14566"></a>14566         }
<a name="l14567"></a>14567 
<a name="l14568"></a>14568 $   <span class="keywordflow">if</span> (caption)
<a name="l14569"></a>14569          {
<a name="l14570"></a>14570 $        pw  += MultiByteToWideChar (_TX_CODEPAGE, 0, caption, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l14571"></a>14571                                     (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*) pw - (<span class="keywordtype">char</span>*) dlgTemplatePtr) : 0xFFFF));
<a name="l14572"></a>14572          }
<a name="l14573"></a>14573     <span class="keywordflow">else</span>
<a name="l14574"></a>14574         {
<a name="l14575"></a>14575 $       *pw++ = 0;
<a name="l14576"></a>14576         }
<a name="l14577"></a>14577 
<a name="l14578"></a>14578 $   *pw++ = 0;
<a name="l14579"></a>14579 
<a name="l14580"></a>14580 $   <span class="keywordflow">return</span> pw;
<a name="l14581"></a>14581     }
<a name="l14582"></a>14582 
<a name="l14583"></a>14583 <span class="comment">//}</span>
<a name="l14584"></a>14584 <span class="comment">//=================================================================================================================</span>
<a name="l14585"></a>14585 
<a name="l14586"></a>14586 <span class="comment">//=================================================================================================================</span>
<a name="l14587"></a>14587 <span class="comment">//{          Cleaning up the utility macros</span>
<a name="l14588"></a>14588 <span class="comment">//           Очистка служебных макросов</span>
<a name="l14589"></a>14589 <span class="comment">//=================================================================================================================</span>
<a name="l14590"></a>14590 
<a name="l14591"></a>14591 <span class="preprocessor">#undef       $</span>
<a name="l14592"></a>14592 <span class="preprocessor"></span><span class="preprocessor">#undef       $0</span>
<a name="l14593"></a>14593 <span class="preprocessor"></span><span class="preprocessor">#undef       $1</span>
<a name="l14594"></a>14594 <span class="preprocessor"></span><span class="preprocessor">#undef       $2</span>
<a name="l14595"></a>14595 <span class="preprocessor"></span><span class="preprocessor">#undef       $3</span>
<a name="l14596"></a>14596 <span class="preprocessor"></span><span class="preprocessor">#undef       $4</span>
<a name="l14597"></a>14597 <span class="preprocessor"></span><span class="preprocessor">#undef       $5</span>
<a name="l14598"></a>14598 <span class="preprocessor"></span><span class="preprocessor">#undef       $6</span>
<a name="l14599"></a>14599 <span class="preprocessor"></span><span class="preprocessor">#undef       $7</span>
<a name="l14600"></a>14600 <span class="preprocessor"></span><span class="preprocessor">#undef       $8</span>
<a name="l14601"></a>14601 <span class="preprocessor"></span><span class="preprocessor">#undef       $9</span>
<a name="l14602"></a>14602 <span class="preprocessor"></span><span class="preprocessor">#undef       $$</span>
<a name="l14603"></a>14603 <span class="preprocessor"></span>
<a name="l14604"></a>14604 <span class="comment">//}</span>
<a name="l14605"></a>14605 <span class="comment">//=================================================================================================================</span>
<a name="l14606"></a>14606 
<a name="l14608"></a>14608 
<a name="l14609"></a>14609 <span class="comment">//=================================================================================================================</span>
<a name="l14610"></a>14610 <span class="comment">//{          Experimental Debugging macros</span>
<a name="l14612"></a>14612 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l14613"></a>14613 
<a name="l14614"></a>14614 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l14734"></a>14734 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l14735"></a>14735 
<a name="l14736"></a>14736 <span class="preprocessor">#ifndef __TX_DEBUG_MACROS</span>
<a name="l14737"></a><a class="code" href="a00080.htm#gaaa5d2cd4ba134312dcaca4e8316bbe9e">14737</a> <span class="preprocessor"></span><span class="preprocessor">#define __TX_DEBUG_MACROS  (&quot;Группа отладочных $-макросов&quot;)</span>
<a name="l14738"></a>14738 <span class="preprocessor"></span>
<a name="l14740"></a>14740 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14741"></a>14741 
<a name="l14742"></a>14742 <span class="preprocessor">#define $H            txSetConsoleAttr (FOREGROUND_BLACK        | BACKGROUND_BLACK);</span>
<a name="l14743"></a>14743 <span class="preprocessor"></span><span class="preprocessor">#define $B            txSetConsoleAttr (FOREGROUND_BLUE         | BACKGROUND_BLACK);</span>
<a name="l14744"></a>14744 <span class="preprocessor"></span><span class="preprocessor">#define $G            txSetConsoleAttr (FOREGROUND_GREEN        | BACKGROUND_BLACK);</span>
<a name="l14745"></a>14745 <span class="preprocessor"></span><span class="preprocessor">#define $C            txSetConsoleAttr (FOREGROUND_CYAN         | BACKGROUND_BLACK);</span>
<a name="l14746"></a>14746 <span class="preprocessor"></span><span class="preprocessor">#define $R            txSetConsoleAttr (FOREGROUND_RED          | BACKGROUND_BLACK);</span>
<a name="l14747"></a>14747 <span class="preprocessor"></span><span class="preprocessor">#define $M            txSetConsoleAttr (FOREGROUND_MAGENTA      | BACKGROUND_BLACK);</span>
<a name="l14748"></a>14748 <span class="preprocessor"></span><span class="preprocessor">#define $Y            txSetConsoleAttr (FOREGROUND_DARKYELLOW   | BACKGROUND_BLACK);</span>
<a name="l14749"></a>14749 <span class="preprocessor"></span><span class="preprocessor">#define $d            txSetConsoleAttr (FOREGROUND_LIGHTGRAY    | BACKGROUND_BLACK);</span>
<a name="l14750"></a>14750 <span class="preprocessor"></span><span class="preprocessor">#define $D            txSetConsoleAttr (FOREGROUND_DARKGRAY     | BACKGROUND_BLACK);</span>
<a name="l14751"></a>14751 <span class="preprocessor"></span><span class="preprocessor">#define $b            txSetConsoleAttr (FOREGROUND_LIGHTBLUE    | BACKGROUND_BLACK);</span>
<a name="l14752"></a>14752 <span class="preprocessor"></span><span class="preprocessor">#define $g            txSetConsoleAttr (FOREGROUND_LIGHTGREEN   | BACKGROUND_BLACK);</span>
<a name="l14753"></a>14753 <span class="preprocessor"></span><span class="preprocessor">#define $c            txSetConsoleAttr (FOREGROUND_LIGHTCYAN    | BACKGROUND_BLACK);</span>
<a name="l14754"></a>14754 <span class="preprocessor"></span><span class="preprocessor">#define $r            txSetConsoleAttr (FOREGROUND_LIGHTRED     | BACKGROUND_BLACK);</span>
<a name="l14755"></a>14755 <span class="preprocessor"></span><span class="preprocessor">#define $m            txSetConsoleAttr (FOREGROUND_LIGHTMAGENTA | BACKGROUND_BLACK);</span>
<a name="l14756"></a>14756 <span class="preprocessor"></span><span class="preprocessor">#define $y            txSetConsoleAttr (FOREGROUND_YELLOW       | BACKGROUND_BLACK);</span>
<a name="l14757"></a>14757 <span class="preprocessor"></span><span class="preprocessor">#define $h            txSetConsoleAttr (FOREGROUND_WHITE        | BACKGROUND_BLACK);</span>
<a name="l14758"></a>14758 <span class="preprocessor"></span>
<a name="l14759"></a>14759 <span class="preprocessor">#define $i            txSetConsoleAttr (FOREGROUND_LIGHTCYAN    | BACKGROUND_BLUE);</span>
<a name="l14760"></a>14760 <span class="preprocessor"></span><span class="preprocessor">#define $I            txSetConsoleAttr (FOREGROUND_YELLOW       | BACKGROUND_BLUE);</span>
<a name="l14761"></a>14761 <span class="preprocessor"></span><span class="preprocessor">#define $o            txSetConsoleAttr (FOREGROUND_LIGHTGREEN   | BACKGROUND_GREEN);</span>
<a name="l14762"></a>14762 <span class="preprocessor"></span><span class="preprocessor">#define $O            txSetConsoleAttr (FOREGROUND_YELLOW       | BACKGROUND_GREEN);</span>
<a name="l14763"></a>14763 <span class="preprocessor"></span><span class="preprocessor">#define $e            txSetConsoleAttr (FOREGROUND_WHITE        | BACKGROUND_RED);</span>
<a name="l14764"></a>14764 <span class="preprocessor"></span><span class="preprocessor">#define $E            txSetConsoleAttr (FOREGROUND_YELLOW       | BACKGROUND_RED);</span>
<a name="l14765"></a>14765 <span class="preprocessor"></span><span class="preprocessor">#define $w            txSetConsoleAttr (FOREGROUND_LIGHTMAGENTA | BACKGROUND_MAGENTA);</span>
<a name="l14766"></a>14766 <span class="preprocessor"></span><span class="preprocessor">#define $W            txSetConsoleAttr (FOREGROUND_YELLOW       | BACKGROUND_MAGENTA);</span>
<a name="l14767"></a>14767 <span class="preprocessor"></span><span class="preprocessor">#define $f            txSetConsoleAttr (FOREGROUND_BLACK        | BACKGROUND_LIGHTRED);</span>
<a name="l14768"></a>14768 <span class="preprocessor"></span><span class="preprocessor">#define $F            txSetConsoleAttr (FOREGROUND_MAGENTA      | BACKGROUND_LIGHTRED);</span>
<a name="l14769"></a>14769 <span class="preprocessor"></span><span class="preprocessor">#define $l            txSetConsoleAttr (FOREGROUND_BLACK        | BACKGROUND_DARKGRAY);</span>
<a name="l14770"></a>14770 <span class="preprocessor"></span><span class="preprocessor">#define $L            txSetConsoleAttr (FOREGROUND_LIGHTGRAY    | BACKGROUND_DARKGRAY);</span>
<a name="l14771"></a>14771 <span class="preprocessor"></span>
<a name="l14772"></a>14772 <span class="preprocessor">#define $T( cond )    txSetConsoleAttr ((cond)? FOREGROUND_LIGHTGREEN : FOREGROUND_LIGHTRED );</span>
<a name="l14773"></a>14773 <span class="preprocessor"></span>
<a name="l14774"></a>14774 <span class="preprocessor">#define $s            _txSaveConsoleAttr TX_JOIN (__txSavedConsoleAttrs, __LINE__);</span>
<a name="l14775"></a>14775 <span class="preprocessor"></span>
<a name="l14776"></a>14776 <span class="preprocessor">#define $sH           $s $H</span>
<a name="l14777"></a>14777 <span class="preprocessor"></span><span class="preprocessor">#define $sB           $s $B</span>
<a name="l14778"></a>14778 <span class="preprocessor"></span><span class="preprocessor">#define $sG           $s $G</span>
<a name="l14779"></a>14779 <span class="preprocessor"></span><span class="preprocessor">#define $sC           $s $C</span>
<a name="l14780"></a>14780 <span class="preprocessor"></span><span class="preprocessor">#define $sR           $s $R</span>
<a name="l14781"></a>14781 <span class="preprocessor"></span><span class="preprocessor">#define $sM           $s $M</span>
<a name="l14782"></a>14782 <span class="preprocessor"></span><span class="preprocessor">#define $sY           $s $Y</span>
<a name="l14783"></a>14783 <span class="preprocessor"></span><span class="preprocessor">#define $sd           $s $d</span>
<a name="l14784"></a>14784 <span class="preprocessor"></span><span class="preprocessor">#define $sD           $s $D</span>
<a name="l14785"></a>14785 <span class="preprocessor"></span><span class="preprocessor">#define $sb           $s $b</span>
<a name="l14786"></a>14786 <span class="preprocessor"></span><span class="preprocessor">#define $sg           $s $g</span>
<a name="l14787"></a>14787 <span class="preprocessor"></span><span class="preprocessor">#define $sc           $s $c</span>
<a name="l14788"></a>14788 <span class="preprocessor"></span><span class="preprocessor">#define $sr           $s $r</span>
<a name="l14789"></a>14789 <span class="preprocessor"></span><span class="preprocessor">#define $sm           $s $m</span>
<a name="l14790"></a>14790 <span class="preprocessor"></span><span class="preprocessor">#define $sy           $s $y</span>
<a name="l14791"></a>14791 <span class="preprocessor"></span><span class="preprocessor">#define $sh           $s $h</span>
<a name="l14792"></a>14792 <span class="preprocessor"></span>
<a name="l14793"></a>14793 <span class="preprocessor">#define $si           $s $i</span>
<a name="l14794"></a>14794 <span class="preprocessor"></span><span class="preprocessor">#define $sI           $s $I</span>
<a name="l14795"></a>14795 <span class="preprocessor"></span><span class="preprocessor">#define $so           $s $o</span>
<a name="l14796"></a>14796 <span class="preprocessor"></span><span class="preprocessor">#define $sO           $s $O</span>
<a name="l14797"></a>14797 <span class="preprocessor"></span><span class="preprocessor">#define $se           $s $e</span>
<a name="l14798"></a>14798 <span class="preprocessor"></span><span class="preprocessor">#define $sE           $s $E</span>
<a name="l14799"></a>14799 <span class="preprocessor"></span><span class="preprocessor">#define $sw           $s $w</span>
<a name="l14800"></a>14800 <span class="preprocessor"></span><span class="preprocessor">#define $sW           $s $W</span>
<a name="l14801"></a>14801 <span class="preprocessor"></span><span class="preprocessor">#define $sf           $s $f</span>
<a name="l14802"></a>14802 <span class="preprocessor"></span><span class="preprocessor">#define $sF           $s $F</span>
<a name="l14803"></a>14803 <span class="preprocessor"></span><span class="preprocessor">#define $sl           $s $l</span>
<a name="l14804"></a>14804 <span class="preprocessor"></span><span class="preprocessor">#define $sL           $s $L</span>
<a name="l14805"></a>14805 <span class="preprocessor"></span>
<a name="l14806"></a>14806 <span class="preprocessor">#define $sT( cond )   $s $T (cond)</span>
<a name="l14807"></a>14807 <span class="preprocessor"></span>
<a name="l14808"></a>14808 <span class="preprocessor">#define $test(cond)   { if (!!(cond)) { $o std::cerr &lt;&lt; &quot;[PASSED] &quot; __TX_FILELINE__ &quot;: &quot; #cond; } \</span>
<a name="l14809"></a>14809 <span class="preprocessor">                        else          { $e std::cerr &lt;&lt; &quot;[FAILED] &quot; __TX_FILELINE__ &quot;: &quot; #cond; } $d; }</span>
<a name="l14810"></a>14810 <span class="preprocessor"></span>
<a name="l14811"></a>14811 <span class="preprocessor">#define $status(cond) $test (cond)</span>
<a name="l14812"></a>14812 <span class="preprocessor"></span>
<a name="l14813"></a>14813 <span class="preprocessor">#define $unittest( code, expected )                                                                                             \</span>
<a name="l14814"></a>14814 <span class="preprocessor">    {                                                                                                                           \</span>
<a name="l14815"></a>14815 <span class="preprocessor">    const _tx_decltype (code)     &amp; _result   = (code);       </span><span class="comment">/* Should use auto, but g++ 4.7.2 default std is &lt; 2011 */</span>        \
<a name="l14816"></a>14816     const _tx_decltype (expected) &amp; _expected = (expected);                                                                     \
<a name="l14817"></a>14817                                                                                                                                 \
<a name="l14818"></a>14818     if (_result == _expected)                                                                                                   \
<a name="l14819"></a>14819         { $so std::cerr &lt;&lt; &quot;[PASSED] &quot; __TX_FILELINE__ &quot;: &quot; #code; }                                                            \
<a name="l14820"></a>14820     else                                                                                                                        \
<a name="l14821"></a>14821         { $se std::cerr &lt;&lt; &quot;[FAILED] &quot; __TX_FILELINE__ &quot;: &quot; #code &quot; == (&quot; &lt;&lt; _result &lt;&lt; &quot;), should be (&quot; &lt;&lt; _expected &lt;&lt; &quot;)&quot;; } \
<a name="l14822"></a>14822                                                                                                                                 \
<a name="l14823"></a>14823     $n;                                                                                                                         \
<a name="l14824"></a>14824     (_result == _expected);                                                                                                     \
<a name="l14825"></a>14825     }
<a name="l14826"></a>14826 
<a name="l14827"></a>14827 <span class="comment">//=================================================================================================================</span>
<a name="l14828"></a>14828 
<a name="l14829"></a>14829 <span class="preprocessor">#ifdef _GCC_VER</span>
<a name="l14830"></a>14830 <span class="preprocessor"></span>
<a name="l14831"></a>14831 <span class="preprocessor">#define $V(  var, ...)       (               _txDumpVar ((var),  &quot;[&quot;,             __VA_ARGS__ &quot;]\n&quot;) )</span>
<a name="l14832"></a>14832 <span class="preprocessor"></span><span class="preprocessor">#define $V_( var, ...)       (               _txDumpVar ((var),  &quot;[&quot;,             __VA_ARGS__ &quot;] &quot; ) )</span>
<a name="l14833"></a>14833 <span class="preprocessor"></span><span class="preprocessor">#define $V__(var, ...)       (               _txDumpVar ((var),  &quot;[&quot;,             __VA_ARGS__ &quot;]&quot;  ) )</span>
<a name="l14834"></a>14834 <span class="preprocessor"></span>
<a name="l14835"></a>14835 <span class="preprocessor">#define $(   var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;,  __VA_ARGS__ &quot;]\n&quot;) )</span>
<a name="l14836"></a>14836 <span class="preprocessor"></span><span class="preprocessor">#define $_(  var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;,  __VA_ARGS__ &quot;] &quot; ) )</span>
<a name="l14837"></a>14837 <span class="preprocessor"></span><span class="preprocessor">#define $__( var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;,  __VA_ARGS__ &quot;]&quot;  ) )</span>
<a name="l14838"></a>14838 <span class="preprocessor"></span>
<a name="l14839"></a>14839 <span class="preprocessor">#define $x(  var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;,  __VA_ARGS__ &quot;]\n&quot;, ::std::ios_base::showbase | ::std::ios_base::hex) )</span>
<a name="l14840"></a>14840 <span class="preprocessor"></span><span class="preprocessor">#define $x_( var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;,  __VA_ARGS__ &quot;] &quot;,  ::std::ios_base::showbase | ::std::ios_base::hex) )</span>
<a name="l14841"></a>14841 <span class="preprocessor"></span>
<a name="l14842"></a>14842 <span class="preprocessor">#define $v(  var, cond, ...) { { $st (cond); _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;,  __VA_ARGS__ &quot;]&quot; ); } $n; }</span>
<a name="l14843"></a>14843 <span class="preprocessor"></span><span class="preprocessor">#define $v_( var, cond, ...) {   $st (cond); _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;,  __VA_ARGS__ &quot;]&quot; );       }</span>
<a name="l14844"></a>14844 <span class="preprocessor"></span>
<a name="l14845"></a>14845 <span class="preprocessor">#else</span>
<a name="l14846"></a>14846 <span class="preprocessor"></span>
<a name="l14847"></a>14847 <span class="preprocessor">#define $V(  var, ...)       (               _txDumpVar ((var),  &quot;[&quot;,            #__VA_ARGS__ &quot;]\n&quot;) )</span>
<a name="l14848"></a>14848 <span class="preprocessor"></span><span class="preprocessor">#define $V_( var, ...)       (               _txDumpVar ((var),  &quot;[&quot;,            #__VA_ARGS__ &quot;] &quot; ) )</span>
<a name="l14849"></a>14849 <span class="preprocessor"></span><span class="preprocessor">#define $V__(var, ...)       (               _txDumpVar ((var),  &quot;[&quot;,            #__VA_ARGS__ &quot;]&quot;  ) )</span>
<a name="l14850"></a>14850 <span class="preprocessor"></span>
<a name="l14851"></a>14851 <span class="preprocessor">#define $(   var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;, #__VA_ARGS__ &quot;]\n&quot;) )</span>
<a name="l14852"></a>14852 <span class="preprocessor"></span><span class="preprocessor">#define $_(  var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;, #__VA_ARGS__ &quot;] &quot; ) )</span>
<a name="l14853"></a>14853 <span class="preprocessor"></span><span class="preprocessor">#define $__( var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;, #__VA_ARGS__ &quot;]&quot;  ) )</span>
<a name="l14854"></a>14854 <span class="preprocessor"></span>
<a name="l14855"></a>14855 <span class="preprocessor">#define $x(  var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;, #__VA_ARGS__ &quot;]\n&quot;, ::std::ios_base::showbase | ::std::ios_base::hex) )</span>
<a name="l14856"></a>14856 <span class="preprocessor"></span><span class="preprocessor">#define $x_( var, ...)       (               _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;, #__VA_ARGS__ &quot;] &quot;,  ::std::ios_base::showbase | ::std::ios_base::hex) )</span>
<a name="l14857"></a>14857 <span class="preprocessor"></span>
<a name="l14858"></a>14858 <span class="preprocessor">#define $v(  var, cond, ...) { { $st (cond); _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;, #__VA_ARGS__ &quot;]&quot; ); } $n; }</span>
<a name="l14859"></a>14859 <span class="preprocessor"></span><span class="preprocessor">#define $v_( var, cond, ...) {   $st (cond); _txDumpVar ((var),  &quot;[&quot; #var &quot; = &quot;, #__VA_ARGS__ &quot;]&quot; );       }</span>
<a name="l14860"></a>14860 <span class="preprocessor"></span>
<a name="l14861"></a>14861 <span class="preprocessor">#endif</span>
<a name="l14862"></a>14862 <span class="preprocessor"></span>
<a name="l14863"></a>14863 <span class="preprocessor">#define $$                   { txOutputDebugPrintf (&quot;\f\n&quot;); { $sC txOutputDebugPrintf (&quot;\f&quot; &quot;[%s (%d) %s]&quot;, __FILE__, __LINE__, __TX_FUNCTION__);                                   } txOutputDebugPrintf (&quot;\f\n&quot;); }</span>
<a name="l14864"></a>14864 <span class="preprocessor"></span><span class="preprocessor">#define $$_                  { txOutputDebugPrintf (&quot;\f\n&quot;); { $sC txOutputDebugPrintf (&quot;\f&quot; &quot;[&quot; &quot;(%d) %s]&quot;,           __LINE__, __func__);                                          } txOutputDebugPrintf (&quot;\f\n&quot;); }</span>
<a name="l14865"></a>14865 <span class="preprocessor"></span><span class="preprocessor">#define $meow(...)           { txOutputDebugPrintf (&quot;\f\n&quot;); { $sc txOutputDebugPrintf (&quot;\f&quot; &quot;[%s (%d) %s]&quot;, __FILE__, __LINE__, __func__); txOutputDebugPrintf (&quot;\f &quot; __VA_ARGS__); } txOutputDebugPrintf (&quot;\f\n&quot;); }</span>
<a name="l14866"></a>14866 <span class="preprocessor"></span><span class="preprocessor">#define $meow_               { txOutputDebugPrintf (&quot;\f\n&quot;); { $sc txOutputDebugPrintf (&quot;\f&quot; &quot;[%s (%d) %s]&quot;, __FILE__, __LINE__, __func__); txOutputDebugPrintf (&quot;\f&quot;);              } txOutputDebugPrintf (&quot;\f\n&quot;); }</span>
<a name="l14867"></a>14867 <span class="preprocessor"></span>
<a name="l14868"></a>14868 <span class="preprocessor">#define $$$(   ... )         ( ::std::cerr &lt;&lt; &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]\n&quot;, _txDumpVar ((__VA_ARGS__),&quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;: &quot;, &quot;, DONE]\n\n&quot;) )</span>
<a name="l14869"></a>14869 <span class="preprocessor"></span><span class="preprocessor">#define $$$_(  ... )         ( ::std::cerr &lt;&lt; &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]\n&quot;, _txDumpVar ((__VA_ARGS__),  &quot;[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;: &quot;, &quot;, DONE]\n\n&quot;) )</span>
<a name="l14870"></a>14870 <span class="preprocessor"></span>
<a name="l14871"></a>14871 <span class="preprocessor">#define $$$$(  ... )         { ::std::cerr &lt;&lt; &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]\n&quot;; _txDumpVarSuffix         (&quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__        &quot; DONE]\n\n&quot;); { __VA_ARGS__; } }</span>
<a name="l14872"></a>14872 <span class="preprocessor"></span><span class="preprocessor">#define $$$$_( ... )         { ::std::cerr &lt;&lt; &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]\n&quot;; _txDumpVarSuffix         (  &quot;[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__        &quot; DONE]\n\n&quot;); { __VA_ARGS__; } }</span>
<a name="l14873"></a>14873 <span class="preprocessor"></span><span class="preprocessor">#define $do(   ... )           ::std::cerr &lt;&lt; &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]\n&quot;;                                                                                           __VA_ARGS__</span>
<a name="l14874"></a>14874 <span class="preprocessor"></span><span class="preprocessor">#define $DO(   ... )           ::std::cerr &lt;&lt; &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]...\n&quot;; $p;                                                                                    __VA_ARGS__</span>
<a name="l14875"></a>14875 <span class="preprocessor"></span><span class="preprocessor">#define $Do(   ... )           ::std::cerr &lt;&lt; &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]...\n&quot;;                                                                                        \</span>
<a name="l14876"></a>14876 <span class="preprocessor">                               txMessageBox ( &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #__VA_ARGS__ &quot;]...\n&quot;, __TX_FUNCTION__);                                                                      __VA_ARGS__</span>
<a name="l14877"></a>14877 <span class="preprocessor"></span>
<a name="l14878"></a>14878 <span class="preprocessor">#define $n                   { ::std::cerr &lt;&lt; &quot;\n&quot;;   }</span>
<a name="l14879"></a>14879 <span class="preprocessor"></span><span class="preprocessor">#define $nn                  { ::std::cerr &lt;&lt; &quot;\n\n&quot;; }</span>
<a name="l14880"></a>14880 <span class="preprocessor"></span><span class="preprocessor">#define $t                   { ::std::cerr &lt;&lt; &quot;\t&quot;;   }</span>
<a name="l14881"></a>14881 <span class="preprocessor"></span>
<a name="l14882"></a>14882 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14883"></a>14883 
<a name="l14884"></a>14884 <span class="comment">// This will never be documented, he-he. Read the source, Luke.</span>
<a name="l14885"></a>14885 
<a name="l14886"></a>14886 <span class="preprocessor">#if defined (_DEBUG)</span>
<a name="l14887"></a>14887 <span class="preprocessor"></span><span class="preprocessor">    #define $debug       if (1)</span>
<a name="l14888"></a>14888 <span class="preprocessor"></span><span class="preprocessor">    #define $printf      if (1)</span>
<a name="l14889"></a>14889 <span class="preprocessor"></span><span class="preprocessor">    #define $PRINTF      if (1)</span>
<a name="l14890"></a>14890 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l14891"></a>14891 <span class="preprocessor"></span><span class="preprocessor">    #define $debug       if (0)</span>
<a name="l14892"></a>14892 <span class="preprocessor"></span><span class="preprocessor">    #define $printf      if (0)</span>
<a name="l14893"></a>14893 <span class="preprocessor"></span><span class="preprocessor">    #define $PRINTF      if (0)</span>
<a name="l14894"></a>14894 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l14895"></a>14895 <span class="preprocessor"></span>
<a name="l14896"></a>14896 <span class="preprocessor">#define $$d              $debug</span>
<a name="l14897"></a>14897 <span class="preprocessor"></span><span class="preprocessor">#define $$w              $$$$</span>
<a name="l14898"></a>14898 <span class="preprocessor"></span><span class="preprocessor">#define $$s              __TX_FILELINE__</span>
<a name="l14899"></a>14899 <span class="preprocessor"></span><span class="preprocessor">#define $$b              DebugBreak()</span>
<a name="l14900"></a>14900 <span class="preprocessor"></span><span class="preprocessor">#define $$p              { if (txMessageBox (__TX_FILELINE__ &quot;\n\n&quot; &quot;[Повтор] - продолжение программы,\n&quot; &quot;[Отмена] - остановка&quot;, \</span>
<a name="l14901"></a>14901 <span class="preprocessor">                                                              __TX_FUNCTION__, MB_ICONINFORMATION | MB_RETRYCANCEL) == IDCANCEL) ::exit (2); }</span>
<a name="l14902"></a>14902 <span class="preprocessor"></span><span class="preprocessor">#define $$P              (     txMessageBox (__TX_FILELINE__, __TX_FUNCTION__, MB_ICONINFORMATION | MB_YESNOCANCEL) )</span>
<a name="l14903"></a>14903 <span class="preprocessor"></span><span class="preprocessor">#define $ppp             { { $sy; fprintf (stderr, &quot;[%s &quot;&quot;%s: &quot;&quot;Нажмите любую клавишу для продолжения]&quot;, __TX_FILELINE__, __TX_FUNCTION__); } $P; { $sy; fprintf (stderr, &quot;...\n&quot;); } }</span>
<a name="l14904"></a>14904 <span class="preprocessor"></span><span class="preprocessor">#define $pp              { { $sy; fprintf (stderr, &quot;[%04d %s: &quot;&quot;Нажмите любую клавишу для продолжения]&quot;, __LINE__,        __TX_FUNCTION__); } $P; { $sy; fprintf (stderr, &quot;...\n&quot;); } }</span>
<a name="l14905"></a>14905 <span class="preprocessor"></span><span class="preprocessor">#define $p               { { $sy; fprintf (stderr, &quot;[%s &quot;&quot;%s(): Нажмите любую клавишу для продолжения]&quot;, __TX_FILELINE__, __func__);        } $P; { $sy; fprintf (stderr, &quot;...\n&quot;); } }</span>
<a name="l14906"></a>14906 <span class="preprocessor"></span><span class="preprocessor">#define $ppp_            { { $sy; fprintf (stderr, &quot;[%s &quot;&quot;%s]&quot;,                                          __TX_FILELINE__, __TX_FUNCTION__); } $P; { $sy; fprintf (stderr, &quot;...\n&quot;); } }</span>
<a name="l14907"></a>14907 <span class="preprocessor"></span><span class="preprocessor">#define $pp_             { { $sy; fprintf (stderr, &quot;[%04d %s]&quot;,                                          __LINE__,        __TX_FUNCTION__); } $P; { $sy; fprintf (stderr, &quot;...\n&quot;); } }</span>
<a name="l14908"></a>14908 <span class="preprocessor"></span><span class="preprocessor">#define $p_              { { $sy; fprintf (stderr, &quot;[%s &quot;&quot;%s()]&quot;,                                        __TX_FILELINE__, __func__);        } $P; { $sy; fprintf (stderr, &quot;...\n&quot;); } }</span>
<a name="l14909"></a>14909 <span class="preprocessor"></span><span class="preprocessor">#define $P               ( ((int(*)()) (_getch)) () )  // Avoid &quot;return value not used&quot;</span>
<a name="l14910"></a>14910 <span class="preprocessor"></span>
<a name="l14911"></a>14911 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14912"></a>14912 
<a name="l14913"></a>14913 <span class="keyword">struct </span>_txSaveConsoleAttr
<a name="l14914"></a>14914     {
<a name="l14915"></a>14915     <span class="keywordtype">unsigned</span> attr_;
<a name="l14916"></a>14916 
<a name="l14917"></a>14917     <span class="keyword">inline</span>          _txSaveConsoleAttr()           : attr_ (<a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a> ()) {}
<a name="l14918"></a>14918     <span class="keyword">inline</span> <span class="keyword">explicit</span> _txSaveConsoleAttr (WORD attr) : attr_ (<a class="code" href="a00081.htm#gad1fdf92b2b1e0e3d56e03fad24d735bd" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a> ()) { <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr);  }
<a name="l14919"></a>14919     <span class="keyword">inline</span>         ~_txSaveConsoleAttr()                                         { <a class="code" href="a00081.htm#ga791155510da5fc336b3dbe4deab37974" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr_); }
<a name="l14920"></a>14920     };
<a name="l14921"></a>14921 
<a name="l14922"></a>14922 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14923"></a>14923 
<a name="l14924"></a>14924 <span class="keyword">struct </span>_txDumpVarSuffix
<a name="l14925"></a>14925     {
<a name="l14926"></a>14926     <span class="keyword">typedef</span> _txDumpVarSuffix this_t;
<a name="l14927"></a>14927 
<a name="l14928"></a>14928     <span class="keyword">const</span> <span class="keywordtype">char</span>* suffix_;
<a name="l14929"></a>14929 
<a name="l14930"></a>14930     <span class="keyword">inline</span>  <span class="keyword">explicit</span> _txDumpVarSuffix (<span class="keyword">const</span> <span class="keywordtype">char</span> suffix[] = <span class="stringliteral">&quot;&quot;</span>) : suffix_ (suffix) { assert (suffix); }
<a name="l14931"></a>14931     <span class="keyword">inline</span>          ~_txDumpVarSuffix()                          { ::std::cerr &lt;&lt; suffix_; }
<a name="l14932"></a>14932 
<a name="l14933"></a>14933             _txDumpVarSuffix (<span class="keyword">const</span> this_t&amp;) _tx_delete;
<a name="l14934"></a>14934     this_t&amp; operator =       (const this_t&amp;) _tx_delete;
<a name="l14935"></a>14935     };
<a name="l14936"></a>14936 
<a name="l14937"></a>14937 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14938"></a>14938 
<a name="l14939"></a>14939 <span class="preprocessor">#define ARGS__  const char* prefix, const char* suffix, std::ios_base::fmtflags flags,                             int deep</span>
<a name="l14940"></a>14940 <span class="preprocessor"></span><span class="preprocessor">#define ARGS_   const char* prefix, const char* suffix, std::ios_base::fmtflags flags = std::ios_base::fmtflags(), int deep = 0</span>
<a name="l14941"></a>14941 <span class="preprocessor"></span><span class="preprocessor">#define VALS_   prefix, suffix, flags, deep</span>
<a name="l14942"></a>14942 <span class="preprocessor"></span>
<a name="l14943"></a>14943 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> StreamT&gt; <span class="keyword">const</span> T&amp;    _txDumpVal (<span class="keyword">const</span> T&amp;  value, StreamT&amp; stream, ARGS_);
<a name="l14944"></a>14944 
<a name="l14945"></a>14945 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14946"></a>14946 
<a name="l14947"></a>14947 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> T&amp;               _txDumpVar (<span class="keyword">const</span> T&amp;            value,          ARGS_)      { _txDumpVal (value, std:: cerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14948"></a>14948 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span>       T&amp;               _txDumpVar (      T&amp;            value,          ARGS_)      { _txDumpVal (value, std:: cerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14949"></a>14949 
<a name="l14950"></a>14950 <span class="keyword">template</span> &lt;<span class="keywordtype">int</span> N&gt;      <span class="keyword">inline</span> <span class="keyword">const</span> char           (&amp;_txDumpVar (<span class="keyword">const</span> <span class="keywordtype">char</span>        (&amp;value) [N],     ARGS_)) [N] { _txDumpVal (value, std:: cerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14951"></a>14951 <span class="keyword">template</span> &lt;<span class="keywordtype">int</span> N&gt;      <span class="keyword">inline</span>       char           (&amp;_txDumpVar (      <span class="keywordtype">char</span>        (&amp;value) [N],     ARGS_)) [N] { _txDumpVal (value, std:: cerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14952"></a>14952 
<a name="l14953"></a>14953 <span class="keyword">template</span> &lt;<span class="keywordtype">int</span> N&gt;      <span class="keyword">inline</span> <span class="keyword">const</span> wchar_t        (&amp;_txDumpVar (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>     (&amp;value) [N],     ARGS_)) [N] { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14954"></a>14954 <span class="keyword">template</span> &lt;<span class="keywordtype">int</span> N&gt;      <span class="keyword">inline</span>       wchar_t        (&amp;_txDumpVar (      <span class="keywordtype">wchar_t</span>     (&amp;value) [N],     ARGS_)) [N] { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14955"></a>14955 
<a name="l14956"></a>14956                       <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>&amp;         _txDumpVar (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>&amp;      value,          ARGS_)      { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14957"></a>14957                       <span class="keyword">inline</span>       <span class="keywordtype">wchar_t</span>&amp;         _txDumpVar (      <span class="keywordtype">wchar_t</span>&amp;      value,          ARGS_)      { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14958"></a>14958 
<a name="l14959"></a>14959                       <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>*&amp;        _txDumpVar (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>*&amp;     value,          ARGS_)      { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14960"></a>14960                       <span class="keyword">inline</span>       <span class="keywordtype">wchar_t</span>*&amp;        _txDumpVar (      <span class="keywordtype">wchar_t</span>*&amp;     value,          ARGS_)      { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14961"></a>14961 
<a name="l14962"></a>14962                       <span class="keyword">inline</span> <span class="keyword">const</span> std::wstring&amp;    _txDumpVar (<span class="keyword">const</span> std::wstring&amp; value,          ARGS_)      { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14963"></a>14963                       <span class="keyword">inline</span>       std::wstring&amp;    _txDumpVar (      std::wstring&amp; value,          ARGS_)      { _txDumpVal (value, std::wcerr, VALS_); <span class="keywordflow">return</span> value; }
<a name="l14964"></a>14964 
<a name="l14965"></a>14965 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14966"></a>14966 
<a name="l14967"></a>14967 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> StreamT&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> _txDumpVal (<span class="keyword">const</span> T&amp;            value, StreamT&amp; stream)     {                     stream &lt;&lt;         value;                                    }
<a name="l14968"></a>14968 <span class="keyword">template</span>             &lt;<span class="keyword">typename</span> StreamT&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> _txDumpVal (<span class="keyword">const</span> <span class="keywordtype">char</span>          value, StreamT&amp; stream)     {                     stream &lt;&lt;  <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; value &lt;&lt;  <span class="stringliteral">&quot;&#39;&quot;</span>;                            }
<a name="l14969"></a>14969 <span class="keyword">template</span>             &lt;<span class="keyword">typename</span> StreamT&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> _txDumpVal (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>       value, StreamT&amp; stream)     {                     stream &lt;&lt; L<span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; value &lt;&lt; L<span class="stringliteral">&quot;&#39;&quot;</span>;                            }
<a name="l14970"></a>14970 <span class="keyword">template</span>             &lt;<span class="keyword">typename</span> StreamT&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> _txDumpVal (<span class="keyword">const</span> <span class="keywordtype">char</span>*         value, StreamT&amp; stream)     { <span class="keywordflow">if</span> (value)          stream &lt;&lt;  <span class="charliteral">&#39;&quot;&#39;</span> &lt;&lt; value &lt;&lt;  <span class="charliteral">&#39;&quot;&#39;</span>; <span class="keywordflow">else</span> stream &lt;&lt;  <span class="stringliteral">&quot;(null)&quot;</span>;  }
<a name="l14971"></a>14971 <span class="keyword">template</span>             &lt;<span class="keyword">typename</span> StreamT&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> _txDumpVal (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>*      value, StreamT&amp; stream)     { <span class="keywordflow">if</span> (value)          stream &lt;&lt; L<span class="charliteral">&#39;&quot;&#39;</span> &lt;&lt; value &lt;&lt; L<span class="charliteral">&#39;&quot;&#39;</span>; <span class="keywordflow">else</span> stream &lt;&lt; L<span class="stringliteral">&quot;(null)&quot;</span>;  }
<a name="l14972"></a>14972 <span class="keyword">template</span>             &lt;<span class="keyword">typename</span> StreamT&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> _txDumpVal (<span class="keyword">const</span> std::string&amp;  value, StreamT&amp; stream)     { <span class="keywordflow">if</span> (value.length()) stream &lt;&lt;  <span class="charliteral">&#39;&quot;&#39;</span> &lt;&lt; value &lt;&lt;  <span class="charliteral">&#39;&quot;&#39;</span>; <span class="keywordflow">else</span> stream &lt;&lt;  <span class="stringliteral">&quot;(empty)&quot;</span>; }
<a name="l14973"></a>14973 <span class="keyword">template</span>             &lt;<span class="keyword">typename</span> StreamT&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> _txDumpVal (<span class="keyword">const</span> std::wstring&amp; value, StreamT&amp; stream)     { <span class="keywordflow">if</span> (value.length()) stream &lt;&lt; L<span class="charliteral">&#39;&quot;&#39;</span> &lt;&lt; value &lt;&lt; L<span class="charliteral">&#39;&quot;&#39;</span>; <span class="keywordflow">else</span> stream &lt;&lt; L<span class="stringliteral">&quot;(empty)&quot;</span>; }
<a name="l14974"></a>14974 
<a name="l14975"></a>14975 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l14976"></a>14976 
<a name="l14977"></a>14977 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> StreamT&gt;
<a name="l14978"></a>14978 <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; _txDumpVal (<span class="keyword">const</span> T&amp; value, StreamT&amp; stream, ARGS__)
<a name="l14979"></a>14979     {
<a name="l14980"></a>14980     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;value))  <span class="keywordflow">return</span> value;
<a name="l14981"></a>14981     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;stream)) <span class="keywordflow">return</span> value;
<a name="l14982"></a>14982     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED ( prefix)) <span class="keywordflow">return</span> value;
<a name="l14983"></a>14983     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED ( suffix)) <span class="keywordflow">return</span> value;
<a name="l14984"></a>14984 
<a name="l14985"></a>14985     $sc;
<a name="l14986"></a>14986     <span class="keywordflow">if</span> (!deep) stream &lt;&lt; prefix;
<a name="l14987"></a>14987 
<a name="l14988"></a>14988     std::ios_base::fmtflags old = stream.flags ((flags)? flags : stream.flags());
<a name="l14989"></a>14989 
<a name="l14990"></a>14990     <span class="keywordflow">if</span> (!_txIsBadReadPtr (&amp;value))
<a name="l14991"></a>14991         {
<a name="l14992"></a>14992         _txDumpVal (value, stream);
<a name="l14993"></a>14993         }
<a name="l14994"></a>14994     <span class="keywordflow">else</span>
<a name="l14995"></a>14995         {
<a name="l14996"></a>14996         $sE; stream &lt;&lt; <span class="stringliteral">&quot;&lt;НЕВЕРНЫЙ АДРЕС &quot;</span> &lt;&lt; &amp;value &lt;&lt; <span class="stringliteral">&quot;&gt;&quot;</span>;
<a name="l14997"></a>14997         }
<a name="l14998"></a>14998 
<a name="l14999"></a>14999     stream.flags (old);
<a name="l15000"></a>15000 
<a name="l15001"></a>15001     <span class="keywordflow">if</span> (!deep) stream &lt;&lt; ((*suffix == <span class="charliteral">&#39;]&#39;</span>)? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;: &quot;</span>) &lt;&lt; suffix;
<a name="l15002"></a>15002 
<a name="l15003"></a>15003     <span class="keywordflow">return</span> value;
<a name="l15004"></a>15004     }
<a name="l15005"></a>15005 
<a name="l15006"></a>15006 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15007"></a>15007 
<a name="l15008"></a>15008 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> N&gt;
<a name="l15009"></a>15009 <span class="keyword">inline</span> T (&amp;_txDumpVar (T (&amp;value) [N], ARGS_)) [N]
<a name="l15010"></a>15010     {
<a name="l15011"></a>15011     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;value))  <span class="keywordflow">return</span> value;
<a name="l15012"></a>15012     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED ( prefix)) <span class="keywordflow">return</span> value;
<a name="l15013"></a>15013     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED ( suffix)) <span class="keywordflow">return</span> value;
<a name="l15014"></a>15014 
<a name="l15015"></a>15015     std::ostream&amp; stream = std::cerr;
<a name="l15016"></a>15016 
<a name="l15017"></a>15017     $sc; <span class="keywordflow">if</span> (!deep) std::cerr &lt;&lt; prefix;
<a name="l15018"></a>15018     $C;  std::cerr &lt;&lt; ((deep)? <span class="stringliteral">&quot; {&quot;</span> : <span class="stringliteral">&quot;{&quot;</span>);
<a name="l15019"></a>15019 
<a name="l15020"></a>15020     <span class="keywordflow">if</span> (!_txIsBadReadPtr (value))
<a name="l15021"></a>15021         {
<a name="l15022"></a>15022         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; ; i++)
<a name="l15023"></a>15023             {
<a name="l15024"></a>15024             { $sC; stream &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]=&quot;</span>; }
<a name="l15025"></a>15025 
<a name="l15026"></a>15026             _txDumpVar (value[i], prefix, suffix, flags, deep+1);
<a name="l15027"></a>15027 
<a name="l15028"></a>15028             <span class="keywordflow">if</span> (i &gt;= N-1) <span class="keywordflow">break</span>;
<a name="l15029"></a>15029 
<a name="l15030"></a>15030             stream &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;
<a name="l15031"></a>15031             }
<a name="l15032"></a>15032         }
<a name="l15033"></a>15033     <span class="keywordflow">else</span>
<a name="l15034"></a>15034         {
<a name="l15035"></a>15035         $sE; stream &lt;&lt; <span class="stringliteral">&quot;&lt;НЕВЕРНЫЙ АДРЕС &quot;</span> &lt;&lt; &amp;value &lt;&lt; <span class="stringliteral">&quot;&gt;&quot;</span>;
<a name="l15036"></a>15036         }
<a name="l15037"></a>15037 
<a name="l15038"></a>15038     $C; std::cerr &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;
<a name="l15039"></a>15039     $c; <span class="keywordflow">if</span> (!deep) std::cerr &lt;&lt; ((*suffix == <span class="charliteral">&#39;]&#39;</span>)? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;: &quot;</span>) &lt;&lt; suffix;
<a name="l15040"></a>15040 
<a name="l15041"></a>15041     <span class="keywordflow">return</span> value;
<a name="l15042"></a>15042     }
<a name="l15043"></a>15043 
<a name="l15044"></a>15044 <span class="preprocessor">#undef ARGS__</span>
<a name="l15045"></a>15045 <span class="preprocessor"></span><span class="preprocessor">#undef ARGS_</span>
<a name="l15046"></a>15046 <span class="preprocessor"></span><span class="preprocessor">#undef VALS_</span>
<a name="l15047"></a>15047 <span class="preprocessor"></span>
<a name="l15048"></a>15048 <span class="comment">//=================================================================================================================</span>
<a name="l15049"></a>15049 
<a name="l15050"></a>15050 <span class="keyword">inline</span> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; stream, <span class="keyword">const</span> POINT&amp; point)
<a name="l15051"></a>15051     {
<a name="l15052"></a>15052     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;stream)) <span class="keywordflow">return</span> stream;
<a name="l15053"></a>15053     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;point))  <span class="keywordflow">return</span> stream;
<a name="l15054"></a>15054 
<a name="l15055"></a>15055     <span class="keywordflow">if</span> (&amp;point) stream &lt;&lt; <span class="stringliteral">&quot;{ x: &quot;</span> &lt;&lt; point.x &lt;&lt; <span class="stringliteral">&quot;, y: &quot;</span> &lt;&lt; point.y &lt;&lt; <span class="stringliteral">&quot; }&quot;</span>;
<a name="l15056"></a>15056     <span class="keywordflow">else</span>        stream &lt;&lt; <span class="stringliteral">&quot;(null)&quot;</span>;
<a name="l15057"></a>15057 
<a name="l15058"></a>15058     <span class="keywordflow">return</span> stream;
<a name="l15059"></a>15059     }
<a name="l15060"></a>15060 
<a name="l15061"></a>15061 <span class="keyword">inline</span> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; stream, <span class="keyword">const</span> SIZE&amp; size)
<a name="l15062"></a>15062     {
<a name="l15063"></a>15063     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;stream)) <span class="keywordflow">return</span> stream;
<a name="l15064"></a>15064     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;size))   <span class="keywordflow">return</span> stream;
<a name="l15065"></a>15065 
<a name="l15066"></a>15066     <span class="keywordflow">if</span> (&amp;size) stream &lt;&lt; <span class="stringliteral">&quot;{ cx: &quot;</span> &lt;&lt; size.cx &lt;&lt; <span class="stringliteral">&quot;, cy: &quot;</span> &lt;&lt; size.cy &lt;&lt; <span class="stringliteral">&quot; }&quot;</span>;
<a name="l15067"></a>15067     <span class="keywordflow">else</span>       stream &lt;&lt; <span class="stringliteral">&quot;(null)&quot;</span>;
<a name="l15068"></a>15068 
<a name="l15069"></a>15069     <span class="keywordflow">return</span> stream;
<a name="l15070"></a>15070     }
<a name="l15071"></a>15071 
<a name="l15072"></a>15072 <span class="keyword">inline</span> std::ostream&amp; operator &lt;&lt; (std::ostream&amp; stream, <span class="keyword">const</span> RECT&amp; rect)
<a name="l15073"></a>15073     {
<a name="l15074"></a>15074     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;stream)) <span class="keywordflow">return</span> stream;
<a name="l15075"></a>15075     <span class="keywordflow">if</span> (_TX_ARGUMENT_FAILED (&amp;rect))   <span class="keywordflow">return</span> stream;
<a name="l15076"></a>15076 
<a name="l15077"></a>15077     <span class="keywordflow">if</span> (&amp;rect) stream &lt;&lt; <span class="stringliteral">&quot;{ left: &quot;</span>  &lt;&lt; rect.left  &lt;&lt; <span class="stringliteral">&quot;, top: &quot;</span>    &lt;&lt; rect.top    &lt;&lt;
<a name="l15078"></a>15078                          <span class="stringliteral">&quot;, right: &quot;</span> &lt;&lt; rect.right &lt;&lt; <span class="stringliteral">&quot;, bottom: &quot;</span> &lt;&lt; rect.bottom &lt;&lt; <span class="stringliteral">&quot; }&quot;</span>;
<a name="l15079"></a>15079 
<a name="l15080"></a>15080     <span class="keywordflow">else</span>       stream &lt;&lt; <span class="stringliteral">&quot;(null)&quot;</span>;
<a name="l15081"></a>15081 
<a name="l15082"></a>15082     <span class="keywordflow">return</span> stream;
<a name="l15083"></a>15083     }
<a name="l15084"></a>15084 
<a name="l15085"></a>15085 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15087"></a>15087 <span class="comment"></span>
<a name="l15088"></a>15088 <span class="preprocessor">#endif</span>
<a name="l15089"></a>15089 <span class="preprocessor"></span>
<a name="l15090"></a>15090 <span class="comment">//}</span>
<a name="l15091"></a>15091 <span class="comment">//=================================================================================================================</span>
<a name="l15092"></a>15092 
<a name="l15094"></a>15094 
<a name="l15095"></a>15095 <span class="comment">//=================================================================================================================</span>
<a name="l15096"></a>15096 <span class="comment">//{          TXAPI calls tracing</span>
<a name="l15097"></a>15097 <span class="comment">//           Трассировка вызовов TXAPI</span>
<a name="l15098"></a>15098 <span class="comment">//=================================================================================================================</span>
<a name="l15099"></a>15099 
<a name="l15100"></a>15100 <span class="preprocessor">#ifndef FOR_DOXYGEN_ONLY</span>
<a name="l15101"></a>15101 <span class="preprocessor"></span>
<a name="l15102"></a>15102 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l15103"></a>15103 <span class="preprocessor"></span><span class="preprocessor">#undef  _txLocCurSet</span>
<a name="l15104"></a>15104 <span class="preprocessor"></span><span class="preprocessor">#define _txLocCurSet()                 __txLocCurSet (__FILE__, __LINE__, NULL)</span>
<a name="l15105"></a>15105 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l15106"></a>15106 <span class="preprocessor"></span>
<a name="l15107"></a>15107 <span class="preprocessor">#define txAlphaBlend(...)              ( _txLocCurSet(), txAlphaBlend          (__VA_ARGS__) )</span>
<a name="l15108"></a>15108 <span class="preprocessor"></span><span class="preprocessor">#define txArc(...)                     ( _txLocCurSet(), txArc                 (__VA_ARGS__) )</span>
<a name="l15109"></a>15109 <span class="preprocessor"></span><span class="preprocessor">#define txBegin(...)                   ( _txLocCurSet(), txBegin               (__VA_ARGS__) )</span>
<a name="l15110"></a>15110 <span class="preprocessor"></span><span class="preprocessor">#define txBitBlt(...)                  ( _txLocCurSet(), txBitBlt              (__VA_ARGS__) )</span>
<a name="l15111"></a>15111 <span class="preprocessor"></span><span class="preprocessor">#define txChord(...)                   ( _txLocCurSet(), txChord               (__VA_ARGS__) )</span>
<a name="l15112"></a>15112 <span class="preprocessor"></span><span class="preprocessor">#define txCircle(...)                  ( _txLocCurSet(), txCircle              (__VA_ARGS__) )</span>
<a name="l15113"></a>15113 <span class="preprocessor"></span><span class="preprocessor">#define txClear(...)                   ( _txLocCurSet(), txClear               (__VA_ARGS__) )</span>
<a name="l15114"></a>15114 <span class="preprocessor"></span><span class="preprocessor">#define txClearConsole(...)            ( _txLocCurSet(), txClearConsole        (__VA_ARGS__) )</span>
<a name="l15115"></a>15115 <span class="preprocessor"></span><span class="preprocessor">#define txColor(...)                   ( _txLocCurSet(), txColor               (__VA_ARGS__) )</span>
<a name="l15116"></a>15116 <span class="preprocessor"></span><span class="preprocessor">#define txCreateCompatibleDC(...)      ( _txLocCurSet(), txCreateCompatibleDC  (__VA_ARGS__) )</span>
<a name="l15117"></a>15117 <span class="preprocessor"></span><span class="preprocessor">#define txCreateDIBSection(...)        ( _txLocCurSet(), txCreateDIBSection    (__VA_ARGS__) )</span>
<a name="l15118"></a>15118 <span class="preprocessor"></span><span class="preprocessor">#define txCreateExtraWindow(...)       ( _txLocCurSet(), txCreateExtraWindow   (__VA_ARGS__) )</span>
<a name="l15119"></a>15119 <span class="preprocessor"></span><span class="preprocessor">#define txCreateExtraWindow(...)       ( _txLocCurSet(), txCreateExtraWindow   (__VA_ARGS__) )</span>
<a name="l15120"></a>15120 <span class="preprocessor"></span><span class="preprocessor">#define txCreateWindow(...)            ( _txLocCurSet(), txCreateWindow        (__VA_ARGS__) )</span>
<a name="l15121"></a>15121 <span class="preprocessor"></span><span class="preprocessor">#define txDC(...)                      ( _txLocCurSet(), txDC                  (__VA_ARGS__) )</span>
<a name="l15122"></a>15122 <span class="preprocessor"></span><span class="preprocessor">#define txDeleteDC(...)                ( _txLocCurSet(), txDeleteDC            (__VA_ARGS__) )</span>
<a name="l15123"></a>15123 <span class="preprocessor"></span><span class="preprocessor">#define txDemangle(...)                ( _txLocCurSet(), txDemangle            (__VA_ARGS__) )</span>
<a name="l15124"></a>15124 <span class="preprocessor"></span><span class="preprocessor">#define txDestroyWindow(...)           ( _txLocCurSet(), txDestroyWindow       (__VA_ARGS__) )</span>
<a name="l15125"></a>15125 <span class="preprocessor"></span><span class="preprocessor">#define txDisableAutoPause(...)        ( _txLocCurSet(), txDisableAutoPause    (__VA_ARGS__) )</span>
<a name="l15126"></a>15126 <span class="preprocessor"></span><span class="preprocessor">#define txDrawText(...)                ( _txLocCurSet(), txDrawText            (__VA_ARGS__) )</span>
<a name="l15127"></a>15127 <span class="preprocessor"></span><span class="preprocessor">#define txEllipse(...)                 ( _txLocCurSet(), txEllipse             (__VA_ARGS__) )</span>
<a name="l15128"></a>15128 <span class="preprocessor"></span><span class="preprocessor">#define txEnd(...)                     ( _txLocCurSet(), txEnd                 (__VA_ARGS__) )</span>
<a name="l15129"></a>15129 <span class="preprocessor"></span><span class="preprocessor">#define txExtractColor(...)            ( _txLocCurSet(), txExtractColor        (__VA_ARGS__) )</span>
<a name="l15130"></a>15130 <span class="preprocessor"></span><span class="preprocessor">#define txFillColor(...)               ( _txLocCurSet(), txFillColor           (__VA_ARGS__) )</span>
<a name="l15131"></a>15131 <span class="preprocessor"></span><span class="preprocessor">#define txFloodFill(...)               ( _txLocCurSet(), txFloodFill           (__VA_ARGS__) )</span>
<a name="l15132"></a>15132 <span class="preprocessor"></span><span class="preprocessor">#define txFontExist(...)               ( _txLocCurSet(), txFontExist           (__VA_ARGS__) )</span>
<a name="l15133"></a>15133 <span class="preprocessor"></span><span class="preprocessor">#define txFormat(...)                  ( _txLocCurSet(), txFormat              (__VA_ARGS__) )</span>
<a name="l15134"></a>15134 <span class="preprocessor"></span><span class="preprocessor">#define txGetAsyncKeyState(...)        ( _txLocCurSet(), txGetAsyncKeyState    (__VA_ARGS__) )</span>
<a name="l15135"></a>15135 <span class="preprocessor"></span><span class="preprocessor">#define txGetColor(...)                ( _txLocCurSet(), txGetColor            (__VA_ARGS__) )</span>
<a name="l15136"></a>15136 <span class="preprocessor"></span><span class="preprocessor">#define txGetConsoleAttr(...)          ( _txLocCurSet(), txGetConsoleAttr      (__VA_ARGS__) )</span>
<a name="l15137"></a>15137 <span class="preprocessor"></span><span class="preprocessor">#define txGetConsoleCursorPos(...)     ( _txLocCurSet(), txGetConsoleCursorPos (__VA_ARGS__) )</span>
<a name="l15138"></a>15138 <span class="preprocessor"></span><span class="preprocessor">#define txGetConsoleExtent(...)        ( _txLocCurSet(), txGetConsoleExtent    (__VA_ARGS__) )</span>
<a name="l15139"></a>15139 <span class="preprocessor"></span><span class="preprocessor">#define txGetConsoleFontSize(...)      ( _txLocCurSet(), txGetConsoleFontSize  (__VA_ARGS__) )</span>
<a name="l15140"></a>15140 <span class="preprocessor"></span><span class="preprocessor">#define txGetExtent(...)               ( _txLocCurSet(), txGetExtent           (__VA_ARGS__) )</span>
<a name="l15141"></a>15141 <span class="preprocessor"></span><span class="preprocessor">#define txGetExtentX(...)              ( _txLocCurSet(), txGetExtentX          (__VA_ARGS__) )</span>
<a name="l15142"></a>15142 <span class="preprocessor"></span><span class="preprocessor">#define txGetExtentY(...)              ( _txLocCurSet(), txGetExtentY          (__VA_ARGS__) )</span>
<a name="l15143"></a>15143 <span class="preprocessor"></span><span class="preprocessor">#define txGetFillColor(...)            ( _txLocCurSet(), txGetFillColor        (__VA_ARGS__) )</span>
<a name="l15144"></a>15144 <span class="preprocessor"></span><span class="preprocessor">#define txGetFPS(...)                  ( _txLocCurSet(), txGetFPS              (__VA_ARGS__) )</span>
<a name="l15145"></a>15145 <span class="preprocessor"></span><span class="preprocessor">#define txGetModuleFileName(...)       ( _txLocCurSet(), txGetModuleFileName   (__VA_ARGS__) )</span>
<a name="l15146"></a>15146 <span class="preprocessor"></span><span class="preprocessor">#define txGetPixel(...)                ( _txLocCurSet(), txGetPixel            (__VA_ARGS__) )</span>
<a name="l15147"></a>15147 <span class="preprocessor"></span><span class="preprocessor">#define txGetTextExtent(...)           ( _txLocCurSet(), txGetTextExtent       (__VA_ARGS__) )</span>
<a name="l15148"></a>15148 <span class="preprocessor"></span><span class="preprocessor">#define txGetTextExtentX(...)          ( _txLocCurSet(), txGetTextExtentX      (__VA_ARGS__) )</span>
<a name="l15149"></a>15149 <span class="preprocessor"></span><span class="preprocessor">#define txGetTextExtentY(...)          ( _txLocCurSet(), txGetTextExtentY      (__VA_ARGS__) )</span>
<a name="l15150"></a>15150 <span class="preprocessor"></span><span class="preprocessor">#define txHSL2RGB(...)                 ( _txLocCurSet(), txHSL2RGB             (__VA_ARGS__) )</span>
<a name="l15151"></a>15151 <span class="preprocessor"></span><span class="preprocessor">#define txInputBox(...)                ( _txLocCurSet(), txInputBox            (__VA_ARGS__) )</span>
<a name="l15152"></a>15152 <span class="preprocessor"></span><span class="preprocessor">#define txLine(...)                    ( _txLocCurSet(), txLine                (__VA_ARGS__) )</span>
<a name="l15153"></a>15153 <span class="preprocessor"></span><span class="preprocessor">#define txLoadImage(...)               ( _txLocCurSet(), txLoadImage           (__VA_ARGS__) )</span>
<a name="l15154"></a>15154 <span class="preprocessor"></span><span class="preprocessor">#define txLock(...)                    ( _txLocCurSet(), txLock                (__VA_ARGS__) )</span>
<a name="l15155"></a>15155 <span class="preprocessor"></span><span class="preprocessor">#define txMessageBox(...)              ( _txLocCurSet(), txMessageBox          (__VA_ARGS__) )</span>
<a name="l15156"></a>15156 <span class="preprocessor"></span><span class="preprocessor">#define txMouseButtons(...)            ( _txLocCurSet(), txMouseButtons        (__VA_ARGS__) )</span>
<a name="l15157"></a>15157 <span class="preprocessor"></span><span class="preprocessor">#define txMousePos(...)                ( _txLocCurSet(), txMousePos            (__VA_ARGS__) )</span>
<a name="l15158"></a>15158 <span class="preprocessor"></span><span class="preprocessor">#define txMouseX(...)                  ( _txLocCurSet(), txMouseX              (__VA_ARGS__) )</span>
<a name="l15159"></a>15159 <span class="preprocessor"></span><span class="preprocessor">#define txMouseY(...)                  ( _txLocCurSet(), txMouseY              (__VA_ARGS__) )</span>
<a name="l15160"></a>15160 <span class="preprocessor"></span><span class="preprocessor">#define txNotifyIcon(...)              ( _txLocCurSet(), txNotifyIcon          (__VA_ARGS__) )</span>
<a name="l15161"></a>15161 <span class="preprocessor"></span><span class="preprocessor">#define txOK(...)                      ( _txLocCurSet(), txOK                  (__VA_ARGS__) )</span>
<a name="l15162"></a>15162 <span class="preprocessor"></span><span class="preprocessor">#define txOutputDebugPrintf(...)       ( _txLocCurSet(), txOutputDebugPrintf   (__VA_ARGS__) )</span>
<a name="l15163"></a>15163 <span class="preprocessor"></span><span class="preprocessor">#define txPie(...)                     ( _txLocCurSet(), txPie                 (__VA_ARGS__) )</span>
<a name="l15164"></a>15164 <span class="preprocessor"></span><span class="preprocessor">#define txPixel(...)                   ( _txLocCurSet(), txPixel               (__VA_ARGS__) )</span>
<a name="l15165"></a>15165 <span class="preprocessor"></span><span class="preprocessor">#define txPlaySound(...)               ( _txLocCurSet(), txPlaySound           (__VA_ARGS__) )</span>
<a name="l15166"></a>15166 <span class="preprocessor"></span><span class="preprocessor">#define txPlayVideo(...)               ( _txLocCurSet(), txPlayVideo           (__VA_ARGS__) )</span>
<a name="l15167"></a>15167 <span class="preprocessor"></span><span class="preprocessor">#define txPolygon(...)                 ( _txLocCurSet(), txPolygon             (__VA_ARGS__) )</span>
<a name="l15168"></a>15168 <span class="preprocessor"></span><span class="preprocessor">#define txPrintf(...)                  ( _txLocCurSet(), txPrintf              (__VA_ARGS__) )</span>
<a name="l15169"></a>15169 <span class="preprocessor"></span><span class="preprocessor">#define txQueryPerformance(...)        ( _txLocCurSet(), txQueryPerformance    (__VA_ARGS__) )</span>
<a name="l15170"></a>15170 <span class="preprocessor"></span><span class="preprocessor">#define txRectangle(...)               ( _txLocCurSet(), txRectangle           (__VA_ARGS__) )</span>
<a name="l15171"></a>15171 <span class="preprocessor"></span><span class="preprocessor">#define txRedrawWindow(...)            ( _txLocCurSet(), txRedrawWindow        (__VA_ARGS__) )</span>
<a name="l15172"></a>15172 <span class="preprocessor"></span><span class="preprocessor">#define txRegisterClass(...)           ( _txLocCurSet(), txRegisterClass       (__VA_ARGS__) )</span>
<a name="l15173"></a>15173 <span class="preprocessor"></span><span class="preprocessor">#define txRegisterClass(...)           ( _txLocCurSet(), txRegisterClass       (__VA_ARGS__) )</span>
<a name="l15174"></a>15174 <span class="preprocessor"></span><span class="preprocessor">#define txRegQuery(...)                ( _txLocCurSet(), txRegQuery            (__VA_ARGS__) )</span>
<a name="l15175"></a>15175 <span class="preprocessor"></span><span class="preprocessor">#define txReopenStdio(...)             ( _txLocCurSet(), txReopenStdio         (__VA_ARGS__) )</span>
<a name="l15176"></a>15176 <span class="preprocessor"></span><span class="preprocessor">#define txReopenStdio(...)             ( _txLocCurSet(), txReopenStdio         (__VA_ARGS__) )</span>
<a name="l15177"></a>15177 <span class="preprocessor"></span><span class="preprocessor">#define txRGB2HSL(...)                 ( _txLocCurSet(), txRGB2HSL             (__VA_ARGS__) )</span>
<a name="l15178"></a>15178 <span class="preprocessor"></span><span class="preprocessor">#define txSaveImage(...)               ( _txLocCurSet(), txSaveImage           (__VA_ARGS__) )</span>
<a name="l15179"></a>15179 <span class="preprocessor"></span><span class="preprocessor">#define txSelectFont(...)              ( _txLocCurSet(), txSelectFont          (__VA_ARGS__) )</span>
<a name="l15180"></a>15180 <span class="preprocessor"></span><span class="preprocessor">#define txSelectObject(...)            ( _txLocCurSet(), txSelectObject        (__VA_ARGS__) )</span>
<a name="l15181"></a>15181 <span class="preprocessor"></span><span class="preprocessor">#define txSetColor(...)                ( _txLocCurSet(), txSetColor            (__VA_ARGS__) )</span>
<a name="l15182"></a>15182 <span class="preprocessor"></span><span class="preprocessor">#define txSetConsoleAttr(...)          ( _txLocCurSet(), txSetConsoleAttr      (__VA_ARGS__) )</span>
<a name="l15183"></a>15183 <span class="preprocessor"></span><span class="preprocessor">#define txSetConsoleCursorPos(...)     ( _txLocCurSet(), txSetConsoleCursorPos (__VA_ARGS__) )</span>
<a name="l15184"></a>15184 <span class="preprocessor"></span><span class="preprocessor">#define txSetDefaults(...)             ( _txLocCurSet(), txSetDefaults         (__VA_ARGS__) )</span>
<a name="l15185"></a>15185 <span class="preprocessor"></span><span class="preprocessor">#define txSetFillColor(...)            ( _txLocCurSet(), txSetFillColor        (__VA_ARGS__) )</span>
<a name="l15186"></a>15186 <span class="preprocessor"></span><span class="preprocessor">#define txSetLocale(...)               ( _txLocCurSet(), txSetLocale           (__VA_ARGS__) )</span>
<a name="l15187"></a>15187 <span class="preprocessor"></span><span class="preprocessor">#define txSetPixel(...)                ( _txLocCurSet(), txSetPixel            (__VA_ARGS__) )</span>
<a name="l15188"></a>15188 <span class="preprocessor"></span><span class="preprocessor">#define txSetTextAlign(...)            ( _txLocCurSet(), txSetTextAlign        (__VA_ARGS__) )</span>
<a name="l15189"></a>15189 <span class="preprocessor"></span><span class="preprocessor">#define txSetWindowsHook(...)          ( _txLocCurSet(), txSetWindowsHook      (__VA_ARGS__) )</span>
<a name="l15190"></a>15190 <span class="preprocessor"></span><span class="preprocessor">#define txSleep(...)                   ( _txLocCurSet(), txSleep               (__VA_ARGS__) )</span>
<a name="l15191"></a>15191 <span class="preprocessor"></span><span class="preprocessor">#define txSpeak(...)                   ( _txLocCurSet(), txSpeak               (__VA_ARGS__) )</span>
<a name="l15192"></a>15192 <span class="preprocessor"></span><span class="preprocessor">#define txTaskKill(...)                ( _txLocCurSet(), txTaskKill            (__VA_ARGS__) )</span>
<a name="l15193"></a>15193 <span class="preprocessor"></span><span class="preprocessor">#define txTextCursor(...)              ( _txLocCurSet(), txTextCursor          (__VA_ARGS__) )</span>
<a name="l15194"></a>15194 <span class="preprocessor"></span><span class="preprocessor">#define txTextOut(...)                 ( _txLocCurSet(), txTextOut             (__VA_ARGS__) )</span>
<a name="l15195"></a>15195 <span class="preprocessor"></span><span class="preprocessor">#define txTransparentBlt(...)          ( _txLocCurSet(), txTransparentBlt      (__VA_ARGS__) )</span>
<a name="l15196"></a>15196 <span class="preprocessor"></span><span class="preprocessor">#define txTriangle(...)                ( _txLocCurSet(), txTriangle            (__VA_ARGS__) )</span>
<a name="l15197"></a>15197 <span class="preprocessor"></span><span class="preprocessor">#define txUnlock(...)                  ( _txLocCurSet(), txUnlock              (__VA_ARGS__) )</span>
<a name="l15198"></a>15198 <span class="preprocessor"></span><span class="preprocessor">#define txUpdateWindow(...)            ( _txLocCurSet(), txUpdateWindow        (__VA_ARGS__) )</span>
<a name="l15199"></a>15199 <span class="preprocessor"></span><span class="preprocessor">#define txUseAlpha(...)                ( _txLocCurSet(), txUseAlpha            (__VA_ARGS__) )</span>
<a name="l15200"></a>15200 <span class="preprocessor"></span><span class="preprocessor">#define txVersion(...)                 ( _txLocCurSet(), txVersion             (__VA_ARGS__) )</span>
<a name="l15201"></a>15201 <span class="preprocessor"></span><span class="preprocessor">#define txVersionNumber(...)           ( _txLocCurSet(), txVersionNumber       (__VA_ARGS__) )</span>
<a name="l15202"></a>15202 <span class="preprocessor"></span><span class="preprocessor">#define txWindow(...)                  ( _txLocCurSet(), txWindow              (__VA_ARGS__) )</span>
<a name="l15203"></a>15203 <span class="preprocessor"></span><span class="preprocessor">#define tx_fpreset(...)                ( _txLocCurSet(), tx_fpreset            (__VA_ARGS__) )</span>
<a name="l15204"></a>15204 <span class="preprocessor"></span><span class="preprocessor">#define tx_glGetError(...)             ( _txLocCurSet(), tx_glGetError         (__VA_ARGS__) )</span>
<a name="l15205"></a>15205 <span class="preprocessor"></span><span class="preprocessor">#define _txDump(...)                   ( _txLocCurSet(), _txDump               (__VA_ARGS__) )</span>
<a name="l15206"></a>15206 <span class="preprocessor"></span><span class="preprocessor">#define _txStackBackTrace(...)         ( _txLocCurSet(), _txStackBackTrace     (__VA_ARGS__) )</span>
<a name="l15207"></a>15207 <span class="preprocessor"></span>
<a name="l15208"></a>15208 <span class="preprocessor">#endif</span>
<a name="l15209"></a>15209 <span class="preprocessor"></span>
<a name="l15210"></a>15210 <span class="comment">//}</span>
<a name="l15211"></a>15211 <span class="comment">//=================================================================================================================</span>
<a name="l15212"></a>15212 
<a name="l15214"></a>15214 <span class="comment">//}</span>
<a name="l15215"></a>15215 <span class="comment">//=================================================================================================================</span>
<a name="l15216"></a>15216 
<a name="l15219"></a>15219 } }  <span class="comment">// namespace TX, anonymous namespace</span>
<a name="l15220"></a>15220 
<a name="l15223"></a>15223 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15224"></a>15224 <span class="comment">//{          The namespaces: easy using of TX:: and some of std::</span>
<a name="l15225"></a>15225 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15226"></a>15226 
<a name="l15227"></a>15227 <span class="keyword">using namespace </span>TX;                    <span class="comment">// Allow easy usage of TXLib functions</span>
<a name="l15228"></a>15228 
<a name="l15229"></a>15229 using ::std::cin;                      <span class="comment">// Predefined usings to avoid &quot;using namespace std&quot;                         </span>
<a name="l15230"></a>15230 using ::std::cout;                                                                                                 
<a name="l15231"></a>15231 using ::std::cerr;                                                                                                 
<a name="l15232"></a>15232 using ::std::string;                                                                                               
<a name="l15233"></a>15233 using ::std::wcin;                                                                                                 
<a name="l15234"></a>15234 using ::std::wcout;                                                                                                
<a name="l15235"></a>15235 using ::std::wcerr;                                                                                                
<a name="l15236"></a>15236 using ::std::wstring;                                                                                              
<a name="l15237"></a>15237                                                                                                                    
<a name="l15238"></a>15238 <span class="comment">//}                                                                                                                </span>
<a name="l15239"></a>15239 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15240"></a>15240                                                                                                                    
<a name="l15241"></a>15241 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15242"></a>15242 <span class="comment">//{          Compiler- and platform-specific                                                                       </span>
<a name="l15243"></a>15243 <span class="comment">//           Адаптация к компиляторам и платформам                                                                 </span>
<a name="l15244"></a>15244 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15246"></a>15246 <span class="comment"></span>                                                                                                                   
<a name="l15247"></a>15247 <span class="preprocessor">#if defined (_GCC_VER)                                                                                             </span>
<a name="l15248"></a>15248 <span class="preprocessor"></span>                                                                                                                   
<a name="l15249"></a>15249 <span class="preprocessor">    #pragma GCC optimize               &quot;strict-aliasing&quot;                                                           </span>
<a name="l15250"></a>15250 <span class="preprocessor"></span>                                                                                                                   
<a name="l15251"></a>15251 <span class="preprocessor">    #pragma GCC pop_options                                                                                        </span>
<a name="l15252"></a>15252 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic pop                                                                                     </span>
<a name="l15253"></a>15253 <span class="preprocessor"></span>                                                                                                                   
<a name="l15254"></a>15254 <span class="preprocessor">    #endif                                                                                                         </span>
<a name="l15255"></a>15255 <span class="preprocessor"></span>                                                                                                                   
<a name="l15256"></a>15256 <span class="preprocessor">#if defined (_CLANG_VER)                                                                                           </span>
<a name="l15257"></a>15257 <span class="preprocessor"></span>                                                                                                                   
<a name="l15258"></a>15258 <span class="preprocessor">    #pragma clang diagnostic pop                                                                                   </span>
<a name="l15259"></a>15259 <span class="preprocessor"></span>                                                                                                                   
<a name="l15260"></a>15260 <span class="preprocessor">    #endif                                                                                                         </span>
<a name="l15261"></a>15261 <span class="preprocessor"></span>                                                                                                                   
<a name="l15262"></a>15262 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15263"></a>15263                                                                                                                    
<a name="l15264"></a>15264 <span class="preprocessor">#if defined (_MSC_VER)                                                                                             </span>
<a name="l15265"></a>15265 <span class="preprocessor"></span>                                                                                                                   
<a name="l15266"></a>15266 <span class="preprocessor">    #pragma warning (pop)              // Restoring maximum level                                                  </span>
<a name="l15267"></a>15267 <span class="preprocessor"></span>                                                                                                                   
<a name="l15268"></a>15268 <span class="preprocessor">    #endif                                                                                                         </span>
<a name="l15269"></a>15269 <span class="preprocessor"></span>                                                                                                                   
<a name="l15270"></a>15270 <span class="preprocessor">#if defined (__INTEL_COMPILER)                                                                                     </span>
<a name="l15271"></a>15271 <span class="preprocessor"></span>                                                                                                                   
<a name="l15272"></a>15272 <span class="preprocessor">    #pragma warning (default:  174)    // Remark: expression has no effect                                         </span>
<a name="l15273"></a>15273 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  304)    // Remark: access control not specified (&quot;public&quot; by default)               </span>
<a name="l15274"></a>15274 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  444)    // Remark: destructor for base class &quot;...&quot; is not virtual                   </span>
<a name="l15275"></a>15275 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  522)    // Remark: function redeclared &quot;inline&quot; after being called                  </span>
<a name="l15276"></a>15276 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 1684)    // Conversion from pointer to same-sized integral type (potential portability problem)</span>
<a name="l15277"></a>15277 <span class="preprocessor"></span>                                                                                                                   
<a name="l15278"></a>15278 <span class="preprocessor">    #pragma warning (disable:  981)    // Remark: operands are evaluated in unspecified order                      </span>
<a name="l15279"></a>15279 <span class="preprocessor"></span>                                                                                                                   
<a name="l15280"></a>15280 <span class="preprocessor">    #endif                                                                                                         </span>
<a name="l15281"></a>15281 <span class="preprocessor"></span>                                                                                                                   
<a name="l15283"></a>15283 <span class="comment">//}                                                                                                                </span>
<a name="l15284"></a>15284 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l15285"></a>15285                                                                                                                    
<a name="l15286"></a>15286 <span class="preprocessor">#endif // __TXLIB_H_INCLUDED                                                                                       </span>
<a name="l15287"></a>15287 <span class="preprocessor"></span>                                                                                                                   
<a name="l15288"></a>15288 <span class="comment">//=================================================================================================================</span>
<a name="l15289"></a>15289 <span class="comment">// EOF                                                                                                             </span>
<a name="l15290"></a>15290 <span class="comment">//=================================================================================================================</span>
<a name="l15291"></a>15291                                                                                   
<a name="l15292"></a>15292 
<a name="l15293"></a>15293 
<a name="l15294"></a>15294 
<a name="l15295"></a>15295 
<a name="l15296"></a>15296 
<a name="l15297"></a>15297 
<a name="l15298"></a>15298 
<a name="l15299"></a>15299 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="a00058.htm">TXLib.h</a>      </li>
<!-- --------------------------------------------------------------------------
  Doxygen_HTM.htm
  $Version: 00173a, Revision: 165 $
  $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru> $
  $Date: 2020-03-26 02:25:56 +0400 $
 -------------------------------------------------------------------------- -->

<table class="" width="100%"><tr valign="top">

  <td align="left">
    <small><a href="http://orphus.ru">Нашли ошибку? Выделите ее мышкой и нажмите Ctrl+ENTER. &copy;&#160;Orphus.ru.</a></small><br>
    <a href="http://orphus.ru" id="orphus" target="_blank"><img class = "footer" alt="Orphus" src="http://storage.ded32.net.ru/orphus.gif" border="0"></a>
    </td>

  <td align="right">
    Документация по TX Library. Дата: Wed May 20 2020 11:43:57. Создано&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3
    <img src="http://storage.ded32.net.ru/stat/TXLib-Help.chm" width=1px height=1px border="0">
    </td>
  </tr></table>

</ul>
</div>

<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol)? "https://ssl." : "http://www."); document.write (unescape ("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); try { var pageTracker = _gat._getTracker ("UA-7927138-1"); pageTracker._trackPageview(); } catch (err) {}</script>
<script type="text/javascript" src="http://storage.ded32.net.ru/orphus.js"></script>

</body>
</html>
